{"version":3,"file":"static/js/711.b4ae840f.chunk.js","mappings":"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","sources":["Maintain/LicenseView.js"],"sourcesContent":["import React from \"react\";\n\nimport $ from \"jquery\";\n//import Subscriptionviewform from './LicenseViewForm.js';\nimport Subscriptionedit from \"./LicenseEdit.js\";\nimport Rolling from '../assets/images/rolling.svg';\n\nexport default class LicenseView extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            tableData: [],\n            newTableData: [],\n            viewTable: true,\n            editItemData: {},\n            searchString: '',\n            showTableInit: false\n        };\n    }\n\n    /* istanbul ignore next */\n    componentDidMount() {\n        this.handleDataTable(false);\n    }\n\n    /* istanbul ignore next */\n    handleDataTable(preserveState) {\n        let technicalTableData = [];\n     \n            if (sessionStorage.getItem(\"snapshotData\") !== null) {\n                    let respData =  JSON.parse(sessionStorage.getItem(\"snapshotData\"))\n                    let allData =[]\n                      Object.keys(respData).forEach((key)=> {\n                          allData.push(respData[key])\n                      });\n                      for(let individualData of allData){\n                          if(individualData.parent){\n                              if(individualData.parent ===\"ab2a2691-a563-486c-9883-5111ff36ba9b\"){\n                                console.log(individualData);\n                                technicalTableData.push(individualData);\n                              }\n                          }\n                      }\n                    this.generateTableStructure(technicalTableData, preserveState);\n                    this.setState({\n                        tableData: technicalTableData\n                    });\n               \n            }\n            else {\n                this.props.showGlobalMessage(true, true, 'Please try after sometime', 'custom-danger');\n                setTimeout(()=> {\n                    this.props.hideGlobalMessage();\n                }, 2000);\n            }\n    }\n\n    /* istanbul ignore next */\n    initTable(tableId, preserveState) {\n        var pageLength = 5;\n        let tableWidth = 0;\n          tableWidth = $(\"#subscriptionupgradeTableDiv\")[0].offsetWidth - 200;\n          $(\"#\" + tableId).DataTable({\n            dom: 'rt<\"bottom\"lp>',\n            bSort: true,\n            scrollX: true,\n            language: {\n              paginate: {\n                previous: \"<\",\n                next: \">\",\n              },\n            },\n            createdRow: function (row, data, dataIndex) {\n              for (let i = 0; i < data.length; i++) {\n                $(\"td:eq(\" + i + \")\", row).css(\n                  \"min-width\",\n                  tableWidth / data.length + \"px\"\n                );\n              }\n            },\n            pageLength: pageLength,\n            stateSave: preserveState,\n            destroy: true,\n            fnDrawCallback: function (oSettings) {\n              if (oSettings.aiDisplay.length <= pageLength) {\n                $(\".dataTables_paginate\").hide();\n              } else {\n                $(\".dataTables_paginate\").show();\n              }\n            },\n          });\n        $(\".bottom\").addClass(\"row\");\n        $(\".dataTables_length\").addClass(\"col-sm-6\");\n        $(\".dataTables_paginate\").addClass(\"col-sm-6\");\n      }\n    \n\n    /* istanbul ignore next */\n    generateTableStructure(technicalTableData, preserveState) {\n        let tableData = technicalTableData;\n        let newTableData = [];\n        for (let dataObj of tableData) {\n            let newDataObj = {};\n            newDataObj.licenseId = dataObj.licenseId;\n            newDataObj.emailAddress = dataObj.emailAddress;\n            newDataObj.date = dataObj.date;\n            newDataObj.sso = dataObj.sso;\n            newDataObj.username = dataObj.username;\n            newDataObj.desc = dataObj.desc;\n            newDataObj.key = dataObj.key;\n            newTableData.push(newDataObj);\n        }\n\n        this.setState({\n            newTableData: newTableData,\n            showTableInit: true\n        });\n\n        setTimeout( () =>  {\n            this.initTable('subscriptionupgradeTable', preserveState);\n        }, 100);\n    }\n\n    /* istanbul ignore next */\n    showHideTableTdData(objectIndex, fieldName) {\n        let newTableData = [...this.state.newTableData];\n        let copiedObjectToChange = Object.assign({}, newTableData[objectIndex]);\n        if (fieldName === 'subscriptionId') {\n            let tempValue = copiedObjectToChange.subscriptionId;\n            copiedObjectToChange.subscriptionId = copiedObjectToChange.subscriptionIdHidden;\n            copiedObjectToChange.subscriptionIdHidden = tempValue;\n            copiedObjectToChange.subscriptionIdHiddenFlag = !copiedObjectToChange.subscriptionIdHiddenFlag;\n            newTableData[objectIndex] = copiedObjectToChange;\n        }\n        else if (fieldName === 'serviceUri') {\n            let tempValue = copiedObjectToChange.serviceUri;\n            copiedObjectToChange.serviceUri = copiedObjectToChange.serviceUriHidden;\n            copiedObjectToChange.serviceUriHidden = tempValue;\n            copiedObjectToChange.serviceUriHiddenFlag = !copiedObjectToChange.serviceUriHiddenFlag;\n            newTableData[objectIndex] = copiedObjectToChange;\n        }\n\n        else if (fieldName === 'subscriptionName') {\n            let tempValue = copiedObjectToChange.subscriptionName;\n            copiedObjectToChange.subscriptionName = copiedObjectToChange.subscriptionNameHidden;\n            copiedObjectToChange.subscriptionNameHidden = tempValue;\n            copiedObjectToChange.subscriptionNameHiddenFlag = !copiedObjectToChange.subscriptionNameHiddenFlag;\n            newTableData[objectIndex] = copiedObjectToChange;\n        }\n\n        else if (fieldName === 'uaaUrl') {\n            let tempValue = copiedObjectToChange.uaaUrl;\n            copiedObjectToChange.uaaUrl = copiedObjectToChange.uaaUrlHidden;\n            copiedObjectToChange.uaaUrlHidden = tempValue;\n            copiedObjectToChange.uaaUrlHiddenFlag = !copiedObjectToChange.uaaUrlHiddenFlag;\n            newTableData[objectIndex] = copiedObjectToChange;\n        }\n\n        this.setState({\n            newTableData: newTableData\n        });\n    }\n\n    /* istanbul ignore next */\n    filterByValue(myArray, string){\n        let retArr = [];\n       for (var i=0; i < myArray.length; i++) {\n            if (myArray[i].licenseId.toLowerCase().includes(string.toLowerCase()) || myArray[i].emailAddress.toLowerCase().includes(string.toLowerCase()) || myArray[i].date.includes(string) || myArray[i].sso.includes(string)  ) {\n                retArr.push(myArray[i]);\n            }\n        }\n        return retArr;\n    }\n\n    /* istanbul ignore next */\n    destroyDataTable(tableId) {\n        var table = $(\"#\" + tableId).DataTable();\n        table.destroy();\n      }\n\n    /* istanbul ignore next */\n    filterData(e) {\n        this.destroyDataTable('subscriptionupgradeTable');\n        let searchStr = e.target.value.trim();\n        let searchStrWithSp = e.target.value;\n        let wholeData = [...this.state.tableData];\n        let filteredData = [];\n        let newTableData = [];\n        if (searchStr !== '') {\n            filteredData = this.filterByValue(wholeData, searchStr);\n            //console.log(filteredData);\n        }\n        else {\n            filteredData = wholeData;\n        }\n\n        for (let dataObj of filteredData) {\n            let newDataObj = {};\n         \n            newDataObj.licenseId = dataObj.licenseId;\n            newDataObj.emailAddress = dataObj.emailAddress;\n            newDataObj.date = dataObj.date;\n            newDataObj.sso = dataObj.sso;\n            newDataObj.username = dataObj.username;\n            newDataObj.desc = dataObj.desc;\n\n            newTableData.push(newDataObj);\n        }\n\n        this.setState({\n            newTableData: newTableData,\n            searchString: searchStrWithSp\n        });\n\n        setTimeout( () => {\n            this.initTable('subscriptionupgradeTable', false);\n        }, 0);\n    }\n\n    /* istanbul ignore next */\n    edit(item) {\n        let editItem = Object.assign({}, item);\n        this.destroyDataTable('subscriptionupgradeTable');\n        this.setState({\n            editItemData: editItem,\n            viewTable: false\n        });\n    }\n\n    /* istanbul ignore next */\n    removeDataTableRow(tableId, rowIndex) {\n        var table = $(\"#\" + tableId).DataTable();\n        table\n          .row(\"#\" + tableId + \"TbodyTr_\" + rowIndex)\n          .remove()\n          .draw(false);\n      }\n\n    /* istanbul ignore next */\n    deleteData(tbodyVal, rowIndex) {\n        let cnf = window.confirm('Are you sure you want to delete');\n        if (cnf) {\n            let subscripnId = tbodyVal.subscriptionId;\n            if(tbodyVal.subscriptionIdHiddenFlag){\n                subscripnId = tbodyVal.subscriptionIdHidden;\n            }\n            this.props.showGlobalMessage(true, true, 'Please Wait....', 'custom-success');\n            fetch(this.props.baseUrl + '/deleteSubscription?subscriptionID='+subscripnId, {\n                method: 'DELETE',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json',\n                    'Authorization': 'Bearer '+this.props.authToken\n                }\n            })\n            .then((response) => {\n                if (response.status === 200) {\n                    response.json().then((respData) => {\n                        if (respData.errorStatus.status === 'ok') {\n                            this.props.showGlobalMessage(false, true, 'Record deleted successfuly', 'custom-success');\n                            this.removeDataTableRow('subscriptionupgradeTable', rowIndex);\n                            let that = this;\n                            setTimeout(function () {\n                                that.props.hideGlobalMessage();\n                            }, 2000);\n                        }\n                        else{\n                            this.props.showGlobalMessage(true, true, respData.errorStatus.statusMsg, 'custom-danger');\n                            setTimeout(()=> {\n                                this.props.hideGlobalMessage();\n                            }, 2000);\n                        }\n                    });\n                }\n                else {\n                    this.props.showGlobalMessage(true, true, 'Please try after sometime', 'custom-danger');\n                    let that = this;\n                    setTimeout(function () {\n                        that.props.hideGlobalMessage();\n                    }, 2000);\n                }\n            })\n            .catch((err) => {\n                console.log(err);\n                this.props.showGlobalMessage(true, true, 'Please try after sometime', 'custom-danger');\n                setTimeout(()=> {\n                    this.props.hideGlobalMessage();\n                }, 2000);\n            });\n        }\n    }\n\n    /* istanbul ignore next */\n    changeView() {\n        this.setState({\n            viewTable: true\n        });\n        setTimeout( () => {\n            this.initTable('subscriptionupgradeTable', true);\n        }, 0);\n    } // jshint ignore:line\n    \n    \n    render(){\n        /* jshint ignore:start */\n        /* istanbul ignore next */\n        return (\n            <div>\n                {this.state.viewTable ?\n                    <div className=\"row Subscriptionupgrade\">\n                        <div className=\"col-md-12\">\n                            <div className=\"row mt-2\">\n                                <div className=\"col-sm-6 text-left\">\n                                    <div className=\"d-inline\">\n                                        <button type=\"button\" className=\"btn btn-sm btn-outline-secondary disabled\">\n                                            <i className=\"fa fa-filter\"></i>\n                                            FILTER\n                                </button>\n                                    </div>\n                                    <div className=\"d-inline p-2\">\n                                        <input\n                                            type=\"text\"\n                                            value={this.state.searchString}\n                                            className=\"d-inline form-control form-control-sm search-field\"\n                                            onChange={(event) => { this.filterData(event) }} />\n                                    </div>\n                                </div>\n                            </div>\n                            <div className=\"centered-div\">\n                                <div id=\"subscriptionupgradeTableDiv\">\n                                    { this.state.showTableInit ? \n                                        this.state.newTableData.length > 0 ?\n                                            <table id=\"subscriptionupgradeTable\" className=\"table text-center\">\n                                                <thead>\n                                                    <tr>\n                                                    <th>License ID</th>\n                                                    <th>Email Address</th>\n                                                    <th>Expiry Date</th>\n                                                    <th>SSO</th>\n                                                    <th>Actions</th>\n                                                    </tr>\n                                                </thead>\n                                                <tbody>\n                                                    {\n                                                    this.state.newTableData.map((tbodyVal, tbodyIndex) => {\n                                                            return (\n                                                                <tr id={'subscriptionupgradeTableTbodyTr_' + tbodyIndex} key={'subscriptionupgradeTableTbodyTr_' + tbodyIndex}>\n                                                                  \n                                                                    <td>{tbodyVal.licenseId}</td>\n                                                                    <td>{tbodyVal.emailAddress}</td>\n                                                                    <td>{tbodyVal.date}</td>\n                                                                    <td>{tbodyVal.sso}</td>\n                                                                    <td>\n                                                                        <span className=\"action-img\">\n                                                                            <i onClick={this.edit.bind(this, tbodyVal)} className=\"fa fa-eye cursor-pointer\" title=\"View\"></i>\n                                                                        </span>\n                                                                    </td>\n                                                                </tr>\n                                                            )\n                                                        })\n                                                    }\n                                                </tbody>\n                                            </table> :\n                                            <div className=\"row mt-2\">\n                                                <div className=\"col-md-12\">\n                                                    <div className=\"alert alert-success\" role=\"alert\">\n                                                        No record found!\n                                                    </div>\n                                                </div>\n                                            </div>\n                                        :\n                                        <p className=\"text-center loader-icon\">\n                                            <img alt=\"loading\" src={Rolling} />\n                                        </p>\n                                    }\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    :\n                    <Subscriptionedit\n                    authToken={this.props.authToken}\n                    helpText={this.props.helpText}\n                    handleDataTable={this.handleDataTable.bind(this)}\n                    baseUrl={this.props.baseUrl}\n                    userId={this.props.userId}\n                    showGlobalMessage={this.props.showGlobalMessage.bind(this)}\n                    hideGlobalMessage={this.props.hideGlobalMessage.bind(this)}\n                    changeView={this.changeView.bind(this)}\n                    editItemData={this.state.editItemData}\n                    isViewOnly={true}\n                    ></Subscriptionedit>\n                }\n            </div>\n        )\n        /* jshint ignore:end */\n    }\n}\n"],"names":["LicenseView","props","state","tableData","newTableData","viewTable","editItemData","searchString","showTableInit","this","handleDataTable","preserveState","technicalTableData","sessionStorage","getItem","respData","JSON","parse","allData","Object","keys","forEach","key","push","individualData","parent","console","log","generateTableStructure","setState","showGlobalMessage","setTimeout","hideGlobalMessage","tableId","tableWidth","$","offsetWidth","DataTable","dom","bSort","scrollX","language","paginate","previous","next","createdRow","row","data","dataIndex","i","length","css","pageLength","stateSave","destroy","fnDrawCallback","oSettings","aiDisplay","hide","show","addClass","dataObj","newDataObj","licenseId","emailAddress","date","sso","username","desc","initTable","objectIndex","fieldName","copiedObjectToChange","assign","tempValue","subscriptionId","subscriptionIdHidden","subscriptionIdHiddenFlag","serviceUri","serviceUriHidden","serviceUriHiddenFlag","subscriptionName","subscriptionNameHidden","subscriptionNameHiddenFlag","uaaUrl","uaaUrlHidden","uaaUrlHiddenFlag","myArray","string","retArr","toLowerCase","includes","e","destroyDataTable","searchStr","target","value","trim","searchStrWithSp","wholeData","filteredData","filterByValue","item","editItem","rowIndex","remove","draw","tbodyVal","window","confirm","subscripnId","fetch","baseUrl","method","headers","authToken","then","response","status","json","errorStatus","removeDataTableRow","that","statusMsg","catch","err","className","type","onChange","event","filterData","id","map","tbodyIndex","onClick","edit","bind","title","role","alt","src","Rolling","helpText","userId","changeView","isViewOnly","React"],"sourceRoot":""}