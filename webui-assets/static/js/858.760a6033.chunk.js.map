{"version":3,"file":"static/js/858.760a6033.chunk.js","mappings":"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","sources":["assets/images/icon_arrowmore.svg","Treelist/Treelist.js","Topologygraph/Topologygraph.js","Viewtable/Viewtable.js","assets/images/x_button.svg","assets/images/leftarrowbutton.svg","assets/images/rightarrowbutton.svg","View/Customsearch.js","assets/images/refresh.svg","View/Technicalview.js","View/Businessview.js","View/View.js"],"sourcesContent":["var _desc, _defs, _g;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgIconArrowmore(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: \"6px\",\n    height: \"10px\",\n    viewBox: \"0 0 6 10\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title === undefined ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, \"ic_arrow_right_24px\") : title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _desc || (_desc = /*#__PURE__*/React.createElement(\"desc\", null, \"Created with Sketch.\")), _defs || (_defs = /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"polygon\", {\n    id: \"path-1\",\n    points: \"0 10 5.1048951 5 0 0\"\n  }))), _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    id: \"Welcome\",\n    stroke: \"none\",\n    strokeWidth: 1,\n    fill: \"none\",\n    fillRule: \"evenodd\"\n  }, /*#__PURE__*/React.createElement(\"g\", {\n    id: \"Dashboard-Ops\",\n    transform: \"translate(-182.000000, -264.000000)\"\n  }, /*#__PURE__*/React.createElement(\"g\", {\n    id: \"Group-45\",\n    transform: \"translate(64.000000, 172.000000)\"\n  }, /*#__PURE__*/React.createElement(\"g\", {\n    id: \"Group-4\",\n    transform: \"translate(23.000000, 56.000000)\"\n  }, /*#__PURE__*/React.createElement(\"g\", {\n    id: \"ic_arrow_right_24px\",\n    transform: \"translate(95.000000, 36.000000)\"\n  }, /*#__PURE__*/React.createElement(\"mask\", {\n    id: \"mask-2\",\n    fill: \"white\"\n  }, /*#__PURE__*/React.createElement(\"use\", {\n    xlinkHref: \"#path-1\"\n  })), /*#__PURE__*/React.createElement(\"g\", {\n    id: \"Path\",\n    fillRule: \"nonzero\"\n  }), /*#__PURE__*/React.createElement(\"g\", {\n    id: \"\\\\uD83C\\\\uDFA8-Color\",\n    mask: \"url(#mask-2)\",\n    fill: \"#3B73B9\"\n  }, /*#__PURE__*/React.createElement(\"g\", {\n    transform: \"translate(-10.000000, -7.000000)\",\n    id: \"Shape\"\n  }, /*#__PURE__*/React.createElement(\"rect\", {\n    x: 0,\n    y: 0,\n    width: 25,\n    height: 24\n  }))))))))));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgIconArrowmore);\nexport default __webpack_public_path__ + \"static/media/icon_arrowmore.7bff65e9afad56dab17d2d39fe214905.svg\";\nexport { ForwardRef as ReactComponent };","import React from \"react\";\n\nexport default class Treelist extends React.Component {\n  /* constructor(props) {\n    super(props);\n  } */\n\n  /* istanbul ignore next */\n  componentDidMount() {\n    let that = this;\n\n    setTimeout(function () {\n      //window.loadTree('treeList');\n      if (that.props.treeValue.length > 0) {\n        let topParentId = that.props.treeValue[0].id;\n        let el = document.getElementById(\"parentTreeNodeAnchor\" + topParentId);\n        if (el !== null) {\n          el.click();\n        }\n      }\n    }, 2);\n  }\n\n  /* istanbul ignore next */\n  componentDidUpdate() {\n    //console.log(this.props.treeValue);\n  }\n\n  /* istanbul ignore next */\n  handleGenerateTreeList(items, key) {\n    if (items.children) {\n      /* jshint ignore:start */\n      return (\n        <li key={items.id}>\n          <a\n            id={\"parentTreeNodeAnchor\" + items.id}\n            onClick={this.props.changeTopology.bind(this, items)}\n            title={items.title}\n            data-toggle=\"collapse\" aria-expanded=\"false\"\n            href={\"#childTreeNodeAnchor\" + items.id}\n          >\n            &nbsp;\n            {items.value}\n          </a>\n          <ul id={\"childTreeNodeAnchor\" + items.id} className=\"collapse\">\n            {items.children.map((item, key) => {\n              return this.handleGenerateTreeList(item, key);\n            })}\n          </ul>\n        </li>\n      );\n      /* jshint ignore:end */\n    } else {\n      /* jshint ignore:start */\n      return (\n        <li title={items.title} key={items.id}>\n          {items.value}\n        </li>\n      );\n      /* jshint ignore:end */\n    }\n  }\n\n  render() {\n    /* jshint ignore:start */\n    /* istanbul ignore next */\n    return (\n        <ul id=\"treeList\">\n          {this.props.treeValue.length > 0 ? (\n            this.props.treeValue.map((item, key) => {\n              return this.handleGenerateTreeList(item, key);\n            })\n          ) : (\n            <li>No record</li>\n          )}\n        </ul>\n    );\n    /* jshint ignore:end */\n  }\n}\n","import React from \"react\";\n//import { vis } from \"vis-network\";\n//import { DataSet, Network } from 'vis-network/standalone/esm/vis-network';\nimport { Network } from \"vis-network/standalone/umd/vis-network.min.js\";\n\nexport default class Topologygraph extends React.Component {\n  /* constructor(props) {\n    super(props);\n  } */\n\n  /* istanbul ignore next */\n  componentDidMount() {\n    this.generateTopology(this.props.nodeData);\n  }\n\n  /* istanbul ignore next */\n  componentDidUpdate() {\n    this.generateTopology(this.props.nodeData);\n  }\n\n  /* istanbul ignore next */\n  generateTopology(nodeData) {\n    var width = 400;\n    var height = 280;\n    var options = {\n      height: \"280px\",\n    };\n    var network = new Network(this.refs.myRef, nodeData, options);\n    network.moveTo({\n      position: { x: 0, y: 0 },\n      offset: { x: -width / 2, y: -height / 2 },\n      scale: 1,\n    });\n  }\n  render() {\n    /* jshint ignore:start */\n    /* istanbul ignore next */\n    return (\n      <div  className=\"Topologygraph\" id=\"topologygraph\" >\n        <div ref=\"myRef\"></div>\n      </div>\n    );\n    /* jshint ignore:end */\n  }\n}\n","import React from \"react\";\nimport Healthstatus from \"../Monitor/Healthstatus.js\";\n\n\nimport IconArrowMore from '../assets/images/icon_arrowmore.svg';\n\nexport default class Viewtable extends React.Component {\n    /* istanbul ignore next */\n    componentDidMount(){\n        //window.initTable('viewTable');\n    }\n\n    /* istanbul ignore next */\n    componentDidUpdate(){\n        //window.initTable('viewTable');\n    }\n\n    render(){\n        /* jshint ignore:start */\n        /* istanbul ignore next */\n        return(/* istanbul ignore next */\n          /*  <table id=\"viewTable\" className=\"table\">\n                <thead>\n                    <tr>\n                        {this.props.tableData.thead.map((val, index) => {\n                            return(<th key={'viewTableThead_'+index}>{ val.fieldName }</th>)\n                        })}\n                    </tr>\n                </thead>\n                <tbody>\n                    {this.props.tableData.tbody.map((tbodyVal, tbodyIndex) => {\n                        return(\n                            <tr key={'viewTableTbodyTr_'+tbodyIndex}>\n                                {this.props.tableData.thead.map((val, tdIndex) => {\n                                    return(\n                                        <td key={'viewTableTbodyTd_'+tdIndex}>\n                                            { tbodyVal[tdIndex].value } &nbsp;&nbsp;\n                                            {\n                                                tbodyVal[tdIndex].hiddenValue && tbodyVal[tdIndex].hiddenValue  !==  '' && tbodyVal[tdIndex].hiddenState ?\n                                                    <img onClick={this.props.showHideTableTdData.bind(this, tbodyIndex, tdIndex)} className=\"icon-arrowmore\" alt=\"td-detail\" src=\"assets/static/images/icon_arrowmore.svg\" />:\n                                                    null\n                                            }\n                                        </td>\n                                    )\n                                })}\n                            </tr>\n                        )\n                    })}\n                </tbody>\n            </table>*/\n        <table className=\"table \">\n          <thead>\n            <tr>\n              {this.props.tableData.thead.map((val, index) => {\n                return <th key={\"viewTableThead_\" + index}>{val.fieldName}</th>;\n              })}\n            </tr>\n          </thead>\n          <tbody>\n            {this.props.tableData.tbody.map((tbodyVal, tbodyIndex) => {\n              return (\n                <React.Fragment key={\"viewTableTbodyTr_\" + tbodyIndex}>\n                  <tr\n                    data-toggle=\"collapse\"\n                    data-target={\"#collapseme\" + tbodyIndex}\n                    role=\"row\"\n                    className=\"parent-row\"\n                  >\n                    {this.props.tableData.thead.map((val, tdIndex) => {\n                      return (\n                        <td key={\"viewTableTbodyTd_\" + tdIndex}>\n                          {}\n                          {tbodyVal[tdIndex].value} &nbsp;&nbsp;\n                          {tbodyVal[tdIndex].hiddenValue &&\n                          tbodyVal[tdIndex].hiddenValue  !==  \"\" &&\n                          tbodyVal[tdIndex].hiddenState ? (\n                            <img\n                              onClick={this.props.showHideTableTdData.bind(\n                                this,\n                                tbodyIndex,\n                                tdIndex\n                              )}\n                              className=\"icon-arrowmore\"\n                              alt=\"td-detail\"\n                              src={IconArrowMore}\n                            />\n                          ) : null}\n                        </td>\n                      );\n                    })}\n                  </tr>\n                  <tr id={\"collapseme\" + tbodyIndex} className=\"collapse out\">\n                    <td colSpan=\"8\">\n                      <div>\n                        <Healthstatus\n                          userId={this.props.userId}\n                          showGlobalMessage={this.props.showGlobalMessage.bind(\n                            this\n                          )}\n                          hideGlobalMessage={this.props.hideGlobalMessage.bind(\n                            this\n                          )}\n                          tableindx={tbodyIndex}\n                          permissions={this.props.permissions}\n                        />\n                      </div>\n                    </td>\n                  </tr>\n                </React.Fragment>\n              );\n            })}\n          </tbody>\n        </table>\n        )\n        /* jshint ignore:end */\n    }\n}\n","var _desc, _g;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgXButton(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: \"24px\",\n    height: \"23px\",\n    viewBox: \"0 0 24 23\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title === undefined ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, \"Group 11\") : title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _desc || (_desc = /*#__PURE__*/React.createElement(\"desc\", null, \"Created with Sketch.\")), _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    id: \"Welcome\",\n    stroke: \"none\",\n    strokeWidth: 1,\n    fill: \"none\",\n    fillRule: \"evenodd\"\n  }, /*#__PURE__*/React.createElement(\"g\", {\n    id: \"View\",\n    transform: \"translate(-621.000000, -283.000000)\"\n  }, /*#__PURE__*/React.createElement(\"g\", {\n    id: \"Group-23\",\n    transform: \"translate(621.000000, 283.000000)\"\n  }, /*#__PURE__*/React.createElement(\"g\", {\n    id: \"Group-11\"\n  }, /*#__PURE__*/React.createElement(\"rect\", {\n    id: \"Rectangle\",\n    fill: \"#3B73B9\",\n    x: 0,\n    y: 0,\n    width: 24,\n    height: 23,\n    rx: 2\n  }), /*#__PURE__*/React.createElement(\"text\", {\n    id: \"X\",\n    fontFamily: \"Roboto-Medium, Roboto\",\n    fontSize: 14,\n    fontWeight: 400,\n    letterSpacing: 1.25,\n    fill: \"#FFFFFF\"\n  }, /*#__PURE__*/React.createElement(\"tspan\", {\n    x: 8,\n    y: 17\n  }, \"X\"))))))));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgXButton);\nexport default __webpack_public_path__ + \"static/media/x_button.2d5eb181729789db16b3ec5cb06b3e4f.svg\";\nexport { ForwardRef as ReactComponent };","var _desc, _g;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgLeftarrowbutton(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: \"38px\",\n    height: \"29px\",\n    viewBox: \"0 0 38 29\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title === undefined ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, \"Group 18\") : title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _desc || (_desc = /*#__PURE__*/React.createElement(\"desc\", null, \"Created with Sketch.\")), _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    id: \"Welcome\",\n    stroke: \"none\",\n    strokeWidth: 1,\n    fill: \"none\",\n    fillRule: \"evenodd\"\n  }, /*#__PURE__*/React.createElement(\"g\", {\n    id: \"View\",\n    transform: \"translate(-1007.000000, -362.000000)\"\n  }, /*#__PURE__*/React.createElement(\"g\", {\n    id: \"Group-19\",\n    transform: \"translate(1026.000000, 401.000000) rotate(-90.000000) translate(-1026.000000, -401.000000) translate(986.500000, 381.500000)\"\n  }, /*#__PURE__*/React.createElement(\"g\", {\n    id: \"Group-18\",\n    transform: \"translate(49.000000, 0.000000)\"\n  }, /*#__PURE__*/React.createElement(\"g\", {\n    id: \"Group-17\",\n    transform: \"translate(0.000000, 0.000000)\"\n  }, /*#__PURE__*/React.createElement(\"g\", {\n    id: \"import-export-copy-5\",\n    transform: \"translate(1.000000, 0.538462)\",\n    fill: \"#3B73B9\"\n  }, /*#__PURE__*/React.createElement(\"g\", {\n    id: \"Buttons-/-Contained-/-Enabled-Copy-5\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M2.4,0 L25.8,0 C27.1254834,-2.15392964e-15 28.2,1.0745166 28.2,2.4 L28.2,34.8335664 C28.2,36.1590498 27.1254834,37.2335664 25.8,37.2335664 L2.4,37.2335664 C1.0745166,37.2335664 6.0641411e-16,36.1590498 0,34.8335664 L0,2.4 C-1.623249e-16,1.0745166 1.0745166,-1.08878028e-15 2.4,0 Z\",\n    id: \"Surface\"\n  }))), /*#__PURE__*/React.createElement(\"g\", {\n    id: \"ic_arrow_drop_down-copy-4\",\n    transform: \"translate(14.500000, 19.500000) rotate(-180.000000) translate(-14.500000, -19.500000) translate(-0.000000, 0.000000)\"\n  }, /*#__PURE__*/React.createElement(\"polygon\", {\n    id: \"Bounds\",\n    points: \"0 1.13686838e-13 28.2 1.13686838e-13 28.2 39 0 39\"\n  }), /*#__PURE__*/React.createElement(\"polygon\", {\n    id: \"Icon\",\n    fill: \"#FFFFFF\",\n    points: \"8.4 17.4 14.1 23.4 19.8 17.4\"\n  })))))))));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgLeftarrowbutton);\nexport default __webpack_public_path__ + \"static/media/leftarrowbutton.d0d0d8f1dc0af404995b76ff2dd6acf4.svg\";\nexport { ForwardRef as ReactComponent };","var _desc, _g;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgRightarrowbutton(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: \"38px\",\n    height: \"29px\",\n    viewBox: \"0 0 38 29\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title === undefined ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, \"Group 18 Copy\") : title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _desc || (_desc = /*#__PURE__*/React.createElement(\"desc\", null, \"Created with Sketch.\")), _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    id: \"Welcome\",\n    stroke: \"none\",\n    strokeWidth: 1,\n    fill: \"none\",\n    fillRule: \"evenodd\"\n  }, /*#__PURE__*/React.createElement(\"g\", {\n    id: \"View\",\n    transform: \"translate(-1007.000000, -411.000000)\"\n  }, /*#__PURE__*/React.createElement(\"g\", {\n    id: \"Group-19\",\n    transform: \"translate(1026.000000, 401.000000) rotate(-90.000000) translate(-1026.000000, -401.000000) translate(986.500000, 381.500000)\"\n  }, /*#__PURE__*/React.createElement(\"g\", {\n    id: \"Group-18-Copy\",\n    transform: \"translate(15.000000, 19.500000) rotate(-180.000000) translate(-15.000000, -19.500000) translate(-0.000000, 0.000000)\"\n  }, /*#__PURE__*/React.createElement(\"g\", {\n    id: \"Group-17\",\n    transform: \"translate(0.000000, 0.000000)\"\n  }, /*#__PURE__*/React.createElement(\"g\", {\n    id: \"import-export-copy-5\",\n    transform: \"translate(1.000000, 0.538462)\",\n    fill: \"#3B73B9\"\n  }, /*#__PURE__*/React.createElement(\"g\", {\n    id: \"Buttons-/-Contained-/-Enabled-Copy-5\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M2.4,0 L25.8,0 C27.1254834,-2.15392964e-15 28.2,1.0745166 28.2,2.4 L28.2,34.8335664 C28.2,36.1590498 27.1254834,37.2335664 25.8,37.2335664 L2.4,37.2335664 C1.0745166,37.2335664 6.0641411e-16,36.1590498 0,34.8335664 L0,2.4 C-1.623249e-16,1.0745166 1.0745166,-1.08878028e-15 2.4,0 Z\",\n    id: \"Surface\"\n  }))), /*#__PURE__*/React.createElement(\"g\", {\n    id: \"ic_arrow_drop_down-copy-4\",\n    transform: \"translate(14.500000, 19.500000) rotate(-180.000000) translate(-14.500000, -19.500000) translate(-0.000000, 0.000000)\"\n  }, /*#__PURE__*/React.createElement(\"polygon\", {\n    id: \"Bounds\",\n    points: \"0 1.13686838e-13 28.2 1.13686838e-13 28.2 39 0 39\"\n  }), /*#__PURE__*/React.createElement(\"polygon\", {\n    id: \"Icon\",\n    fill: \"#FFFFFF\",\n    points: \"8.4 17.4 14.1 23.4 19.8 17.4\"\n  })))))))));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgRightarrowbutton);\nexport default __webpack_public_path__ + \"static/media/rightarrowbutton.189462e6390af47a1fc7d0685fd815c0.svg\";\nexport { ForwardRef as ReactComponent };","import React from \"react\";\n\nimport IconXButton from '../assets/images/x_button.svg';\nimport IconLeftArrowButton from '../assets/images/leftarrowbutton.svg';\nimport IconRightArrowButton from '../assets/images/rightarrowbutton.svg';\n\nexport default class Customsearch extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      allStateFields: [],\n      availableFields: [],\n      filteredAvailableFields: [],\n      selectedFields: [],\n      filteredSelectedFields: [],\n      clickedFilteredAvailableFieldIndex: \"\",\n      clickedFilteredSelectedFieldIndex: \"\",\n      whereCondition: [],\n      whereOperator: [],\n      formDatas: [],\n      finalFormDatas: [],\n      isFormValid: true,\n      isDisableCreateViewButton: false,\n    };\n  }\n\n  /* istanbul ignore next */\n  componentDidMount() {\n    let allStateFields = [...this.props.allFields];\n    let selectedFields = [...this.props.selectedFields];\n\n    let whereCondition = [\n      { condition: \"AND\", label: \"AND\" },\n      { condition: \"OR\", label: \"OR\" },\n    ];\n    let whereOperator = [\n      { operator: \"=\", label: \"=\" },\n      { operator: \">\", label: \">\" },\n      { operator: \"<\", label: \"<\" },\n      { operator: \"!=\", label: \"!=\" },\n    ];\n    let formDatas = [\n      {\n        whereCondition: whereCondition[0].condition,\n        whereField: allStateFields[0].fieldId,\n        whereOperator: whereOperator[0].operator,\n        whereValue: \"\",\n        whereValueError: \"\",\n      },\n    ];\n\n    let slicedAvailableFields = allStateFields;\n    for (let selectedField of selectedFields) {\n      slicedAvailableFields = slicedAvailableFields.filter(function (obj) {\n        // jshint ignore:line\n        return obj.fieldId !== selectedField.fieldId;\n      });\n    }\n\n    this.setState({\n      allStateFields: allStateFields,\n      availableFields: slicedAvailableFields,\n      filteredAvailableFields: slicedAvailableFields,\n      selectedFields: selectedFields,\n      filteredSelectedFields: selectedFields,\n      whereCondition: whereCondition,\n      whereOperator: whereOperator,\n      formDatas: formDatas,\n    });\n  }\n\n  /* istanbul ignore next */\n  handleAvailableFieldSelect(index) {\n    this.setState({\n      clickedFilteredAvailableFieldIndex: index,\n      clickedFilteredSelectedFieldIndex: \"\",\n    });\n  }\n\n  /* istanbul ignore next */\n  handleSelectedFieldSelect(index) {\n    this.setState({\n      clickedFilteredSelectedFieldIndex: index,\n      clickedFilteredAvailableFieldIndex: \"\",\n    });\n  }\n\n  /* istanbul ignore next */\n  filterBy(propName, term) {\n    const termLowerCase = term.toLowerCase();\n    return (singleObj) =>\n      Object.keys(singleObj).some(\n        (propName) =>\n          singleObj[propName].toLowerCase().indexOf(termLowerCase) !== -1\n      );\n  }\n\n  /* istanbul ignore next */\n  removeObject(myArray, key, value) {\n    for (var i = 0; i < myArray.length; i++) {\n      if (myArray[i][key] === value) myArray.splice(i, 1);\n    }\n    return myArray;\n  }\n\n  /* istanbul ignore next */\n  availableFieldsSerach(e) {\n    let searchStr = e.target.value.trim();\n    let filteredCurrentAvailableFields = [];\n    if (searchStr !== \"\") {\n      let currentAvailableFields = [...this.state.availableFields];\n      filteredCurrentAvailableFields = currentAvailableFields.filter(\n        this.filterBy(\"fieldName\", searchStr)\n      );\n    } else {\n      filteredCurrentAvailableFields = [...this.state.availableFields];\n    }\n    this.setState({\n      filteredAvailableFields: filteredCurrentAvailableFields,\n      clickedFilteredAvailableFieldIndex: \"\",\n    });\n  }\n\n  /* istanbul ignore next */\n  handleMoveInSelected() {\n    let clickedFilteredAvailableFieldIndex =\n      this.state.clickedFilteredAvailableFieldIndex;\n    if (clickedFilteredAvailableFieldIndex !== \"\") {\n      let currentAvailableFields = [...this.state.availableFields];\n      let filteredAvailableFields = [...this.state.filteredAvailableFields];\n      let selectedFields = [...this.state.selectedFields];\n      let filteredSelectedFields = [...this.state.filteredSelectedFields];\n      let objToMove =\n        filteredAvailableFields[clickedFilteredAvailableFieldIndex];\n      let isDisableCreateViewButton = false;\n      filteredAvailableFields.splice(clickedFilteredAvailableFieldIndex, 1);\n      currentAvailableFields = this.removeObject(\n        currentAvailableFields,\n        \"fieldId\",\n        objToMove.fieldId\n      );\n      selectedFields.push(objToMove);\n      filteredSelectedFields.push(objToMove);\n      if (selectedFields.length === 0) {\n        isDisableCreateViewButton = true;\n      }\n      this.setState({\n        availableFields: currentAvailableFields,\n        filteredAvailableFields: filteredAvailableFields,\n        selectedFields: selectedFields,\n        filteredSelectedFields: filteredSelectedFields,\n        clickedFilteredAvailableFieldIndex: \"\",\n        isDisableCreateViewButton: isDisableCreateViewButton,\n      });\n    }\n  }\n\n  /* istanbul ignore next */\n  selectedFieldsSerach(e) {\n    let searchStr = e.target.value.trim();\n    let filteredCurrentSelectedFields = [];\n    if (searchStr !== \"\") {\n      let currentselectedFields = [...this.state.selectedFields];\n      filteredCurrentSelectedFields = currentselectedFields.filter(\n        this.filterBy(\"fieldName\", searchStr)\n      );\n    } else {\n      filteredCurrentSelectedFields = [...this.state.selectedFields];\n    }\n    this.setState({\n      filteredSelectedFields: filteredCurrentSelectedFields,\n      clickedFilteredSelectedFieldIndex: \"\",\n    });\n  }\n\n  /* istanbul ignore next */\n  handleMoveInAvailable() {\n    let clickedFilteredSelectedFieldIndex =\n      this.state.clickedFilteredSelectedFieldIndex;\n    if (clickedFilteredSelectedFieldIndex !== \"\") {\n      let currentSelectedFields = [...this.state.selectedFields];\n      let filteredSelectedFields = [...this.state.filteredSelectedFields];\n      let availableFields = [...this.state.availableFields];\n      let filteredAvailableFields = [...this.state.filteredAvailableFields];\n      let objToMove = filteredSelectedFields[clickedFilteredSelectedFieldIndex];\n      let isDisableCreateViewButton = false;\n      filteredSelectedFields.splice(clickedFilteredSelectedFieldIndex, 1);\n      currentSelectedFields = this.removeObject(\n        currentSelectedFields,\n        \"fieldId\",\n        objToMove.fieldId\n      );\n      availableFields.push(objToMove);\n      filteredAvailableFields.push(objToMove);\n      if (currentSelectedFields.length === 0) {\n        isDisableCreateViewButton = true;\n      }\n      this.setState({\n        selectedFields: currentSelectedFields,\n        filteredSelectedFields: filteredSelectedFields,\n        availableFields: availableFields,\n        filteredAvailableFields: filteredAvailableFields,\n        clickedFilteredSelectedFieldIndex: \"\",\n        isDisableCreateViewButton: isDisableCreateViewButton,\n      });\n    }\n  }\n\n  /* istanbul ignore next */\n  addNewFilter() {\n    let currentFormRows = [...this.state.formDatas];\n    let formNewObject = {\n      whereCondition: this.state.whereCondition[0].condition,\n      whereField: this.state.allStateFields[0].fieldId,\n      whereOperator: this.state.whereOperator[0].operator,\n      whereValue: \"\",\n      whereValueError: \"\",\n    };\n    currentFormRows.push(formNewObject);\n\n    this.setState({\n      formDatas: currentFormRows,\n    });\n    setTimeout(() => {\n      this.formValidation(\"inline\");\n    }, 500);\n  }\n\n  /* istanbul ignore next */\n  removeFormRow(formRowIndex) {\n    let currentFormRows = [...this.state.formDatas];\n    currentFormRows.splice(formRowIndex, 1);\n\n    this.setState({\n      formDatas: currentFormRows,\n    });\n    setTimeout(() => {\n      this.formValidation(\"inline\");\n    }, 500);\n  }\n\n  /* istanbul ignore next */\n  formValidation(type) {\n    let isFormValid = true;\n    let currentFormRows = [...this.state.formDatas];\n\n    for (let currentFormRowIndex in currentFormRows) {\n      let whereValue = currentFormRows[currentFormRowIndex].whereValue.trim();\n      if (whereValue === \"\") {\n        if (type !== \"inline\")\n          currentFormRows[currentFormRowIndex].whereValueError =\n            \"Please enter value\";\n        isFormValid = false;\n      }\n    }\n\n    if (currentFormRows.length === 0) {\n      isFormValid = false;\n    }\n\n    this.setState({\n      formDatas: currentFormRows,\n      isFormValid: isFormValid,\n    });\n  }\n\n  /* istanbul ignore next */\n  changeFormValue(e, formRowIndex) {\n    let fieldName = e.target.name;\n    let updatedFieldValue = e.target.value;\n    let currentFormRows = [...this.state.formDatas];\n    if (fieldName === \"whereValue\") {\n      currentFormRows[formRowIndex].whereValue = updatedFieldValue;\n      updatedFieldValue = updatedFieldValue.trim();\n      if (updatedFieldValue === \"\") {\n        currentFormRows[formRowIndex].whereValueError = \"Please enter value\";\n      } else {\n        currentFormRows[formRowIndex].whereValueError = \"\";\n      }\n    } else if (fieldName === \"whereCondition\") {\n      currentFormRows[formRowIndex].whereCondition = updatedFieldValue;\n    } else if (fieldName === \"whereField\") {\n      currentFormRows[formRowIndex].whereField = updatedFieldValue;\n    } else if (fieldName === \"whereOperator\") {\n      currentFormRows[formRowIndex].whereOperator = updatedFieldValue;\n    }\n\n    this.setState({\n      formDatas: currentFormRows,\n    });\n    this.formValidation(\"inline\");\n  }\n\n  /* istanbul ignore next */\n  applyFilter() {\n    this.setState({\n      finalFormDatas: [...this.state.formDatas],\n    });\n    this.props.showGlobalMessage(\n      false,\n      true,\n      \"Filter applied successfully\",\n      \"custom-success\"\n    );\n    let that = this;\n    setTimeout(function () {\n      that.props.hideGlobalMessage();\n      that.props.createView(\n        that.state.selectedFields,\n        that.state.finalFormDatas\n      );\n    }, 2000);\n  }\n\n  /* istanbul ignore next */\n  resetFilter() {\n    let formDatas = [\n      {\n        whereCondition: this.state.whereCondition[0].condition,\n        whereField: this.state.allStateFields[0].fieldId,\n        whereOperator: this.state.whereOperator[0].operator,\n        whereValue: \"\",\n        whereValueError: \"\",\n      },\n    ];\n\n    this.setState({\n      formDatas: formDatas,\n      finalFormDatas: [],\n      isFormValid: true,\n    });\n  }\n\n  render() {\n    /* jshint ignore:start */\n    /* istanbul ignore next */\n    return (\n      <div className=\"Customsearch\">\n        <div className=\"row\">\n          <div className=\"col-sm-6 vdivide\">\n            <div className=\"centered-div-header\">\n              <div className=\"row view-header\">\n                <div className=\"col-sm-8\">\n                  <h6>\n                    Search Criteria <small>Search parameters</small>\n                  </h6>\n                </div>\n                <div className=\"col-sm-4\">&nbsp;</div>\n              </div>\n            </div>\n            <hr></hr>\n            <div className=\"search-form\">\n              {this.state.formDatas.map((formData, formRowIndex) => {\n                return (\n                  <div key={\"form-row\" + formRowIndex}>\n                    {formRowIndex !== 0 ? (\n                      <div className=\"row mb-2\">\n                        <div className=\"col-sm-3\">\n                          <select\n                            onChange={(event) => {\n                              this.changeFormValue(event, formRowIndex);\n                            }}\n                            className=\"form-control\"\n                            id={\"whereCondition\" + formRowIndex}\n                            name=\"whereCondition\"\n                            value={formData.whereCondition}\n                          >\n                            {this.state.whereCondition.map(\n                              (whereConditionObjet, index) => {\n                                return (\n                                  <option\n                                    key={\n                                      \"whereConditionOption\" +\n                                      formRowIndex +\n                                      index\n                                    }\n                                    value={whereConditionObjet.condition}\n                                  >\n                                    {whereConditionObjet.label}\n                                  </option>\n                                );\n                              }\n                            )}\n                          </select>\n                        </div>\n                      </div>\n                    ) : null}\n\n                    <div className=\"row mb-2\">\n                      <div className=\"col-sm-4\">\n                        <select\n                          onChange={(event) => {\n                            this.changeFormValue(event, formRowIndex);\n                          }}\n                          value={formData.whereField}\n                          className=\"form-control\"\n                          id={\"whereField\" + formRowIndex}\n                          name=\"whereField\"\n                        >\n                          {this.state.allStateFields.map((field, index) => {\n                            return (\n                              <option\n                                key={\"whereFieldOption\" + formRowIndex + index}\n                                value={field.fieldId}\n                              >\n                                {field.fieldName}\n                              </option>\n                            );\n                          })}\n                        </select>\n                      </div>\n                      <div className=\"col-sm-3\">\n                        <select\n                          onChange={(event) => {\n                            this.changeFormValue(event, formRowIndex);\n                          }}\n                          value={formData.whereOperator}\n                          className=\"form-control\"\n                          id={\"whereOperator\" + formRowIndex}\n                          name=\"whereOperator\"\n                        >\n                          {this.state.whereOperator.map(\n                            (whereOperatorObjet, index) => {\n                              return (\n                                <option\n                                  key={\n                                    \"whereOperatorOption\" + formRowIndex + index\n                                  }\n                                  value={whereOperatorObjet.operator}\n                                >\n                                  {whereOperatorObjet.label}\n                                </option>\n                              );\n                            }\n                          )}\n                        </select>\n                      </div>\n                      <div className=\"col-sm-4\">\n                        <input\n                          onChange={(event) => {\n                            this.changeFormValue(event, formRowIndex);\n                          }}\n                          value={formData.whereValue}\n                          type=\"text\"\n                          className=\"form-control\"\n                          name=\"whereValue\"\n                          autoComplete=\"off\"\n                        />\n                        <small className=\"text-danger\">\n                          {formData.whereValueError !== \"\"\n                            ? formData.whereValueError\n                            : \"\"}\n                        </small>\n                      </div>\n                      <div className=\"col-sm-1\">\n                        <img\n                          onClick={this.removeFormRow.bind(this, formRowIndex)}\n                          className=\"remove-row\"\n                          alt=\"remove-row\"\n                          src={IconXButton}\n                        />\n                      </div>\n                    </div>\n                  </div>\n                );\n              })}\n              <div className=\"row\">\n                <div className=\"col-md-12\">\n                  <button\n                    onClick={this.addNewFilter.bind(this)}\n                    className=\"btn btn-sm float-left customize-view-btn\"\n                  >\n                    ADD FILTER\n                  </button>\n                </div>\n              </div>\n              <div className=\"row\">\n                <div className=\"col-md-12\">\n                  <span className=\"float-right\">\n                    {/*<button disabled={!this.state.isFormValid} onClick={this.applyFilter.bind(this)} className=\"btn btn-sm customize-view-btn\">APPLY</button> */}\n                    <button\n                      onClick={this.resetFilter.bind(this)}\n                      className=\"btn btn-sm customize-reset-btn ml-2\"\n                    >\n                      RESET\n                    </button>\n                  </span>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"col-sm-6 view-selection-panel\">\n            <div className=\"row\">\n              <div className=\"col-sm-5\">\n                <h6>\n                  <small>AVAILABLE FIELDS</small>\n                </h6>\n                <div className=\"pre-scrollable\">\n                  <div className=\"list-group\">\n                    <input\n                      type=\"text\"\n                      onChange={(event) => {\n                        this.availableFieldsSerach(event);\n                      }}\n                      className=\"form-control\"\n                      placeholder=\"Search\"\n                    />\n                    {this.state.filteredAvailableFields.map(\n                      (availableFieldObj, availableFieldIndex) => {\n                        return (\n                          <a href=\"#\"\n                            onClick={this.handleAvailableFieldSelect.bind(\n                              this,\n                              availableFieldIndex\n                            )}\n                            key={\n                              \"availableFieldAnchorKey\" + availableFieldIndex\n                            }\n                            href=\"#\"\n                            className={\n                              this.state.clickedFilteredAvailableFieldIndex ===\n                              availableFieldIndex\n                                ? \"list-group-item list-group-item-action active\"\n                                : \"list-group-item list-group-item-action\"\n                            }\n                          >\n                            {availableFieldObj.fieldName}\n                          </a>\n                        );\n                      }\n                    )}\n                  </div>\n                </div>\n              </div>\n              <div className=\"col-sm-2 selection-button-div\">\n                <img\n                  onClick={this.handleMoveInAvailable.bind(this)}\n                  className=\"mx-auto d-block\"\n                  alt=\"view-field-selection\"\n                  src={IconLeftArrowButton}\n                />\n                <img\n                  onClick={this.handleMoveInSelected.bind(this)}\n                  className=\"mx-auto d-block\"\n                  alt=\"view-field-selection\"\n                  src={IconRightArrowButton}\n                />\n              </div>\n              <div className=\"col-sm-5\">\n                <h6>\n                  <small>SELECTED FIELDS</small>\n                </h6>\n                <div className=\"pre-scrollable\">\n                  <div className=\"list-group\">\n                    <input\n                      type=\"text\"\n                      onChange={(event) => {\n                        this.selectedFieldsSerach(event);\n                      }}\n                      className=\"form-control\"\n                      placeholder=\"Search\"\n                    />\n                    {this.state.selectedFields.length > 0 ? (\n                      this.state.filteredSelectedFields.map(\n                        (selectedFieldObj, selectedFieldIndex) => {\n                          return (\n                            <a  href=\"#\"\n                              onClick={this.handleSelectedFieldSelect.bind(\n                                this,\n                                selectedFieldIndex\n                              )}\n                              key={\n                                \"selectedFieldAnchorKey\" + selectedFieldIndex\n                              }\n                              href=\"#\"\n                              className={\n                                this.state.clickedFilteredSelectedFieldIndex ===\n                                selectedFieldIndex\n                                  ? \"list-group-item list-group-item-action active\"\n                                  : \"list-group-item list-group-item-action\"\n                              }\n                            >\n                              {selectedFieldObj.fieldName}\n                            </a>\n                          );\n                        }\n                      )\n                    ) : (\n                      <li className=\"list-group-item list-group-item-danger\">\n                        Please select fields\n                      </li>\n                    )}\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-md-12\">\n            <button\n              disabled={\n                !this.state.isFormValid || this.state.isDisableCreateViewButton\n                  ? true\n                  : false\n              }\n              onClick={this.applyFilter.bind(this)}\n              className=\"btn btn-sm customize-view-btn\"\n            >\n              CREATE VIEW\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n    /* jshint ignore:end */\n  }\n}\n","var _g;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgRefresh(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    id: \"Capa_1\",\n    enableBackground: \"new 0 0 515.556 515.556\",\n    height: \"512px\",\n    viewBox: \"0 0 515.556 515.556\",\n    width: \"512px\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    transform: \"matrix(0.959636 0 0 0.959636 10.405 10.405)\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m418.889 290c0 88.832-72.28 161.111-161.111 161.111s-161.111-72.279-161.111-161.111c0-77.798 55.445-142.882 128.889-157.855v61.188l96.667-96.667-96.667-96.666v67.017c-109.124 15.718-193.334 109.578-193.334 222.983 0 124.373 101.182 225.556 225.556 225.556s225.556-101.182 225.556-225.556z\",\n    \"data-original\": \"#000000\",\n    className: \"active-path\",\n    \"data-old_color\": \"#000000\",\n    fill: \"#007BFF\"\n  }))));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgRefresh);\nexport default __webpack_public_path__ + \"static/media/refresh.4a390c6a8519c68d698927fe20aec23f.svg\";\nexport { ForwardRef as ReactComponent };","import React from \"react\";\nimport $ from \"jquery\";\n\nimport Treelist from \"../Treelist/Treelist.js\";\nimport Topologygraph from \"../Topologygraph/Topologygraph.js\";\nimport Viewtable from \"../Viewtable/Viewtable.js\";\nimport Customsearch from \"./Customsearch.js\";\n\nimport IconRefresh from \"../assets/images/refresh.svg\";\n\nexport default class Technicalview extends React.Component {\n  /* istanbul ignore next */\n  constructor(props) {\n    super(props);\n    this.state = {\n      treeValue: [],\n      graph: {\n        nodes: [],\n        edges: [],\n      },\n      loadTreeJs: false,\n      centerNodeColor: \"#ff0000\",\n      nodeShapes: [\"ellipse\", \"circle\", \"box\"],\n      apiLoadPercentage: 0,\n      mockTableData: [],\n      table: {\n        thead: [],\n        tbody: [],\n      },\n      allFields: [],\n      isSearchView: false,\n    };\n  }\n\n  /* istanbul ignore next */\n  componentDidMount() {\n    //for now once api ready change it again\n    let treeValue = [\n      {\n        id: 1,\n        value: \"group-101\",\n        color: \"#57F518\",\n        /* x: 200,\n        y: 100, */\n        children: [\n          {\n            id: 2,\n            value: \"Gateway-104\",\n            color: \"#8FF4FF\",\n            children: [\n              {\n                id: 3,\n                value: \"Wabtec-gecars-qa client\",\n                color: \"#C98FFF\",\n                edgeLabel: \"Group 101\",\n              },\n              {\n                id: 4,\n                value: \" Wabtec-gecars-qa server\",\n                color: \"#C98FFF\",\n                edgeLabel: \"Group 101\",\n              },\n              {\n                id: 5,\n                value: \"wabtec-gecars-ta client\",\n                color: \"#45C7FF\",\n                edgeLabel: \"Group 101\",\n              },\n              {\n                id: 6,\n                value: \"wabtec-gecars-ta server\",\n                color: \"#45C7FF\",\n                edgeLabel: \"Group 101\",\n              },\n            ],\n          },\n          {\n            id: 7,\n            value: \"Gateway-101\",\n            color: \"#8FF4FF\",\n            children: [\n              {\n                id: 8,\n                value: \"wabtec-gecorp-qa client\",\n                color: \"#C98FFF\",\n                edgeLabel: \"Group 101\",\n              },\n              {\n                id: 9,\n                value: \"wabtec-gecorp-qa server\",\n                color: \"#C98FFF\",\n                edgeLabel: \"Group 101\",\n              },\n              {\n                id: 10,\n                value: \"wabtec-gecorp-dev client\",\n                color: \"#45C7FF\",\n                edgeLabel: \"Group 101\",\n              },\n              {\n                id: 11,\n                value: \"wabtec-gecorp-dev server\",\n                color: \"#45C7FF\",\n                edgeLabel: \"Group 101\",\n              },\n            ],\n          },\n        ],\n      },\n      {\n        id: 12,\n        value: \"group-102\",\n        x: 200,\n        y: 100,\n        children: [\n          {\n            id: 13,\n            value: \"Gateway-102\",\n            children: [\n              {\n                id: 14,\n                value: \"Client-01\",\n                color: \"#C98FFF\",\n                edgeLabel: \"Group 102\",\n              },\n              {\n                id: 15,\n                value: \"Server-01\",\n                color: \"#C98FFF\",\n                edgeLabel: \"Group 102\",\n              },\n              {\n                id: 16,\n                value: \"Client-02\",\n                color: \"#45C7FF\",\n                edgeLabel: \"Group 102\",\n              },\n              {\n                id: 17,\n                value: \"Server-02\",\n                color: \"#45C7FF\",\n                edgeLabel: \"Group 102\",\n              },\n            ],\n          },\n          {\n            id: 21,\n            value: \"Gateway-103\",\n            children: [\n              {\n                id: 22,\n                value: \"Client-01\",\n                color: \"#C98FFF\",\n                edgeLabel: \"Group 102\",\n              },\n              {\n                id: 23,\n                value: \"Server-01\",\n                color: \"#C98FFF\",\n                edgeLabel: \"Group 102\",\n              },\n            ],\n          },\n        ],\n      },\n    ];\n\n    sessionStorage.setItem(\"graphData\", JSON.stringify(treeValue));\n\n    if (\n      localStorage.getItem(\"treeValue\") === null ||\n      localStorage.getItem(\"technicalTableData\") === null\n    ) {\n      let technicalTableData = [];\n      let progressPercent = 0;\n\n      fetch(this.props.baseUrl + \"snapshot\", {\n        method: \"GET\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n          Authorization: \"Bearer \" + this.props.authToken,\n        },\n      }).then((response) => {\n        if (response.status === 200) {\n          response.json().then((respData) => {\n            respData = {\n              errorStatus: {\n                status: \"ok\",\n              },\n              data: [\n                {\n                  listdata: [\n                    {\n                      groupName: \"wabtec-gecars-qa\",\n                      items: [\n                        {\n                          groupId: \"wabtec-gecars-qa\",\n                          sessionId: \"0idLmsMk8e\",\n                        },\n                        {\n                          groupId: \"wabtec-gecars-qa\",\n                          sessionId: \"0idLmsMk8t\",\n                        },\n                      ],\n                    },\n                    {\n                      groupName: \"wabtec-gecars-ba\",\n                      items: [\n                        {\n                          groupId: \"wabtec-gecars-ba\",\n                          sessionId: \"0idLmsMk8e\",\n                        },\n                        {\n                          groupId: \"wabtec-gecars-ba\",\n                          sessionId: \"0idLmsMk8f\",\n                        },\n                      ],\n                    },\n                  ],\n                },\n              ],\n            };\n            if (respData.errorStatus.status === \"ok\") {\n              let subscriptions = respData.data;\n              if (subscriptions !== null) {\n                treeValue[0].value =\n                  treeValue[0].value + \" (\" + subscriptions.length + \")\";\n                if (subscriptions.length === 0) {\n                  subscriptions = [];\n                }\n\n                let numOfSubscriptions = subscriptions.length;\n                let totalNumOfAjax = subscriptions.length;\n                let totalNumOfAjaxProcessed = 0;\n                if (numOfSubscriptions === 0) {\n                  let that = this;\n                  setTimeout(function () {\n                    that.setState({\n                      loadTreeJs: true,\n                    });\n                    console.log(\"subscriptions\");\n                  }, 1000);\n                }\n\n                progressPercent = Math.round(\n                  (totalNumOfAjaxProcessed / totalNumOfAjax) * 100\n                );\n                this.setState({\n                  apiLoadPercentage: progressPercent,\n                });\n\n                let newId = treeValue[0].id;\n                for (let indexSubscriptions in subscriptions) {\n                  let subscriptionId =\n                    subscriptions[indexSubscriptions].listdata[\n                      indexSubscriptions\n                    ].items[indexSubscriptions].groupId;\n                  let subscriptionName =\n                    subscriptions[indexSubscriptions].listdata[\n                      indexSubscriptions\n                    ].items[indexSubscriptions].groupId;\n                  // let subscriptionId = indexSubscriptions.subscriptionId;\n                  // let subscriptionName = indexSubscriptions.subscriptionName;\n                  newId++;\n                  let newSubscriptionsObj = {};\n                  newSubscriptionsObj.id = newId;\n                  newSubscriptionsObj.title = subscriptionName;\n                  let valueToshow = subscriptionName;\n                  if (subscriptionName.length > 20) {\n                    let first3Char = subscriptionName.substr(0, 5);\n                    let last3Char = subscriptionName.substr(\n                      subscriptionName.length - 5,\n                      5\n                    );\n                    valueToshow = first3Char + \"...\" + last3Char;\n                  }\n                  newSubscriptionsObj.value = valueToshow;\n                  newSubscriptionsObj.nodeType = \"subscription\";\n\n                  if (indexSubscriptions === 0) {\n                    treeValue[0].children = [newSubscriptionsObj];\n                  } else {\n                    treeValue[0].children.push(newSubscriptionsObj);\n                  }\n\n                  if (subscriptionId !== \"\") {\n                    // fetch(this.props.baseUrl + '/gatewayList?subscriptionID='+subscriptionId, { // Get gateways '/gatewayList?subscriptionID='+subscriptionId\n                    fetch(\"https://reqres.in/api/users/2\", {\n                      method: \"GET\",\n                      headers: {\n                        Accept: \"application/json\",\n                        \"Content-Type\": \"application/json\",\n                        Authorization: \"Bearer \" + this.props.authToken,\n                      },\n                    }).then((response) => {\n                      // jshint ignore:line\n                      if (response.status === 200) {\n                        totalNumOfAjaxProcessed++;\n                        progressPercent = Math.round(\n                          (totalNumOfAjaxProcessed / totalNumOfAjax) * 100\n                        );\n                        this.setState({\n                          apiLoadPercentage: progressPercent,\n                        });\n                        response.json().then((respData) => {\n                          respData = {\n                            errorStatus: {\n                              status: \"ok\",\n                            },\n                            data: {\n                              glist: [\n                                {\n                                  suidbscriptionId: 2323,\n                                  subscrititleptionName: \"abc\",\n                                  cfURL: \"https://reqres.in/api/users/2\",\n                                  children: \"\",\n                                },\n                                {\n                                  id: 6754,\n                                  title: \"uytut\",\n                                  cfURL: \"https://reqres.in/api/users/2\",\n                                  children: \"\",\n                                },\n                              ],\n                            },\n                          };\n                          if (respData.errorStatus.status === \"ok\") {\n                            let gateways = respData.data.glist;\n                            let gatewaysCount = Object.keys(gateways).length;\n                            totalNumOfAjax = totalNumOfAjax + gatewaysCount;\n                            progressPercent = Math.round(\n                              (totalNumOfAjaxProcessed / totalNumOfAjax) * 100\n                            );\n                            this.setState({\n                              apiLoadPercentage: progressPercent,\n                            });\n                            treeValue[0].children[indexSubscriptions].value =\n                              treeValue[0].children[indexSubscriptions].value +\n                              \" (\" +\n                              gatewaysCount +\n                              \")\";\n                            for (let indexGateway in gateways) {\n                              newId++;\n                              let newGatewayObj = {};\n                              newGatewayObj.id = newId;\n                              newGatewayObj.title =\n                                gateways[indexGateway].cfURL;\n                              let cfUrl = gateways[indexGateway].cfURL;\n                              let startPos = cfUrl.indexOf(\"://\") + 3;\n                              let endPos = cfUrl.indexOf(\".\");\n                              let valueToshow = cfUrl.slice(startPos, endPos);\n                              let gatewayShortCurl = valueToshow;\n                              if (valueToshow > 30) {\n                                let first7Char = valueToshow.substr(0, 10);\n                                let last7Char = valueToshow.substr(\n                                  valueToshow.length - 10,\n                                  10\n                                );\n                                valueToshow = first7Char + \"...\" + last7Char;\n                              }\n                              newGatewayObj.value = valueToshow;\n                              newGatewayObj.nodeType = \"gateway\";\n\n                              if (indexGateway.split(\":\")[1] === 0) {\n                                treeValue[0].children[\n                                  indexSubscriptions\n                                ].children = [newGatewayObj];\n                              } else {\n                                //treeValue[0].children[indexSubscriptions].push(newGatewayObj);\n                              }\n\n                              // fetch(this.props.baseUrl + '/getGatewayHealth?gatewayURL='+gateways[indexGateway].cfURL, {\n                              fetch(\"https://reqres.in/api/users/2\", {\n                                method: \"GET\",\n                                headers: {\n                                  Accept: \"application/json\",\n                                  \"Content-Type\": \"application/json\",\n                                  Authorization:\n                                    \"Bearer \" + this.props.authToken,\n                                },\n                              }).then((response) => {\n                                // jshint ignore:line\n                                if (response.status === 200) {\n                                  response.json().then((respData) => {\n                                    respData = {\n                                      errorStatus: {\n                                        status: \"ok\",\n                                      },\n                                      data: {\n                                        SuperConns: {\n                                          serverId: 23,\n                                        },\n                                        ClientPool: [{ bindId: 3432 }],\n                                        Sessions: [\n                                          {\n                                            clientConfig: {\n                                              groupId: 53435,\n                                            },\n                                          },\n                                        ],\n                                      },\n                                    };\n                                    totalNumOfAjaxProcessed++;\n                                    progressPercent = Math.round(\n                                      (totalNumOfAjaxProcessed /\n                                        totalNumOfAjax) *\n                                        100\n                                    );\n                                    this.setState({\n                                      apiLoadPercentage: progressPercent,\n                                    });\n                                    if (respData.errorStatus.status === \"ok\") {\n                                      let clientPools =\n                                        respData.data.ClientPool;\n                                      let preparedClientPools = [];\n                                      let clientPoolCounts = {};\n                                      let superConns = respData.data.SuperConns;\n                                      let preparedSuperConns = [];\n                                      let superConnCounts = {};\n                                      let sessions = respData.data.Sessions;\n                                      let secondarySessions = [];\n                                      let preparedSessions = [];\n                                      let sessionCounts = {};\n                                      //console.log(subscriptionName);\n                                      //console.log(subscriptions[indexSubscriptions].subscriptionName);\n                                      for (let sessionIndex in sessions) {\n                                        let prepareSessionData = {};\n                                        prepareSessionData.sessionId =\n                                          sessionIndex;\n                                        prepareSessionData.groupId =\n                                          sessions[\n                                            sessionIndex\n                                          ].clientConfig.groupId;\n                                        secondarySessions.push(\n                                          prepareSessionData\n                                        );\n                                      }\n\n                                      if (clientPools.length > 0) {\n                                        clientPools.forEach(function (element) {\n                                          clientPoolCounts[element.bindId] =\n                                            (clientPoolCounts[element.bindId] ||\n                                              0) + 1;\n                                        });\n                                        preparedClientPools =\n                                          this.removeDuplicates(\n                                            clientPools,\n                                            \"bindId\"\n                                          );\n                                      }\n\n                                      if (preparedClientPools.length > 0) {\n                                        newId++;\n                                        //  treeValue[0].children[indexSubscriptions].children[indexGateway.split(\":\")[1]].children = [{id: newId, value: 'Client Pools ('+ clientPools.length + ')', title: 'Client Pools', nodeType: 'clientpooltitle'}];\n                                        for (let indexClientPool in preparedClientPools) {\n                                          newId++;\n                                          let newClientPoolObj = {};\n                                          newClientPoolObj.id = newId;\n\n                                          const preparedClientPools = [\n                                            {\n                                              clientConfig: {\n                                                groupId: 2424,\n                                                id: 121,\n                                              },\n                                            },\n                                          ];\n\n                                          newClientPoolObj.title =\n                                            preparedClientPools[indexClientPool]\n                                              .clientConfig.groupId +\n                                            \"\\n\" +\n                                            \" [\" +\n                                            preparedClientPools[indexClientPool]\n                                              .clientConfig.id +\n                                            \"] \" +\n                                            \"(\" +\n                                            clientPoolCounts[\n                                              preparedClientPools[\n                                                indexClientPool\n                                              ].clientConfig.id\n                                            ] +\n                                            \")\";\n                                          let valueToshow =\n                                            preparedClientPools[indexClientPool]\n                                              .clientConfig.groupId +\n                                            \"\\n\" +\n                                            \" [\" +\n                                            preparedClientPools[indexClientPool]\n                                              .clientConfig.id +\n                                            \"] \" +\n                                            \"(\" +\n                                            clientPoolCounts[\n                                              preparedClientPools[\n                                                indexClientPool\n                                              ].clientConfig.id\n                                            ] +\n                                            \")\";\n\n                                          newClientPoolObj.value = valueToshow;\n                                          newClientPoolObj.nodeType =\n                                            \"clientpool\";\n\n                                          if (indexClientPool === 0) {\n                                            //  treeValue[0].children[indexSubscriptions].children[indexGateway.split(\":\")[1]].children[0].children = [newClientPoolObj];\n                                          } else {\n                                            // treeValue[0].children[indexSubscriptions].children[indexGateway.split(\":\")[1]].children[0].children.push(newClientPoolObj);\n                                          }\n\n                                          let preparePoolDataForTable = {};\n                                          preparePoolDataForTable.subscription_name =\n                                            subscriptionName;\n                                          preparePoolDataForTable.gateway =\n                                            gatewayShortCurl;\n                                          preparePoolDataForTable.group_id =\n                                            preparedClientPools[\n                                              indexClientPool\n                                            ].clientConfig.groupId;\n                                          preparePoolDataForTable.count =\n                                            clientPoolCounts[\n                                              preparedClientPools[\n                                                indexClientPool\n                                              ].clientConfig.id\n                                            ];\n                                          preparePoolDataForTable.type =\n                                            \"clientpool\";\n                                          technicalTableData.push(\n                                            preparePoolDataForTable\n                                          );\n                                        }\n                                      }\n\n                                      if (superConns.length > 0) {\n                                        superConns.forEach(function (element) {\n                                          superConnCounts[element.serverId] =\n                                            (superConnCounts[\n                                              element.serverId\n                                            ] || 0) + 1;\n                                        });\n                                        preparedSuperConns =\n                                          this.removeDuplicates(\n                                            superConns,\n                                            \"serverId\"\n                                          );\n                                      }\n                                      if (preparedSuperConns.length > 0) {\n                                        newId++;\n\n                                        if (\n                                          !treeValue[0].children[\n                                            indexSubscriptions\n                                          ].children[indexGateway.split(\":\")[1]]\n                                            .children\n                                        ) {\n                                          treeValue[0].children[\n                                            indexSubscriptions\n                                          ].children[\n                                            indexGateway.split(\":\")[1]\n                                          ].children = [\n                                            {\n                                              id: newId,\n                                              value:\n                                                \"Super Connections (\" +\n                                                superConns.length +\n                                                \")\",\n                                              title: \"Super Connections\",\n                                              nodeType: \"superconnectiontitle\",\n                                            },\n                                          ];\n                                        } else {\n                                          treeValue[0].children[\n                                            indexSubscriptions\n                                          ].children[\n                                            indexGateway.split(\":\")[1]\n                                          ].children.push({\n                                            id: newId,\n                                            value:\n                                              \"Super Connections (\" +\n                                              superConns.length +\n                                              \")\",\n                                            title: \"Super Connections\",\n                                            nodeType: \"superconnectiontitle\",\n                                          });\n                                        }\n\n                                        for (let indexSuperConn in preparedSuperConns) {\n                                          newId++;\n                                          let newSuperConnObj = {};\n                                          newSuperConnObj.id = newId;\n                                          newSuperConnObj.title =\n                                            preparedSuperConns[indexSuperConn]\n                                              .bindId.groupId +\n                                            \"\\n\" +\n                                            \" [\" +\n                                            preparedSuperConns[indexSuperConn]\n                                              .bindId.id +\n                                            \"] \" +\n                                            \"(\" +\n                                            superConnCounts[\n                                              preparedSuperConns[indexSuperConn]\n                                                .bindId.id\n                                            ] +\n                                            \")\";\n                                          let valueToshow =\n                                            preparedSuperConns[indexSuperConn]\n                                              .bindId.groupId +\n                                            \"\\n\" +\n                                            \" [\" +\n                                            preparedSuperConns[indexSuperConn]\n                                              .bindId.id +\n                                            \"] \" +\n                                            \"(\" +\n                                            superConnCounts[\n                                              preparedSuperConns[indexSuperConn]\n                                                .bindId.id\n                                            ] +\n                                            \")\";\n\n                                          newSuperConnObj.value = valueToshow;\n                                          newSuperConnObj.nodeType =\n                                            \"superconnection\";\n\n                                          if (indexSuperConn === 0) {\n                                            if (\n                                              treeValue[0].children[\n                                                indexSubscriptions\n                                              ].children[\n                                                indexGateway.split(\":\")[1]\n                                              ].children[0].title ===\n                                              \"Client Pools\"\n                                            ) {\n                                              treeValue[0].children[\n                                                indexSubscriptions\n                                              ].children[\n                                                indexGateway.split(\":\")[1]\n                                              ].children[1].children = [\n                                                newSuperConnObj,\n                                              ];\n                                            } else {\n                                              treeValue[0].children[\n                                                indexSubscriptions\n                                              ].children[\n                                                indexGateway.split(\":\")[1]\n                                              ].children[0].children = [\n                                                newSuperConnObj,\n                                              ];\n                                            }\n                                          } else {\n                                            if (\n                                              treeValue[0].children[\n                                                indexSubscriptions\n                                              ].children[\n                                                indexGateway.split(\":\")[1]\n                                              ].children[0].title ===\n                                              \"Client Pools\"\n                                            ) {\n                                              treeValue[0].children[\n                                                indexSubscriptions\n                                              ].children[\n                                                indexGateway.split(\":\")[1]\n                                              ].children[1].children.push(\n                                                newSuperConnObj\n                                              );\n                                            } else {\n                                              treeValue[0].children[\n                                                indexSubscriptions\n                                              ].children[\n                                                indexGateway.split(\":\")[1]\n                                              ].children[0].children.push(\n                                                newSuperConnObj\n                                              );\n                                            }\n                                          }\n\n                                          let prepareSupperConDataForTable = {};\n                                          prepareSupperConDataForTable.subscription_name =\n                                            subscriptionName;\n                                          prepareSupperConDataForTable.gateway =\n                                            gatewayShortCurl;\n                                          prepareSupperConDataForTable.group_id =\n                                            preparedSuperConns[\n                                              indexSuperConn\n                                            ].bindId.groupId;\n                                          prepareSupperConDataForTable.count =\n                                            superConnCounts[\n                                              preparedSuperConns[\n                                                indexSuperConn\n                                              ].bindId.id\n                                            ];\n                                          prepareSupperConDataForTable.type =\n                                            \"superconnection\";\n                                          technicalTableData.push(\n                                            prepareSupperConDataForTable\n                                          );\n                                        }\n\n                                        if (secondarySessions.length > 0) {\n                                          secondarySessions.forEach(function (\n                                            element\n                                          ) {\n                                            sessionCounts[element.groupId] =\n                                              (sessionCounts[element.groupId] ||\n                                                0) + 1;\n                                          });\n                                          preparedSessions =\n                                            this.removeDuplicates(\n                                              secondarySessions,\n                                              \"groupId\"\n                                            );\n                                        }\n\n                                        if (preparedSessions.length > 0) {\n                                          newId++;\n\n                                          if (\n                                            !treeValue[0].children[\n                                              indexSubscriptions\n                                            ].children[\n                                              indexGateway.split(\":\")[1]\n                                            ].children\n                                          ) {\n                                            treeValue[0].children[\n                                              indexSubscriptions\n                                            ].children[\n                                              indexGateway.split(\":\")[1]\n                                            ].children = [\n                                              {\n                                                id: newId,\n                                                value:\n                                                  \"Sessions (\" +\n                                                  secondarySessions.length +\n                                                  \")\",\n                                                title: \"Sessions\",\n                                                nodeType: \"sessiontitle\",\n                                              },\n                                            ];\n                                          } else {\n                                            treeValue[0].children[\n                                              indexSubscriptions\n                                            ].children[\n                                              indexGateway.split(\":\")[1]\n                                            ].children.push({\n                                              id: newId,\n                                              value:\n                                                \"Sessions (\" +\n                                                secondarySessions.length +\n                                                \")\",\n                                              title: \"Sessions\",\n                                              nodeType: \"sessiontitle\",\n                                            });\n                                          }\n                                          let sessionIndexToPushChildren =\n                                            treeValue[0].children[\n                                              indexSubscriptions\n                                            ].children[\n                                              indexGateway.split(\":\")[1]\n                                            ].children.length - 1;\n                                          for (let indexSession in preparedSessions) {\n                                            newId++;\n                                            let newSessionObj = {};\n                                            newSessionObj.id = newId;\n                                            newSessionObj.title =\n                                              preparedSessions[indexSession]\n                                                .groupId +\n                                              \"(\" +\n                                              sessionCounts[\n                                                preparedSessions[indexSession]\n                                                  .groupId\n                                              ] +\n                                              \")\";\n                                            let valueToshow =\n                                              preparedSessions[indexSession]\n                                                .groupId +\n                                              \"(\" +\n                                              sessionCounts[\n                                                preparedSessions[indexSession]\n                                                  .groupId\n                                              ] +\n                                              \")\";\n\n                                            newSessionObj.value = valueToshow;\n                                            newSessionObj.nodeType = \"session\";\n\n                                            if (indexSession === 0) {\n                                              treeValue[0].children[\n                                                indexSubscriptions\n                                              ].children[\n                                                indexGateway.split(\":\")[1]\n                                              ].children[\n                                                sessionIndexToPushChildren\n                                              ].children = [newSessionObj];\n                                            } else {\n                                              treeValue[0].children[\n                                                indexSubscriptions\n                                              ].children[\n                                                indexGateway.split(\":\")[1]\n                                              ].children[\n                                                sessionIndexToPushChildren\n                                              ].children.push(newSessionObj);\n                                            }\n\n                                            let prepareSessionDataForTable = {};\n                                            prepareSessionDataForTable.subscription_name =\n                                              subscriptionName;\n                                            prepareSessionDataForTable.gateway =\n                                              gatewayShortCurl;\n                                            prepareSessionDataForTable.group_id =\n                                              preparedSessions[\n                                                indexSession\n                                              ].groupId;\n                                            prepareSessionDataForTable.count =\n                                              sessionCounts[\n                                                preparedSessions[\n                                                  indexSession\n                                                ].groupId\n                                              ];\n                                            prepareSessionDataForTable.type =\n                                              \"session\";\n                                            technicalTableData.push(\n                                              prepareSessionDataForTable\n                                            );\n                                          }\n                                        }\n                                      }\n                                    }\n                                    if (\n                                      totalNumOfAjaxProcessed === totalNumOfAjax\n                                    ) {\n                                      this.generateTableStructure(\n                                        technicalTableData\n                                      );\n                                      localStorage.setItem(\n                                        \"technicalTableData\",\n                                        JSON.stringify(technicalTableData)\n                                      );\n                                      localStorage.setItem(\n                                        \"treeValue\",\n                                        JSON.stringify(treeValue)\n                                      );\n                                      let that = this;\n                                      setTimeout(function () {\n                                        that.setState({\n                                          mockTableData: technicalTableData,\n                                          loadTreeJs: true,\n                                        });\n                                      }, 2000);\n                                    }\n                                  });\n                                }\n                              });\n                            }\n                          } else {\n                            treeValue[0].children[indexSubscriptions].value =\n                              treeValue[0].children[indexSubscriptions].value +\n                              \" (0)\";\n                          }\n\n                          if (totalNumOfAjaxProcessed === totalNumOfAjax) {\n                            let that = this;\n                            setTimeout(function () {\n                              that.setState({\n                                loadTreeJs: true,\n                              });\n                              console.log(\"gateways\");\n                            }, 2000);\n                          }\n                        });\n                      }\n                    });\n                  } else {\n                    totalNumOfAjaxProcessed++;\n                    progressPercent = Math.round(\n                      (totalNumOfAjaxProcessed / totalNumOfAjax) * 100\n                    );\n                    this.setState({\n                      apiLoadPercentage: progressPercent,\n                    });\n                  }\n                }\n\n                let nodes = [];\n                let edges = [];\n                if (treeValue.length > 0) {\n                  //let shapeArray = this.state.nodeShapes;\n                  let treeObj = treeValue[0];\n                  console.log(treeValue[0]);\n                  let parentNodeId = treeObj.id;\n                  let parentNodeLabel = treeObj.value;\n                  let parentNodeTitle = treeObj.value;\n                  let color = treeObj.color;\n                  let parentNode = {\n                    id: parentNodeId,\n                    label: parentNodeLabel,\n                    title: parentNodeTitle,\n                    color: color,\n                    shape: \"ellipse\",\n                  };\n                  nodes.push(parentNode);\n                  if (treeObj.children) {\n                    for (let childNode of treeObj.children) {\n                      let childNodeId = childNode.id;\n                      let childNodeLabel = childNode.value;\n                      let childNodeTitle = childNode.title;\n                      let childColor = childNode.color;\n                      let childNodeEgdeLabel = childNode.edgeLabel;\n                      let shape = \"box\";\n                      if (childNode.nodeType === \"subscription\") {\n                        shape = \"circle\";\n                      } else if (\n                        childNode.nodeType === \"superconnectiontitle\" ||\n                        childNode.nodeType === \"clientpooltitle\" ||\n                        childNode.nodeType === \"sessiontitle\"\n                      ) {\n                        shape = \"circle\";\n                      } else if (childNode.nodeType === \"clientpool\") {\n                        shape = \"ellipse\";\n                      }\n                      let childNodeShape = shape;\n                      let preparedChildNode = {\n                        id: childNodeId,\n                        label: childNodeLabel,\n                        title: childNodeTitle,\n                        shape: childNodeShape,\n                        color: childColor,\n                      };\n                      nodes.push(preparedChildNode);\n\n                      let prepareEdges = {\n                        from: 1,\n                        to: childNodeId,\n                        label: childNodeEgdeLabel,\n                        color: childColor,\n                      };\n                      edges.push(prepareEdges);\n                    }\n                  }\n                }\n\n                this.setState({\n                  treeValue: treeValue,\n                  graph: {\n                    nodes: nodes,\n                    edges: edges,\n                  },\n                });\n              } else {\n                let thead = [\n                  {\n                    fieldId: \"subscription_name\",\n                    fieldName: \"Subscription Name\",\n                  },\n                  { fieldId: \"gateway\", fieldName: \"Gateway\" },\n                  { fieldId: \"group_id\", fieldName: \"Group Id\" },\n                  { fieldId: \"count\", fieldName: \"Count\" },\n                  { fieldId: \"type\", fieldName: \"Type\" },\n                ];\n                this.setState({\n                  table: {\n                    thead: thead,\n                    tbody: [],\n                  },\n                  allFields: [],\n                });\n                setTimeout(() => {\n                  this.setState({\n                    treeValue: [],\n                    graph: {\n                      nodes: [],\n                      edges: [],\n                    },\n                    apiLoadPercentage: 100,\n                    loadTreeJs: true,\n                  });\n                }, 2000);\n                //this.timer = setInterval(() => this.getItems(), 30000);\n              }\n            }\n          });\n        }\n      });\n    } else {\n      this.displayDataFromLocalStorage();\n      //this.timer = setInterval(() => this.getItems(), 30000);\n    }\n  }\n\n  /* istanbul ignore next */\n  componentWillUnmount() {\n    clearInterval(this.timer);\n    this.timer = null;\n  }\n\n  /* istanbul ignore next */\n  displayDataFromLocalStorage() {\n    let nodes = [];\n    let edges = [];\n    let treeValue = JSON.parse(sessionStorage.getItem(\"graphData\"));\n    let technicalTableData = JSON.parse(\n      localStorage.getItem(\"technicalTableData\")\n    );\n    this.setState({\n      mockTableData: technicalTableData,\n    });\n    this.generateTableStructure(technicalTableData);\n    if (treeValue.length > 0) {\n      //let shapeArray = this.state.nodeShapes;\n      let treeObj = treeValue[0];\n      console.log(treeObj);\n      let parentNodeId = treeObj.id;\n      let parentNodeLabel = treeObj.value;\n      let parentNodeTitle = treeObj.value;\n      let color = treeObj.color;\n      let parentNode = {\n        id: parentNodeId,\n        label: parentNodeLabel,\n        title: parentNodeTitle,\n        color: color,\n        shape: \"ellipse\",\n      };\n      nodes.push(parentNode);\n      if (treeObj.children) {\n        for (let childNode of treeObj.children) {\n          let childNodeId = childNode.id;\n          let childNodeLabel = childNode.value;\n          let childNodeTitle = childNode.title;\n          let childColor = childNode.color;\n          let childNodeEgdeLabel = childNode.edgeLabel;\n          let shape = \"box\";\n          if (childNode.nodeType === \"subscription\") {\n            shape = \"circle\";\n          } else if (\n            childNode.nodeType === \"superconnectiontitle\" ||\n            childNode.nodeType === \"clientpooltitle\" ||\n            childNode.nodeType === \"sessiontitle\"\n          ) {\n            shape = \"circle\";\n          } else if (childNode.nodeType === \"clientpool\") {\n            shape = \"ellipse\";\n          }\n          let childNodeShape = shape;\n          let preparedChildNode = {\n            id: childNodeId,\n            label: childNodeLabel,\n            title: childNodeTitle,\n            shape: childNodeShape,\n            color: childColor,\n          };\n          nodes.push(preparedChildNode);\n\n          let prepareEdges = {\n            from: 1,\n            to: childNodeId,\n            label: childNodeEgdeLabel,\n            color: childColor,\n          };\n          edges.push(prepareEdges);\n        }\n      }\n    }\n\n    this.setState({\n      treeValue: treeValue,\n      graph: {\n        nodes: nodes,\n        edges: edges,\n      },\n      apiLoadPercentage: 99,\n    });\n\n    setTimeout(() => {\n      this.setState({\n        apiLoadPercentage: 100,\n        loadTreeJs: true,\n      });\n      console.log(\"from LS\");\n    }, 1000);\n  }\n\n  /* istanbul ignore next */\n  getItems() {\n    let technicalTableData = [];\n    let treeValue = [\n      {\n        id: 1,\n        value: \"EC\",\n        title: \"EC\",\n        nodeType: \"root\",\n      },\n    ];\n\n    fetch(this.props.baseUrl + \"/listSubscriptions\", {\n      method: \"GET\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \" + this.props.authToken,\n      },\n    }).then((response) => {\n      if (response.status === 200) {\n        response.json().then((respData) => {\n          if (respData.errorStatus.status === \"ok\") {\n            let subscriptions = respData.data;\n            if (subscriptions !== null) {\n              treeValue[0].value =\n                treeValue[0].value + \" (\" + subscriptions.length + \")\";\n              if (subscriptions.length === 0) {\n                subscriptions = [];\n              }\n\n              let numOfSubscriptions = subscriptions.length;\n              let totalNumOfAjax = subscriptions.length;\n              let totalNumOfAjaxProcessed = 0;\n              if (numOfSubscriptions === 0) {\n                localStorage.setItem(\n                  \"technicalTableData\",\n                  JSON.stringify(technicalTableData)\n                );\n                localStorage.setItem(\"treeValue\", JSON.stringify(treeValue));\n                this.setState({\n                  mockTableData: technicalTableData,\n                });\n              }\n\n              let newId = treeValue[0].id;\n              for (let indexSubscriptions in subscriptions) {\n                let subscriptionId =\n                  subscriptions[indexSubscriptions].subscriptionId.trim();\n                let subscriptionName =\n                  subscriptions[indexSubscriptions].subscriptionName.trim();\n                newId++;\n                let newSubscriptionsObj = {};\n                newSubscriptionsObj.id = newId;\n                newSubscriptionsObj.title = subscriptionName;\n                let valueToshow = subscriptionName;\n                if (subscriptionName.length > 20) {\n                  let first3Char = subscriptionName.substr(0, 5);\n                  let last3Char = subscriptionName.substr(\n                    subscriptionName.length - 5,\n                    5\n                  );\n                  valueToshow = first3Char + \"...\" + last3Char;\n                }\n                newSubscriptionsObj.value = valueToshow;\n                newSubscriptionsObj.nodeType = \"subscription\";\n\n                if (indexSubscriptions === 0) {\n                  treeValue[0].children = [newSubscriptionsObj];\n                } else {\n                  treeValue[0].children.push(newSubscriptionsObj);\n                }\n\n                if (subscriptionId !== \"\") {\n                  fetch(\n                    this.props.baseUrl +\n                      \"/gatewayList?subscriptionID=\" +\n                      subscriptionId,\n                    {\n                      // Get gateways '/gatewayList?subscriptionID='+subscriptionId\n                      method: \"GET\",\n                      headers: {\n                        Accept: \"application/json\",\n                        \"Content-Type\": \"application/json\",\n                        Authorization: \"Bearer \" + this.props.authToken,\n                      },\n                    }\n                  ).then((response) => {\n                    // jshint ignore:line\n                    if (response.status === 200) {\n                      totalNumOfAjaxProcessed++;\n                      response.json().then((respData) => {\n                        if (respData.errorStatus.status === \"ok\") {\n                          let gateways = respData.data.glist;\n                          let gatewaysCount = Object.keys(gateways).length;\n                          totalNumOfAjax = totalNumOfAjax + gatewaysCount;\n                          treeValue[0].children[indexSubscriptions].value =\n                            treeValue[0].children[indexSubscriptions].value +\n                            \" (\" +\n                            gatewaysCount +\n                            \")\";\n                          for (let indexGateway in gateways) {\n                            newId++;\n                            let newGatewayObj = {};\n                            newGatewayObj.id = newId;\n                            newGatewayObj.title = gateways[indexGateway].cfURL;\n                            let cfUrl = gateways[indexGateway].cfURL;\n                            let startPos = cfUrl.indexOf(\"://\") + 3;\n                            let endPos = cfUrl.indexOf(\".\");\n                            let valueToshow = cfUrl.slice(startPos, endPos);\n                            let gatewayShortCurl = valueToshow;\n                            if (valueToshow > 30) {\n                              let first7Char = valueToshow.substr(0, 10);\n                              let last7Char = valueToshow.substr(\n                                valueToshow.length - 10,\n                                10\n                              );\n                              valueToshow = first7Char + \"...\" + last7Char;\n                            }\n                            newGatewayObj.value = valueToshow;\n                            newGatewayObj.nodeType = \"gateway\";\n\n                            if (indexGateway.split(\":\")[1] === 0) {\n                              treeValue[0].children[\n                                indexSubscriptions\n                              ].children = [newGatewayObj];\n                            } else {\n                              treeValue[0].children[\n                                indexSubscriptions\n                              ].children.push(newGatewayObj);\n                            }\n\n                            fetch(\n                              this.props.baseUrl +\n                                \"/getGatewayHealth?gatewayURL=\" +\n                                gateways[indexGateway].cfURL,\n                              {\n                                method: \"GET\",\n                                headers: {\n                                  Accept: \"application/json\",\n                                  \"Content-Type\": \"application/json\",\n                                  Authorization:\n                                    \"Bearer \" + this.props.authToken,\n                                },\n                              }\n                            ).then((response) => {\n                              // jshint ignore:line\n                              if (response.status === 200) {\n                                response.json().then((respData) => {\n                                  totalNumOfAjaxProcessed++;\n                                  if (respData.errorStatus.status === \"ok\") {\n                                    let clientPools = respData.data.ClientPool;\n                                    let preparedClientPools = [];\n                                    let clientPoolCounts = {};\n                                    let superConns = respData.data.SuperConns;\n                                    let preparedSuperConns = [];\n                                    let superConnCounts = {};\n                                    let sessions = respData.data.Sessions;\n                                    let secondarySessions = [];\n                                    let preparedSessions = [];\n                                    let sessionCounts = {};\n\n                                    for (let sessionIndex in sessions) {\n                                      let prepareSessionData = {};\n                                      prepareSessionData.sessionId =\n                                        sessionIndex;\n                                      prepareSessionData.groupId =\n                                        sessions[\n                                          sessionIndex\n                                        ].clientConfig.groupId;\n                                      secondarySessions.push(\n                                        prepareSessionData\n                                      );\n                                    }\n\n                                    if (clientPools.length > 0) {\n                                      clientPools.forEach(function (element) {\n                                        clientPoolCounts[element.bindId] =\n                                          (clientPoolCounts[element.bindId] ||\n                                            0) + 1;\n                                      });\n                                      preparedClientPools =\n                                        this.removeDuplicates(\n                                          clientPools,\n                                          \"bindId\"\n                                        );\n                                    }\n\n                                    if (preparedClientPools.length > 0) {\n                                      newId++;\n                                      treeValue[0].children[\n                                        indexSubscriptions\n                                      ].children[\n                                        indexGateway.split(\":\")[1]\n                                      ].children = [\n                                        {\n                                          id: newId,\n                                          value:\n                                            \"Client Pools (\" +\n                                            clientPools.length +\n                                            \")\",\n                                          title: \"Client Pools\",\n                                          nodeType: \"clientpooltitle\",\n                                        },\n                                      ];\n                                      for (let indexClientPool in preparedClientPools) {\n                                        newId++;\n                                        let newClientPoolObj = {};\n                                        newClientPoolObj.id = newId;\n                                        newClientPoolObj.title =\n                                          preparedClientPools[indexClientPool]\n                                            .clientConfig.groupId +\n                                          \"\\n\" +\n                                          \" [\" +\n                                          preparedClientPools[indexClientPool]\n                                            .clientConfig.id +\n                                          \"] \" +\n                                          \"(\" +\n                                          clientPoolCounts[\n                                            preparedClientPools[indexClientPool]\n                                              .clientConfig.id\n                                          ] +\n                                          \")\";\n                                        let valueToshow =\n                                          preparedClientPools[indexClientPool]\n                                            .clientConfig.groupId +\n                                          \"\\n\" +\n                                          \" [\" +\n                                          preparedClientPools[indexClientPool]\n                                            .clientConfig.id +\n                                          \"] \" +\n                                          \"(\" +\n                                          clientPoolCounts[\n                                            preparedClientPools[indexClientPool]\n                                              .clientConfig.id\n                                          ] +\n                                          \")\";\n\n                                        newClientPoolObj.value = valueToshow;\n                                        newClientPoolObj.nodeType =\n                                          \"clientpool\";\n\n                                        if (indexClientPool === 0) {\n                                          treeValue[0].children[\n                                            indexSubscriptions\n                                          ].children[\n                                            indexGateway.split(\":\")[1]\n                                          ].children[0].children = [\n                                            newClientPoolObj,\n                                          ];\n                                        } else {\n                                          treeValue[0].children[\n                                            indexSubscriptions\n                                          ].children[\n                                            indexGateway.split(\":\")[1]\n                                          ].children[0].children.push(\n                                            newClientPoolObj\n                                          );\n                                        }\n\n                                        let preparePoolDataForTable = {};\n                                        preparePoolDataForTable.subscription_name =\n                                          subscriptionName;\n                                        preparePoolDataForTable.gateway =\n                                          gatewayShortCurl;\n                                        preparePoolDataForTable.group_id =\n                                          preparedClientPools[\n                                            indexClientPool\n                                          ].clientConfig.groupId;\n                                        preparePoolDataForTable.count =\n                                          clientPoolCounts[\n                                            preparedClientPools[\n                                              indexClientPool\n                                            ].clientConfig.id\n                                          ];\n                                        preparePoolDataForTable.type =\n                                          \"clientpool\";\n                                        technicalTableData.push(\n                                          preparePoolDataForTable\n                                        );\n                                      }\n                                    }\n\n                                    if (superConns.length > 0) {\n                                      superConns.forEach(function (element) {\n                                        superConnCounts[element.serverId] =\n                                          (superConnCounts[element.serverId] ||\n                                            0) + 1;\n                                      });\n                                      preparedSuperConns =\n                                        this.removeDuplicates(\n                                          superConns,\n                                          \"serverId\"\n                                        );\n                                    }\n                                    if (preparedSuperConns.length > 0) {\n                                      newId++;\n\n                                      if (\n                                        !treeValue[0].children[\n                                          indexSubscriptions\n                                        ].children[indexGateway.split(\":\")[1]]\n                                          .children\n                                      ) {\n                                        treeValue[0].children[\n                                          indexSubscriptions\n                                        ].children[\n                                          indexGateway.split(\":\")[1]\n                                        ].children = [\n                                          {\n                                            id: newId,\n                                            value:\n                                              \"Super Connections (\" +\n                                              superConns.length +\n                                              \")\",\n                                            title: \"Super Connections\",\n                                            nodeType: \"superconnectiontitle\",\n                                          },\n                                        ];\n                                      } else {\n                                        treeValue[0].children[\n                                          indexSubscriptions\n                                        ].children[\n                                          indexGateway.split(\":\")[1]\n                                        ].children.push({\n                                          id: newId,\n                                          value:\n                                            \"Super Connections (\" +\n                                            superConns.length +\n                                            \")\",\n                                          title: \"Super Connections\",\n                                          nodeType: \"superconnectiontitle\",\n                                        });\n                                      }\n\n                                      for (let indexSuperConn in preparedSuperConns) {\n                                        newId++;\n                                        let newSuperConnObj = {};\n                                        newSuperConnObj.id = newId;\n                                        newSuperConnObj.title =\n                                          preparedSuperConns[indexSuperConn]\n                                            .bindId.groupId +\n                                          \"\\n\" +\n                                          \" [\" +\n                                          preparedSuperConns[indexSuperConn]\n                                            .bindId.id +\n                                          \"] \" +\n                                          \"(\" +\n                                          superConnCounts[\n                                            preparedSuperConns[indexSuperConn]\n                                              .bindId.id\n                                          ] +\n                                          \")\";\n                                        let valueToshow =\n                                          preparedSuperConns[indexSuperConn]\n                                            .bindId.groupId +\n                                          \"\\n\" +\n                                          \" [\" +\n                                          preparedSuperConns[indexSuperConn]\n                                            .bindId.id +\n                                          \"] \" +\n                                          \"(\" +\n                                          superConnCounts[\n                                            preparedSuperConns[indexSuperConn]\n                                              .bindId.id\n                                          ] +\n                                          \")\";\n\n                                        newSuperConnObj.value = valueToshow;\n                                        newSuperConnObj.nodeType =\n                                          \"superconnection\";\n\n                                        if (indexSuperConn === 0) {\n                                          if (\n                                            treeValue[0].children[\n                                              indexSubscriptions\n                                            ].children[\n                                              indexGateway.split(\":\")[1]\n                                            ].children[0].title ===\n                                            \"Client Pools\"\n                                          ) {\n                                            treeValue[0].children[\n                                              indexSubscriptions\n                                            ].children[\n                                              indexGateway.split(\":\")[1]\n                                            ].children[1].children = [\n                                              newSuperConnObj,\n                                            ];\n                                          } else {\n                                            treeValue[0].children[\n                                              indexSubscriptions\n                                            ].children[\n                                              indexGateway.split(\":\")[1]\n                                            ].children[0].children = [\n                                              newSuperConnObj,\n                                            ];\n                                          }\n                                        } else {\n                                          if (\n                                            treeValue[0].children[\n                                              indexSubscriptions\n                                            ].children[\n                                              indexGateway.split(\":\")[1]\n                                            ].children[0].title ===\n                                            \"Client Pools\"\n                                          ) {\n                                            treeValue[0].children[\n                                              indexSubscriptions\n                                            ].children[\n                                              indexGateway.split(\":\")[1]\n                                            ].children[1].children.push(\n                                              newSuperConnObj\n                                            );\n                                          } else {\n                                            treeValue[0].children[\n                                              indexSubscriptions\n                                            ].children[\n                                              indexGateway.split(\":\")[1]\n                                            ].children[0].children.push(\n                                              newSuperConnObj\n                                            );\n                                          }\n                                        }\n\n                                        let prepareSupperConDataForTable = {};\n                                        prepareSupperConDataForTable.subscription_name =\n                                          subscriptionName;\n                                        prepareSupperConDataForTable.gateway =\n                                          gatewayShortCurl;\n                                        prepareSupperConDataForTable.group_id =\n                                          preparedSuperConns[\n                                            indexSuperConn\n                                          ].bindId.groupId;\n                                        prepareSupperConDataForTable.count =\n                                          superConnCounts[\n                                            preparedSuperConns[\n                                              indexSuperConn\n                                            ].bindId.id\n                                          ];\n                                        prepareSupperConDataForTable.type =\n                                          \"superconnection\";\n                                        technicalTableData.push(\n                                          prepareSupperConDataForTable\n                                        );\n                                      }\n\n                                      if (secondarySessions.length > 0) {\n                                        secondarySessions.forEach(function (\n                                          element\n                                        ) {\n                                          sessionCounts[element.groupId] =\n                                            (sessionCounts[element.groupId] ||\n                                              0) + 1;\n                                        });\n                                        preparedSessions =\n                                          this.removeDuplicates(\n                                            secondarySessions,\n                                            \"groupId\"\n                                          );\n                                      }\n\n                                      if (preparedSessions.length > 0) {\n                                        newId++;\n\n                                        if (\n                                          !treeValue[0].children[\n                                            indexSubscriptions\n                                          ].children[indexGateway.split(\":\")[1]]\n                                            .children\n                                        ) {\n                                          treeValue[0].children[\n                                            indexSubscriptions\n                                          ].children[\n                                            indexGateway.split(\":\")[1]\n                                          ].children = [\n                                            {\n                                              id: newId,\n                                              value:\n                                                \"Sessions (\" +\n                                                secondarySessions.length +\n                                                \")\",\n                                              title: \"Sessions\",\n                                              nodeType: \"sessiontitle\",\n                                            },\n                                          ];\n                                        } else {\n                                          treeValue[0].children[\n                                            indexSubscriptions\n                                          ].children[\n                                            indexGateway.split(\":\")[1]\n                                          ].children.push({\n                                            id: newId,\n                                            value:\n                                              \"Sessions (\" +\n                                              secondarySessions.length +\n                                              \")\",\n                                            title: \"Sessions\",\n                                            nodeType: \"sessiontitle\",\n                                          });\n                                        }\n                                        let sessionIndexToPushChildren =\n                                          treeValue[0].children[\n                                            indexSubscriptions\n                                          ].children[indexGateway.split(\":\")[1]]\n                                            .children.length - 1;\n                                        for (let indexSession in preparedSessions) {\n                                          newId++;\n                                          let newSessionObj = {};\n                                          newSessionObj.id = newId;\n                                          newSessionObj.title =\n                                            preparedSessions[indexSession]\n                                              .groupId +\n                                            \"(\" +\n                                            sessionCounts[\n                                              preparedSessions[indexSession]\n                                                .groupId\n                                            ] +\n                                            \")\";\n                                          let valueToshow =\n                                            preparedSessions[indexSession]\n                                              .groupId +\n                                            \"(\" +\n                                            sessionCounts[\n                                              preparedSessions[indexSession]\n                                                .groupId\n                                            ] +\n                                            \")\";\n\n                                          newSessionObj.value = valueToshow;\n                                          newSessionObj.nodeType = \"session\";\n\n                                          if (indexSession === 0) {\n                                            treeValue[0].children[\n                                              indexSubscriptions\n                                            ].children[\n                                              indexGateway.split(\":\")[1]\n                                            ].children[\n                                              sessionIndexToPushChildren\n                                            ].children = [newSessionObj];\n                                          } else {\n                                            treeValue[0].children[\n                                              indexSubscriptions\n                                            ].children[\n                                              indexGateway.split(\":\")[1]\n                                            ].children[\n                                              sessionIndexToPushChildren\n                                            ].children.push(newSessionObj);\n                                          }\n\n                                          let prepareSessionDataForTable = {};\n                                          prepareSessionDataForTable.subscription_name =\n                                            subscriptionName;\n                                          prepareSessionDataForTable.gateway =\n                                            gatewayShortCurl;\n                                          prepareSessionDataForTable.group_id =\n                                            preparedSessions[\n                                              indexSession\n                                            ].groupId;\n                                          prepareSessionDataForTable.count =\n                                            sessionCounts[\n                                              preparedSessions[\n                                                indexSession\n                                              ].groupId\n                                            ];\n                                          prepareSessionDataForTable.type =\n                                            \"session\";\n                                          technicalTableData.push(\n                                            prepareSessionDataForTable\n                                          );\n                                        }\n                                      }\n                                    }\n                                  }\n                                  if (\n                                    totalNumOfAjaxProcessed === totalNumOfAjax\n                                  ) {\n                                    localStorage.setItem(\n                                      \"technicalTableData\",\n                                      JSON.stringify(technicalTableData)\n                                    );\n                                    localStorage.setItem(\n                                      \"treeValue\",\n                                      JSON.stringify(treeValue)\n                                    );\n                                    this.setState({\n                                      mockTableData: technicalTableData,\n                                    });\n                                    console.log(\"Long Poll data GL\");\n                                  }\n                                });\n                              }\n                            });\n                          }\n                        } else {\n                          treeValue[0].children[indexSubscriptions].value =\n                            treeValue[0].children[indexSubscriptions].value +\n                            \" (0)\";\n                        }\n\n                        if (totalNumOfAjaxProcessed === totalNumOfAjax) {\n                          localStorage.setItem(\n                            \"technicalTableData\",\n                            JSON.stringify(technicalTableData)\n                          );\n                          localStorage.setItem(\n                            \"treeValue\",\n                            JSON.stringify(treeValue)\n                          );\n                          this.setState({\n                            mockTableData: technicalTableData,\n                          });\n                          console.log(\"Long Poll data GL NF\");\n                        }\n                      });\n                    }\n                  });\n                } else {\n                  totalNumOfAjaxProcessed++;\n                }\n              }\n            }\n          }\n        });\n      }\n    });\n  }\n\n  /* istanbul ignore next */\n  generateTableStructure(technicalTableData) {\n    let thead = [];\n    let allFields = [];\n    let tbody = [];\n    const clientConfig = [\n      {\n        gatewayId: \"0idLmsMk8e\",\n        RefID: \"101186260\",\n        IP: \"10.72.11.10:63218\",\n        sessionId: \"0idLmsMk8e\",\n        groupId: \"wabtec-gecars-qa\",\n        bindid: \"XvmV6ynici\",\n        targetId: \"Q7rfHI\",\n        timeCreated: \"2021-02-10T12:11:07.223278039Z\",\n        serviceUrl:\n          \"https://b3a2e606-eaa8-4d3c-aadc-c27f12260a1b.run.aws-usw02-dev.ice.predix.io\",\n      },\n      {\n        gatewayId: \"1idLmsBc9x\",\n        RefID: \"132186260\",\n        IP: \"10.72.11.10:63317\",\n        sessionId: \"1idLmsBc9x\",\n        groupId: \"wabtec-gecars-ta\",\n        bindid: \"ZcdV6snbci\",\n        targetId: \"Q7rfHI\",\n        timeCreated: \"2021-02-10T12:11:07.223278039Z\",\n        serviceUrl:\n          \"https://b3a2e606-eaa8-4d3c-aadc-c27f12260a1b.run.aws-usw02-dev.ice.predix.io\",\n      },\n    ];\n    let mockTableData = clientConfig;\n    sessionStorage.setItem(\"gatewayDetails\", JSON.stringify(clientConfig));\n\n    if (mockTableData.length > 0) {\n      let allDataKeys = Object.keys(mockTableData[0]);\n      for (let dataKey of allDataKeys) {\n        let theadOject = {};\n        theadOject.fieldId = dataKey;\n        theadOject.fieldName = this.toTableHeaderCase(dataKey);\n        thead.push(theadOject);\n        allFields.push(theadOject);\n      }\n\n      for (let allData of mockTableData) {\n        let tbodyObj = {};\n        let objKey = 0;\n        for (let dataKey of allDataKeys) {\n          let singleObj = {};\n          if (allData[dataKey].length > 10) {\n            singleObj.value = allData[dataKey].substr(0, 10);\n            singleObj.hiddenValue = allData[dataKey];\n            singleObj.hiddenState = true;\n          } else {\n            singleObj.value = allData[dataKey];\n          }\n          tbodyObj[objKey] = singleObj;\n          objKey++;\n        }\n        tbody.push(tbodyObj);\n      }\n    }\n\n    this.setState({\n      table: {\n        thead: thead,\n        tbody: tbody,\n      },\n      allFields: allFields,\n    });\n  }\n\n  /* istanbul ignore next */\n  toTableHeaderCase(str) {\n    return str\n      .split(\"_\")\n      .map(function (word, index) {\n        return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();\n      })\n      .join(\" \");\n  }\n\n  /* istanbul ignore next */\n  showHideTableTdData(objectIndex, itemIndex) {\n    let currentTbody = this.state.table.tbody;\n    let copiedObjectToChange = Object.assign(\n      {},\n      currentTbody[objectIndex][itemIndex]\n    );\n    let tempValue = copiedObjectToChange.value;\n    copiedObjectToChange.value = copiedObjectToChange.hiddenValue;\n    copiedObjectToChange.hiddenValue = tempValue;\n    copiedObjectToChange.hiddenState = !copiedObjectToChange.hiddenState;\n    currentTbody[objectIndex][itemIndex] = copiedObjectToChange;\n    this.setState({\n      table: {\n        thead: this.state.table.thead,\n        tbody: currentTbody,\n      },\n    });\n  }\n\n  /* istanbul ignore next */\n  changeToSearchView() {\n    this.setState({\n      isSearchView: true,\n    });\n  }\n\n  /* istanbul ignore next */\n  changeTopologyView(items) {\n    //let shapeArray = this.state.nodeShapes;\n    let nodes = [];\n    let edges = [];\n    let treeObj = Object.assign({}, items);\n    let parentNodeId = treeObj.id;\n    let parentNodeLabel = treeObj.value;\n    let parentNodeTitle = treeObj.title;\n    let color = treeObj.color;\n    let parentNode = {};\n    parentNode.id = parentNodeId;\n    parentNode.label = parentNodeLabel;\n    parentNode.title = parentNodeTitle;\n    parentNode.color = color;\n    parentNode.shape = \"ellipse\";\n    parentNode.color = color;\n    nodes.push(parentNode);\n    if (treeObj.children) {\n      let childern = [...treeObj.children];\n      for (let childNode of childern) {\n        let copiedChildNode = Object.assign({}, childNode);\n        let childNodeId = copiedChildNode.id;\n        let childNodeLabel = copiedChildNode.value;\n        let childNodeTitle = copiedChildNode.title;\n        let childNodeType = copiedChildNode.nodeType;\n        let childNodeColor = copiedChildNode.color;\n        let childNodeEgdeLabel = childNode.edgeLabel;\n        let preparedChildNode = {};\n        preparedChildNode.id = childNodeId;\n        preparedChildNode.label = childNodeLabel;\n        preparedChildNode.title = childNodeTitle;\n        let shape = \"box\";\n        //let color = \"#80b8d2fa\";\n        if (childNodeType === \"subscription\") {\n          shape = \"circle\";\n          color = \"#08cc9efa\";\n        } else if (\n          childNodeType === \"superconnectiontitle\" ||\n          childNodeType === \"clientpooltitle\" ||\n          childNodeType === \"sessiontitle\"\n        ) {\n          shape = \"circle\";\n          color = \"#08cc9efa\";\n        } else if (childNodeType === \"clientpool\") {\n          shape = \"ellipse\";\n          color = \"#e84a4a\";\n        } else if (childNodeType === \"session\") {\n          shape = \"box\";\n          color = \"#ffc107\";\n        }\n        preparedChildNode.shape = shape;\n        preparedChildNode.color = childNodeColor;\n        nodes.push(preparedChildNode);\n\n        let prepareEdges = {};\n        prepareEdges.from = parentNodeId;\n        prepareEdges.to = childNodeId;\n        prepareEdges.label = childNodeEgdeLabel;\n        prepareEdges.color = childNodeColor;\n        edges.push(prepareEdges);\n      }\n    }\n\n    this.setState({\n      graph: {\n        nodes: nodes,\n        edges: edges,\n      },\n    });\n  }\n\n  /* istanbul ignore next */\n  removeDuplicates(myArr, prop) {\n    return myArr.filter((obj, pos, arr) => {\n      return arr.map((mapObj) => mapObj[prop]).indexOf(obj[prop]) === pos;\n    });\n  }\n\n  /* istanbul ignore next */\n  destroyDataTable(tableId) {\n    var table = $(\"#\" + tableId).DataTable();\n    table.destroy();\n  }\n\n  /* istanbul ignore next */\n  refreshData(e) {\n    this.destroyDataTable(\"viewTable\");\n    this.setState({\n      loadTreeJs: false,\n      apiLoadPercentage: 70,\n    });\n    if (\n      localStorage.getItem(\"treeValue\") !== null &&\n      localStorage.getItem(\"technicalTableData\") !== null\n    ) {\n      this.displayDataFromLocalStorage();\n    } else {\n      let thead = [\n        { fieldId: \"subscription_name\", fieldName: \"Subscription Name\" },\n        { fieldId: \"gateway\", fieldName: \"Gateway\" },\n        { fieldId: \"group_id\", fieldName: \"Group Id\" },\n        { fieldId: \"count\", fieldName: \"Count\" },\n        { fieldId: \"type\", fieldName: \"Type\" },\n      ];\n      this.setState({\n        table: {\n          thead: thead,\n          tbody: [],\n        },\n        allFields: [],\n      });\n      setTimeout(() => {\n        this.setState({\n          treeValue: [],\n          graph: {\n            nodes: [],\n            edges: [],\n          },\n          apiLoadPercentage: 100,\n          loadTreeJs: true,\n        });\n      }, 2000);\n    }\n  }\n\n  /* istanbul ignore next */\n  createView(selectedFields, filterFields) {\n    // search functionality here\n    let mockTableData = [...this.state.mockTableData];\n    console.log(mockTableData);\n    let filteredData = mockTableData;\n    let uniqueFilteredData = [];\n    let andFilters = [];\n    let orFilters = [];\n    for (let filterField of filterFields) {\n      if (\n        filterField.whereCondition === \"AND\" &&\n        filterField.whereValue !== \"\"\n      ) {\n        andFilters.push(filterField);\n      } else if (\n        filterField.whereCondition === \"OR\" &&\n        filterField.whereValue !== \"\"\n      ) {\n        orFilters.push(filterField);\n      }\n    }\n\n    if (andFilters.length > 0) {\n      for (let andFilter of andFilters) {\n        if (andFilter.whereOperator === \"=\") {\n          filteredData = filteredData.filter(function (data) {\n            // jshint ignore:line\n            return data[andFilter.whereField] === andFilter.whereValue;\n          });\n        } else if (andFilter.whereOperator === \">\") {\n          filteredData = filteredData.filter(function (data) {\n            // jshint ignore:line\n            return data[andFilter.whereField] > andFilter.whereValue;\n          });\n        } else if (andFilter.whereOperator === \"<\") {\n          filteredData = filteredData.filter(function (data) {\n            // jshint ignore:line\n            return data[andFilter.whereField] < andFilter.whereValue;\n          });\n        } else if (andFilter.whereOperator === \"!=\") {\n          filteredData = filteredData.filter(function (data) {\n            // jshint ignore:line\n            return data[andFilter.whereField] !== andFilter.whereValue;\n          });\n        }\n      }\n    }\n\n    if (orFilters.length > 0) {\n      let orResults = [];\n      for (let orFilter of orFilters) {\n        let orFilteredDatas = [];\n        let wholeData = [...this.state.mockTableData];\n        if (orFilter.whereOperator === \"=\") {\n          orFilteredDatas = wholeData.filter(function (data) {\n            // jshint ignore:line\n            return data[orFilter.whereField] === orFilter.whereValue;\n          });\n        } else if (orFilter.whereOperator === \">\") {\n          orFilteredDatas = wholeData.filter(function (data) {\n            // jshint ignore:line\n            return data[orFilter.whereField] > orFilter.whereValue;\n          });\n        } else if (orFilter.whereOperator === \"<\") {\n          orFilteredDatas = wholeData.filter(function (data) {\n            // jshint ignore:line\n            return data[orFilter.whereField] < orFilter.whereValue;\n          });\n        } else if (orFilter.whereOperator === \"!=\") {\n          orFilteredDatas = wholeData.filter(function (data) {\n            // jshint ignore:line\n            return data[orFilter.whereField] !== orFilter.whereValue;\n          });\n        }\n\n        if (orFilteredDatas.length > 0) {\n          for (let orFilteredData of orFilteredDatas) {\n            orResults.push(orFilteredData);\n          }\n        }\n      }\n\n      if (orResults.length > 0) {\n        for (let orResult of orResults) {\n          filteredData.push(orResult);\n        }\n      }\n    }\n\n    if (orFilters.length > 0) {\n      let seen = Object.create(null);\n      uniqueFilteredData = filteredData.filter((o) => {\n        var key = [\"subscription_name\", \"group_id\", \"gateway\"]\n          .map((k) => o[k])\n          .join(\"|\");\n        if (!seen[key]) {\n          seen[key] = true;\n          return true;\n        }\n      });\n    } else {\n      uniqueFilteredData = filteredData;\n    }\n\n    let selectedDataKeys = [];\n    let tbody = [];\n    for (let selDatakey of selectedFields) {\n      selectedDataKeys.push(selDatakey.fieldId);\n    }\n    for (let allData of filteredData) {\n      let tbodyObj = {};\n      let objKey = 0;\n      for (let dataKey of selectedDataKeys) {\n        let singleObj = {};\n        if (allData[dataKey].length > 10) {\n          singleObj.value = allData[dataKey].substr(0, 10);\n          singleObj.hiddenValue = allData[dataKey];\n          singleObj.hiddenState = true;\n        } else {\n          singleObj.value = allData[dataKey];\n        }\n        tbodyObj[objKey] = singleObj;\n        objKey++;\n      }\n      tbody.push(tbodyObj);\n    }\n\n    this.setState({\n      table: {\n        thead: selectedFields,\n        tbody: tbody,\n      },\n      isSearchView: false,\n    });\n  }\n\n  /* istanbul ignore next */\n  render() {\n    /* jshint ignore:start */\n    /* istanbul ignore next */\n    return (\n      <div>\n        {!this.state.isSearchView ? (\n          <div className=\"Technicalview\">\n            <ul className=\"nav nav-tabs\" id=\"myTab\" role=\"tablist\">\n              <li className=\"nav-item\">\n                <a\n                  className=\"nav-link active\"\n                  id=\"home-tab\"\n                  data-toggle=\"tab\"\n                  href=\"#home\"\n                  role=\"tab\"\n                  aria-controls=\"home\"\n                  aria-selected=\"true\"\n                >\n                  Table\n                </a>\n              </li>\n              <li className=\"nav-item\">\n                <a\n                  className=\"nav-link\"\n                  id=\"profile-tab\"\n                  data-toggle=\"tab\"\n                  href=\"#profile\"\n                  role=\"tab\"\n                  aria-controls=\"profile\"\n                  aria-selected=\"false\"\n                >\n                  Treelist and Topology\n                </a>\n              </li>\n              <li\n                title=\"Refresh\"\n                className=\"nav-item cursor-pointer\"\n                onClick={(event) => {\n                  this.refreshData(event);\n                }}\n              >\n                <a className=\"nav-link disabled\" href=\"#\">\n                  <img\n                    className=\"\"\n                    src={IconRefresh}\n                    alt=\"refresh\"\n                    height=\"15px\"\n                  />\n                </a>\n              </li>\n            </ul>\n            <div className=\"tab-content\" id=\"myTabContent\">\n              <div\n                className=\"tab-pane fade show active\"\n                id=\"home\"\n                role=\"tabpanel\"\n                aria-labelledby=\"home-tab\"\n              >\n                {this.state.loadTreeJs ? (\n                  this.state.table.tbody.length > 0 ? (\n                    <div className=\"row view-table\">\n                      <div className=\"col-md-12\" id=\"viewTableDiv\">\n                        <button\n                          onClick={this.changeToSearchView.bind(this)}\n                          className=\"btn btn-sm float-right btn-link\"\n                        >\n                          Advanced search\n                        </button>\n                        <Viewtable\n                          tableData={this.state.table}\n                          showHideTableTdData={this.showHideTableTdData.bind(\n                            this\n                          )}\n                          userId={this.props.userId}\n                          showGlobalMessage={this.props.showGlobalMessage.bind(\n                            this\n                          )}\n                          hideGlobalMessage={this.props.hideGlobalMessage.bind(\n                            this\n                          )}\n                          permissions={this.props.permissions}\n                        ></Viewtable>\n                      </div>\n                    </div>\n                  ) : (\n                    <div className=\"row mt-2\">\n                      <div className=\"col-md-12\">\n                        <div className=\"alert alert-success\" role=\"alert\">\n                          No record found!\n                        </div>\n                      </div>\n                    </div>\n                  )\n                ) : (\n                  <div className=\"row\">\n                    <div className=\"col-md-12 mt-5\">\n                      <p>Please wait...</p>\n                      <div className=\"progress\">\n                        <div\n                          className=\"progress-bar progress-bar-striped progress-bar-animated\"\n                          style={{ width: this.state.apiLoadPercentage + \"%\" }}\n                        ></div>\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </div>\n              <div\n                className=\"tab-pane fade\"\n                id=\"profile\"\n                role=\"tabpanel\"\n                aria-labelledby=\"profile-tab\"\n              >\n                {this.state.loadTreeJs ? (\n                  this.state.graph.nodes.length > 0 &&\n                  this.state.treeValue.length > 0 ? (\n                    <div className=\"row\">\n                      <div className=\"col-md-4 treeview-div\">\n                        <Treelist\n                          treeValue={this.state.treeValue}\n                          changeTopology={this.changeTopologyView.bind(this)}\n                        ></Treelist>\n                      </div>\n                      <div className=\"col-md-8 treeview-div\">\n                        <Topologygraph\n                          nodeData={this.state.graph}\n                        ></Topologygraph>\n                      </div>\n                    </div>\n                  ) : (\n                    <div className=\"row mt-2\">\n                      <div className=\"col-md-12\">\n                        <div className=\"alert alert-success\" role=\"alert\">\n                          No record found!\n                        </div>\n                      </div>\n                    </div>\n                  )\n                ) : (\n                  <div className=\"row\">\n                    <div className=\"col-md-12 mt-5\">\n                      <p>Please wait...</p>\n                      <div className=\"progress\">\n                        <div\n                          className=\"progress-bar progress-bar-striped progress-bar-animated\"\n                          style={{ width: this.state.apiLoadPercentage + \"%\" }}\n                        ></div>\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        ) : (\n          <Customsearch\n            showGlobalMessage={this.props.showGlobalMessage.bind(this)}\n            hideGlobalMessage={this.props.hideGlobalMessage.bind(this)}\n            allFields={this.state.allFields}\n            selectedFields={this.state.table.thead}\n            createView={this.createView.bind(this)}\n          ></Customsearch>\n        )}\n      </div>\n    );\n    /* jshint ignore:end */\n  }\n}\n","import React from \"react\";\n//import ReactDOM from \"react-dom\";\n\nimport Treelist from '../Treelist/Treelist.js';\nimport Topologygraph from '../Topologygraph/Topologygraph.js';\n//import Viewtable from '../Viewtable/Viewtable.js';\n\nexport default class Businessview extends React.Component {\n\n    /* istanbul ignore next */\n    constructor(props){\n        super(props);\n        this.state = {\n            treeValue: [],\n            graph: {\n                nodes: [],\n                edges: []\n            },\n\n            options: {\n                layout: {\n                  hierarchical: true\n                },\n                edges: {\n                  color: \"#000000\"\n                },\n                height: \"500px\"\n            },\n            table:{\n                thead: [],\n                tbody: []\n            }\n        };\n    }\n\n    /* istanbul ignore next */\n    componentDidMount(){\n        let treeValue = [{\n            id: 1,\n            value: 'EC',\n            children: [\n                {\n                    id: 2,\n                    value: 'Business',\n                    children: [\n                        {\n                            id: 7,\n                            value: 'Aviation',\n                            children: [\n                                {\n                                    id: 11,\n                                    value: 'Aviation1'\n                                },\n                                {\n                                    id: 12,\n                                    value: 'Aviation2'\n                                },\n                                {\n                                    id: 13,\n                                    value: 'Aviation3'\n                                },\n                            ]\n                        },\n                        {\n                            id: 8,\n                            value: 'Power'\n                        },\n                        {\n                            id: 9,\n                            value: 'Capital'\n                        },\n                        {\n                            id: 10,\n                            value: 'External'\n                        }\n                    ]\n                },\n                {\n                    id: 3,\n                    value: 'Subscription'\n                },\n                {\n                    id: 4,\n                    value: 'Application'\n                },\n                {\n                    id: 5,\n                    value: 'Groups'\n                },\n                {\n                    id: 6,\n                    value: 'Connection'\n                }\n            ]\n        }];\n        let nodes = [];\n        let edges = [];\n        if(treeValue.length > 0){\n            let treeObj = treeValue[0];\n            let parentNodeId = treeObj.id;\n            let parentNodeLabel = treeObj.value;\n            let parentNode = { id: parentNodeId, label: parentNodeLabel };\n            nodes.push(parentNode);\n            if(treeObj.children){\n                for(let childNode of treeObj.children){\n                    let childNodeId = childNode.id;\n                    let childNodeLabel = childNode.value;\n                    let preparedChildNode = { id: childNodeId, label: childNodeLabel };\n                    nodes.push(preparedChildNode);\n\n                    let prepareEdges = { from: 1, to: childNodeId };\n                    edges.push(prepareEdges);\n                }\n            }\n        }\n        \n        this.setState({\n            treeValue: treeValue,\n            graph: {\n                nodes: nodes,\n                edges: edges\n            }\n        });\n    }\n\n    /* istanbul ignore next */\n    changeTopologyView(items){\n        let nodes = [];\n        let edges = [];\n        let treeObj = Object.assign({}, items);\n        let parentNodeId = treeObj.id;\n        let parentNodeLabel = treeObj.value;\n        let parentNode = {};\n        parentNode.id = parentNodeId;\n        parentNode.label = parentNodeLabel;\n        nodes.push(parentNode);\n        if(treeObj.children){\n            let childern = [ ...treeObj.children];\n            for(let childNode of childern){\n                let copiedChildNode = Object.assign({}, childNode);\n                let childNodeId = copiedChildNode.id;\n                let childNodeLabel = copiedChildNode.value;\n                let preparedChildNode = {};\n                preparedChildNode.id = childNodeId;\n                preparedChildNode.label = childNodeLabel;\n                nodes.push(preparedChildNode);\n\n                let prepareEdges = {};\n                prepareEdges.from = parentNodeId;\n                prepareEdges.to = childNodeId;\n                edges.push(prepareEdges);\n            }\n        }\n\n        this.setState({\n            graph: {\n                nodes: nodes,\n                edges: edges\n            }\n        });\n    }\n\n    /* istanbul ignore next */\n    render() {\n        /* jshint ignore:start */\n        return (\n            <div className=\"Businessview\">\n                {/*<div id=\"accordion\">\n                    <div className=\"card\">\n                        <div className=\"card-header\" id=\"headingOne\">\n                            <h5 className=\"mb-0\">\n                                <button className=\"btn btn-link\" data-toggle=\"collapse\" data-target=\"#collapseOne\" aria-expanded=\"false\" aria-controls=\"collapseOne\">\n                                    Treelist and Topology\n                                </button>\n                            </h5>\n                        </div>\n\n                        <div id=\"collapseOne\" className=\"collapse\" aria-labelledby=\"headingOne\" data-parent=\"#accordion\">\n                            <div className=\"card-body\">\n                                <div className=\"row\">\n                                    <div className=\"col-md-4 treeview-div\">\n                                        <Treelist treeValue={this.state.treeValue} changeTopology={this.changeTopologyView.bind(this)}></Treelist>\n                                    </div>\n                                    <div className=\"col-md-8 treeview-div\">\n                                        <Topologygraph nodeData={this.state.graph}></Topologygraph>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"card\">\n                        <div className=\"card-header\" id=\"headingTwo\">\n                            <h5 className=\"mb-0\">\n                                <button className=\"btn btn-link collapsed\" data-toggle=\"collapse\" data-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\n                                    Table\n                                </button>\n                            </h5>\n                        </div>\n                        <div id=\"collapseTwo\" className=\"collapse\" aria-labelledby=\"headingTwo\" data-parent=\"#accordion\">\n                            <div className=\"card-body\">\n                            {\n                                this.props.showTable ?\n                                    <div className=\"row view-table\">\n                                        <div className=\"col-md-12\">\n                                            <Viewtable tableData={this.props.tableData} showHideTableTdData={this.props.showHideTableTdData.bind(this)}></Viewtable>\n                                        </div>\n                                        <div className=\"col-md-12\">\n                                            <button onClick={this.props.goToSearch.bind(this)} className=\"btn btn-sm float-right customize-view-btn\">CUSTOMIZE VIEW</button>\n                                        </div>\n                                    </div> :\n                                    <p className=\"text-center loader-icon\">\n                                        <img alt=\"loading\" src=\"assets/static/images/rolling.svg\" />\n                                    </p>\n                            }\n                            </div>\n                        </div>\n                    </div>\n                </div> */}\n\n                <ul className=\"nav nav-tabs\" id=\"myTab\" role=\"tablist\">\n                    <li className=\"nav-item\">\n                        <a className=\"nav-link active\" id=\"home-tab\" data-toggle=\"tab\" href=\"#home\" role=\"tab\" aria-controls=\"home\" aria-selected=\"true\">Table</a>\n                    </li>\n                    <li className=\"nav-item\">\n                        <a className=\"nav-link\" id=\"profile-tab\" data-toggle=\"tab\" href=\"#profile\" role=\"tab\" aria-controls=\"profile\" aria-selected=\"false\">Treelist and Topology</a>\n                    </li>\n                </ul>\n                <div className=\"tab-content\" id=\"myTabContent\">\n                    <div className=\"tab-pane fade show active\" id=\"home\" role=\"tabpanel\" aria-labelledby=\"home-tab\">\n                    \n                        <div className=\"row view-table\">\n                            <div className=\"col-md-12\" id=\"viewTableDiv\">\n                                {/*<button onClick={this.props.goToSearch.bind(this)} className=\"btn btn-sm float-right btn-link\">Advanced search</button>\n                                <Viewtable tableData={this.props.tableData} showHideTableTdData={this.props.showHideTableTdData.bind(this)}></Viewtable>*/}\n                                <h3>Work in progress for real time table view</h3>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"tab-pane fade\" id=\"profile\" role=\"tabpanel\" aria-labelledby=\"profile-tab\">\n                        <div className=\"row\">\n                            <div className=\"col-md-4 treeview-div\">\n                                <Treelist treeValue={this.state.treeValue} changeTopology={this.changeTopologyView.bind(this)}></Treelist>\n                            </div>\n                            <div className=\"col-md-8 treeview-div\">\n                                <Topologygraph nodeData={this.state.graph}></Topologygraph>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n        /* jshint ignore:end */\n    }\n}","import React from \"react\";\nimport $ from 'jquery';\nimport Technicalview from \"./Technicalview.js\";\nimport Businessview from \"./Businessview.js\";\nimport { event } from \"jquery\";\n\nexport default class View extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      mockTableData: [],\n      topologyView: false, // false = Technical view, true = Business view\n    };\n  }\n\n  /* istanbul ignore next */\n  componentDidMount() {\n\n    $.fn.extend({\n      treed: function (o) {\n        var openedClass = \"fa-minus\";\n        var closedClass = \"fa-plus\";\n  \n        if (typeof o !== \"undefined\") {\n          if (typeof o.openedClass !== \"undefined\") {\n            openedClass = o.openedClass;\n          }\n          if (typeof o.closedClass !== \"undefined\") {\n            closedClass = o.closedClass;\n          }\n        }\n  \n        //initialize each of the top levels\n        var tree = $(this);\n        tree.addClass(\"tree\");\n        tree\n          .find(\"li\")\n          .has(\"ul\")\n          .each(function () {\n            var branch = $(this); //li with children ul\n            branch.prepend(\"<i class='fa \" + closedClass + \"'></i>\");\n            branch.addClass(\"branch\");\n            branch.on(\"click\", function (e) {\n              if (this === e.target) {\n                var icon = $(this).children(\"i:first\");\n                icon.toggleClass(openedClass + \" \" + closedClass);\n                $(this).children().children().toggle();\n              }\n            });\n            branch.children().children().toggle();\n          });\n        //fire event from the dynamically added icon\n        tree.find(\".branch .indicator\").each(function () {\n          $(this).on(\"click\", function () {\n            $(this).closest(\"li\").click();\n          });\n        });\n        //fire event to open branch if the li contains an anchor instead of text\n        tree.find(\".branch>a\").each(function () {\n          $(this).on(\"click\", function (e) {\n            $(this).closest(\"li\").click();\n            e.preventDefault();\n          });\n        });\n        //fire event to open branch if the li contains a button instead of text\n        tree.find(\".branch>button\").each(function () {\n          $(this).on(\"click\", function (e) {\n            $(this).closest(\"li\").click();\n            e.preventDefault();\n          });\n        });\n      },\n    });\n  }\n\n  /* istanbul ignore next */\n  changeTopologyView() {\n    this.setState({\n      topologyView: event.target.checked,\n    });\n  }\n\n  /* istanbul ignore next */\n  servedTopologyView() {\n    const currentTopologyView = this.state.topologyView;\n    if (!currentTopologyView) {\n      // Technical view\n      return (\n        <Technicalview\n          authToken={this.props.authToken}\n          baseUrl={this.props.baseUrl}\n          userId={this.props.userId}\n          showGlobalMessage={this.props.showGlobalMessage}\n          hideGlobalMessage={this.props.hideGlobalMessage}\n          permissions={this.props.permissions}\n        />\n      ); // jshint ignore:line\n    } else {\n      // Business view\n      return (\n        <Businessview\n          authToken={this.props.authToken}\n          baseUrl={this.props.baseUrl}\n          userId={this.props.userId}\n          showGlobalMessage={this.props.showGlobalMessage}\n          hideGlobalMessage={this.props.hideGlobalMessage}\n        />\n      ); // jshint ignore:line\n    }\n  }\n\n  render() {\n    /* jshint ignore:start */\n    /* istanbul ignore next */\n    return (\n      <div className=\"centered-div View\">\n        <div className=\"centered-div-header\">\n          <div className=\"row view-header\">\n            <div className=\"col-sm-8\">\n              <h6 id=\"view-header-title\">Topology view</h6>\n            </div>\n            <div className=\"col-sm-4\">\n              <div className=\"row\">\n                <div className=\"col-sm-5\">\n                  <h6>Technical view</h6>\n                </div>\n                <div className=\"col-sm-2\">\n                  <div className=\"custom-control custom-switch\">\n                    <input\n                      checked={this.state.topologyView}\n                      onChange={(event) => this.changeTopologyView(event)}\n                      type=\"checkbox\"\n                      className=\"custom-control-input\"\n                      id=\"viewComponentChange\"\n                    />\n                    <label\n                      className=\"custom-control-label cursor-pointer\"\n                      htmlFor=\"viewComponentChange\"\n                    >\n                      &nbsp;\n                    </label>\n                  </div>\n                </div>\n                <div className=\"col-sm-5\">\n                  <h6>Business view</h6>\n                </div>\n              </div>\n            </div>\n          </div>\n          <hr></hr>\n          <div className=\"col-md-12\">{this.servedTopologyView()}</div>\n        </div>\n      </div>\n    );\n    /* jshint ignore:end */\n  }\n}\n"],"names":["Treelist","that","this","setTimeout","props","treeValue","length","topParentId","id","el","document","getElementById","click","items","key","children","onClick","changeTopology","bind","title","href","value","className","map","item","handleGenerateTreeList","React","Topologygraph","generateTopology","nodeData","Network","refs","myRef","height","moveTo","position","x","y","offset","scale","ref","Viewtable","tableData","thead","val","index","fieldName","tbody","tbodyVal","tbodyIndex","role","tdIndex","hiddenValue","hiddenState","showHideTableTdData","alt","src","IconArrowMore","colSpan","Healthstatus","userId","showGlobalMessage","hideGlobalMessage","tableindx","permissions","Customsearch","state","allStateFields","availableFields","filteredAvailableFields","selectedFields","filteredSelectedFields","clickedFilteredAvailableFieldIndex","clickedFilteredSelectedFieldIndex","whereCondition","whereOperator","formDatas","finalFormDatas","isFormValid","isDisableCreateViewButton","allFields","condition","label","operator","whereField","fieldId","whereValue","whereValueError","slicedAvailableFields","selectedField","filter","obj","setState","propName","term","termLowerCase","toLowerCase","singleObj","Object","keys","some","indexOf","myArray","i","splice","e","searchStr","target","trim","filteredCurrentAvailableFields","filterBy","currentAvailableFields","objToMove","removeObject","push","filteredCurrentSelectedFields","currentSelectedFields","currentFormRows","formNewObject","formValidation","formRowIndex","type","currentFormRowIndex","name","updatedFieldValue","createView","formData","onChange","event","changeFormValue","whereConditionObjet","field","whereOperatorObjet","autoComplete","removeFormRow","IconXButton","addNewFilter","resetFilter","availableFieldsSerach","placeholder","availableFieldObj","availableFieldIndex","handleAvailableFieldSelect","handleMoveInAvailable","IconLeftArrowButton","handleMoveInSelected","IconRightArrowButton","selectedFieldsSerach","selectedFieldObj","selectedFieldIndex","handleSelectedFieldSelect","disabled","applyFilter","Technicalview","graph","nodes","edges","loadTreeJs","centerNodeColor","nodeShapes","apiLoadPercentage","mockTableData","table","isSearchView","color","edgeLabel","sessionStorage","setItem","JSON","stringify","localStorage","getItem","technicalTableData","progressPercent","fetch","baseUrl","method","headers","Accept","Authorization","authToken","then","response","status","json","respData","errorStatus","data","listdata","groupName","groupId","sessionId","subscriptions","numOfSubscriptions","totalNumOfAjax","totalNumOfAjaxProcessed","console","log","Math","round","newId","indexSubscriptions","subscriptionId","subscriptionName","newSubscriptionsObj","valueToshow","substr","nodeType","glist","suidbscriptionId","subscrititleptionName","cfURL","gateways","gatewaysCount","indexGateway","newGatewayObj","cfUrl","startPos","endPos","slice","gatewayShortCurl","first7Char","last7Char","split","SuperConns","serverId","ClientPool","bindId","Sessions","clientConfig","clientPools","preparedClientPools","clientPoolCounts","superConns","preparedSuperConns","superConnCounts","sessions","secondarySessions","preparedSessions","sessionCounts","sessionIndex","prepareSessionData","forEach","element","removeDuplicates","indexClientPool","newClientPoolObj","preparePoolDataForTable","subscription_name","gateway","group_id","count","indexSuperConn","newSuperConnObj","prepareSupperConDataForTable","sessionIndexToPushChildren","indexSession","newSessionObj","prepareSessionDataForTable","generateTableStructure","treeObj","parentNode","shape","childNode","childNodeId","childNodeLabel","childNodeTitle","childColor","childNodeEgdeLabel","preparedChildNode","prepareEdges","from","to","displayDataFromLocalStorage","clearInterval","timer","parse","gatewayId","RefID","IP","bindid","targetId","timeCreated","serviceUrl","allDataKeys","dataKey","theadOject","toTableHeaderCase","allData","tbodyObj","objKey","str","word","charAt","toUpperCase","join","objectIndex","itemIndex","currentTbody","copiedObjectToChange","assign","tempValue","parentNodeId","parentNodeLabel","parentNodeTitle","childern","copiedChildNode","childNodeType","childNodeColor","myArr","prop","pos","arr","mapObj","tableId","$","DataTable","destroy","destroyDataTable","filterFields","filteredData","andFilters","orFilters","filterField","andFilter","orResults","orFilter","orFilteredDatas","wholeData","orFilteredData","orResult","seen","create","o","k","selectedDataKeys","selDatakey","refreshData","IconRefresh","changeToSearchView","style","width","changeTopologyView","Businessview","options","layout","hierarchical","View","topologyView","treed","openedClass","closedClass","tree","addClass","find","has","each","branch","prepend","on","toggleClass","toggle","closest","preventDefault","checked","htmlFor","servedTopologyView"],"sourceRoot":""}