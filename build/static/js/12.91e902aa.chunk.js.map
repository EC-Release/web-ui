{"version":3,"sources":["../node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","assets/images/icon_greensortingdown.svg","Maintain/Groupcreate.js"],"names":["_arrayLikeToArray","arr","len","length","i","arr2","Array","_unsupportedIterableToArray","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","from","test","_createForOfIteratorHelper","Symbol","iterator","isArray","F","s","done","value","e","_e","f","TypeError","it","err","normalCompletion","didErr","step","next","_e2","_toConsumableArray","arrayLikeToArray","iter","unsupportedIterableToArray","module","exports","Groupcreate","props","state","groupForm","subscriptionId","dirtyState","groupId","errorsGroupForm","groupFormIsValid","subscriptions","keyName","setTimeout","$","popover","this","enableToolTip","showGlobalMessage","sessionStorage","getItem","respData","JSON","parse","allData","subscriptionData","groupData","keys","forEach","key","push","individualData","parent","setState","formObj","assign","console","log","hideGlobalMessage","localStorage","setItem","stringify","selectpicker","clearInterval","timerForSubscriptionList","fetch","baseUrl","method","headers","authToken","then","response","status","json","errorStatus","data","catch","fieldName","target","updatedValue","type","checked","currentForm","selectedOptions","option","handleFormValidation","currentFormData","subscriptionIdValue","subscriptionIdDirtyState","groupIdValue","groupIdDirtyState","formIsValid","errors","subscriptionIdFound","trim","prepareData","body","statusMsg","oldNewlyCreatedGroupsofSubscriptions","findIndex","x","allNewlyCreatedGroupsData","createdData","findGroupIndex","splice","className","id","alt","src","IconGreenSortingDown","data-live-search","onChange","event","handleFormData","map","subscription","subscriptionIndex","licenseId","disabled","onClick","createGroup","bind","React","Component"],"mappings":"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","file":"static/js/12.91e902aa.chunk.js","sourcesContent":["export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(n);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","import unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nexport default function _createForOfIteratorHelper(o) {\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (o = unsupportedIterableToArray(o))) {\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var it,\n      normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","module.exports = __webpack_public_path__ + \"static/media/icon_greensortingdown.7d91f50e.svg\";","import React from \"react\";\nimport $ from 'jquery';\n\nimport  IconGreenSortingDown from '../assets/images/icon_greensortingdown.svg';\n\nexport default class Groupcreate extends React.Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            groupForm:{\n                subscriptionId: { value: [], dirtyState: false },\n                groupId: { value: '', dirtyState: false },\n            },\n            errorsGroupForm: {},\n            groupFormIsValid: false,\n            subscriptions: [],\n            keyName:''\n        };\n    }\n\n     enableToolTip() {\n        setTimeout(() => {\n          $('[data-toggle=\"popover\"]').popover(); // For tooltips\n        }, 1000);\n      }\n\n    /* istanbul ignore next */\n    componentDidMount(){\n        this.enableToolTip();\n        this.props.showGlobalMessage(true, true, 'Please wait...', 'custom-success');\n        if (sessionStorage.getItem(\"snapshotData\") !== null) {\n          let respData =  JSON.parse(sessionStorage.getItem(\"snapshotData\"))\n          let allData =[]\n          let subscriptionData=[]\n          let groupData =[]\n            Object.keys(respData).forEach((key)=> {\n                allData.push(respData[key])\n            });\n            for(let individualData of allData){\n                if(individualData.parent){\n                    if(individualData.parent ===\"ab2a2691-a563-486c-9883-5111ff36ba9b\"){\n                      subscriptionData.push(individualData);\n                    }\n                    if(individualData.parent ===\"f894e5a8-0f9b-46ca-8b74-57e94610d731\"){\n                        groupData.push(individualData);\n                      }\n                }\n            }\n            this.setState({keyName: \"Group[\" + groupData.length + \"]\"})\n            if(subscriptionData.length > 0){\n              //let selectedSubscriptionId = subscriptionData[0].licenseId;\n              let formObj = Object.assign({}, this.state.groupForm);\n              formObj.subscriptionId.value = [];//selectedSubscriptionId;\n              this.setState({\n                  subscriptions: subscriptionData,\n                  groupForm: formObj\n              });\n\t\t  \n\t\t    setTimeout(()=> {\n              console.log(this.state.subscriptions) \n          }, 2000);\n          }\n          this.props.hideGlobalMessage();\n          localStorage.setItem(\"subscriptions\", JSON.stringify(subscriptionData));\n      }\n      else {\n          this.props.showGlobalMessage(true, true, 'Please try after sometime', 'custom-danger');\n          setTimeout(()=> {\n              this.props.hideGlobalMessage();\n          }, 2000);\n      }\n\t   setTimeout(()=> {\n            $(\"select\").selectpicker();\n          }, 1000); \n\t\n\t    \n    }\n\n    /* istanbul ignore next */\n    componentWillUnmount() {\n        clearInterval(this.timerForSubscriptionList);\n        this.timerForSubscriptionList = null;\n    }\n\n    /* istanbul ignore next */\n    getSubscriptionList(){\n        fetch(this.props.baseUrl + '/listSubscriptions', {\n            method: 'GET',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer '+this.props.authToken\n            }\n        })\n        .then((response) => {\n            if (response.status === 200) {\n                response.json().then((respData) => {\n                    if(respData.errorStatus.status === 'ok'){\n                        let subscriptions = respData.data;\n                        localStorage.setItem(\"subscriptions\", JSON.stringify(subscriptions));\n                    }\n                    else{\n                        console.log('Subscription list backgroung api error');\n                    }\n                });\n            }\n        })\n        .catch((err) => {\n            console.log(err);\n            console.log('Subscription list backgroung api error');\n        });\n    }\n\n    /* istanbul ignore next */\n    handleFormData(e){\n        let fieldName = e.target.name;\n        let updatedValue = e.target.type === 'checkbox' ? e.target.checked : e.target.value;\n        let currentForm =  Object.assign({}, this.state.groupForm);\n\n        if(fieldName === 'subscriptionId'){\n            let value = Array.from(e.target.selectedOptions, (option) => option.value);\n            currentForm.subscriptionId.value = value;\n            currentForm.subscriptionId.dirtyState = true;\n        }\n        else if(fieldName === 'groupId'){\n            currentForm.groupId.value = updatedValue;\n            currentForm.groupId.dirtyState = true;\n        }\n\n        this.setState({\n            groupForm: currentForm\n        });\n        this.handleFormValidation();\n    }\n\n    /* istanbul ignore next */\n    handleFormValidation(){\n        let currentFormData = this.state.groupForm;\n        let subscriptionIdValue = currentFormData.subscriptionId.value;\n        let subscriptionIdDirtyState = currentFormData.subscriptionId.dirtyState;\n        let groupIdValue = currentFormData.groupId.value;\n        let groupIdDirtyState = currentFormData.groupId.dirtyState;\n        let formIsValid = true;\n        let errors = {};\n        console.log(subscriptionIdValue);\n        let subscriptionIdFound = false;\n        for (let subscriptionId of subscriptionIdValue) {\n            console.log(subscriptionId);\n          if (subscriptionId.trim() !== \"\") {\n            subscriptionIdFound = true;\n          }\n        }\n\n        if (!subscriptionIdFound) {\n            if(subscriptionIdDirtyState){\n                errors.subscriptionId = \"Please select Subscription ID\";\n            }\n          formIsValid = false;\n        }\n\n        if(groupIdValue.trim() === ''){\n            if(groupIdDirtyState)\n                errors.groupId = 'Please enter Group ID';\n            formIsValid = false;\n        }\n\n        this.setState({\n\t\t\tgroupFormIsValid: formIsValid,\n\t\t\terrorsGroupForm: errors\n\t\t});\n    }\n\n    /* istanbul ignore next */\n    createGroup(){\n        this.props.showGlobalMessage(false, true, 'Record saving initiated. Please check after some time.', 'custom-success');\n        let currentForm =  Object.assign({}, this.state.groupForm);\n        let prepareData = {};\n        prepareData.subscriptionId = currentForm.subscriptionId.value;\n        prepareData.groupId = currentForm.groupId.value;\n        prepareData.parent = \"f894e5a8-0f9b-46ca-8b74-57e94610d731\"\n        prepareData.name = \"GroupName\"\n        /* let newlyCreatedGroups = [];\n        let createdGroupDataObj = {\n            groupId: prepareData.groupId,\n            aid: 'Pending',\n            tid: 'Pending'\n        }; */\n  /*       if (localStorage.getItem(\"newlyCreatedGroups\") === null){\n            // newlyCreatedGroups not found\n            let newlyCreatedGroupObj = {};\n            newlyCreatedGroupObj = {\n                subscriptionId: prepareData.subscriptionId,\n                createdData: [createdGroupDataObj]\n            };\n            newlyCreatedGroups.push(newlyCreatedGroupObj);\n            localStorage.setItem(\"newlyCreatedGroups\", JSON.stringify(newlyCreatedGroups));\n        }\n        else{\n            // newlyCreatedGroups found\n            let oldNewlyCreatedGroupsofSubscriptions = JSON.parse(localStorage.getItem(\"newlyCreatedGroups\"));\n            let findIndex = oldNewlyCreatedGroupsofSubscriptions.findIndex(x => x.subscriptionId === prepareData.subscriptionId);\n            if(findIndex == -1){\n                // subscription not found in array\n                let newlyCreatedGroupObj = {};\n                newlyCreatedGroupObj = {\n                    subscriptionId: prepareData.subscriptionId,\n                    createdData: [createdGroupDataObj]\n                };\n                oldNewlyCreatedGroupsofSubscriptions.push(newlyCreatedGroupObj);\n                localStorage.setItem(\"newlyCreatedGroups\", JSON.stringify(oldNewlyCreatedGroupsofSubscriptions));\n            }\n            else{\n                // subscription found in array\n                oldNewlyCreatedGroupsofSubscriptions[findIndex].createdData.push(createdGroupDataObj);\n                localStorage.setItem(\"newlyCreatedGroups\", JSON.stringify(oldNewlyCreatedGroupsofSubscriptions));\n            }\n        } */\n\n/*         console.log(JSON.parse(localStorage.getItem(\"newlyCreatedGroups\")));\n        setTimeout(()=> {\n            this.props.hideGlobalMessage();\n            let groupForm = {\n                subscriptionId: { value: prepareData.subscriptionId, dirtyState: false },\n                groupId: { value: '', dirtyState: false }\n            };\n\n            this.setState({\n                groupForm: groupForm,\n                groupFormIsValid: false\n            });\n        }, 2000); */\n\n        \n        fetch(this.props.baseUrl + this.state.keyName, { //this.props.baseUrl + '/createGroup'\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer '+this.props.authToken\n            },\n            body: JSON.stringify(prepareData)\n        })\n        .then((response) => {\n            if (response.status === 200) {\n                response.json().then((respData) => {\n                        this.props.showGlobalMessage(true, true, respData.errorStatus.statusMsg, 'custom-danger');\n                        setTimeout(()=> {\n                            this.props.hideGlobalMessage();\n                        }, 2000);\n                    let oldNewlyCreatedGroupsofSubscriptions = JSON.parse(sessionStorage.getItem(\"newlyCreatedGroups\"));\n                    let findIndex = oldNewlyCreatedGroupsofSubscriptions.findIndex(x => x.subscriptionId === prepareData.subscriptionId);\n                    let allNewlyCreatedGroupsData = [...oldNewlyCreatedGroupsofSubscriptions[findIndex].createdData];\n                    let findGroupIndex = allNewlyCreatedGroupsData.findIndex(x => x.groupId === prepareData.groupId);\n                    allNewlyCreatedGroupsData.splice(findGroupIndex, 1);\n                    oldNewlyCreatedGroupsofSubscriptions[findIndex].createdData = allNewlyCreatedGroupsData;\n                    sessionStorage.setItem(\"newlyCreatedGroups\", JSON.stringify(oldNewlyCreatedGroupsofSubscriptions));\n\n                });\n            }\n            else{\n                this.props.showGlobalMessage(true, true, 'Please try after sometime', 'custom-danger');\n                setTimeout(()=> {\n                    this.props.hideGlobalMessage();\n                }, 2000);\n            }\n        })\n        .catch((err) => {\n            console.log(err);\n            this.props.showGlobalMessage(true, true, 'Please try after sometime', 'custom-danger');\n            setTimeout(()=> {\n                this.props.hideGlobalMessage();\n            }, 2000);\n        });\n    }\n\n    render() {\n        /* jshint ignore:start */\n        /* istanbul ignore next */\n        return (\n            <div className=\"row Groupcreate\">\n                <div className=\"col-md-12 mt-2\">\n                    <div className=\"centered-div\">\n                        <div className=\"centered-div-header\">\n                            <div className=\"row maintainagentcreate-header\">\n                                <div className=\"col-md-12\">\n                                    <h6 id=\"maintaingroupcreate-title\">Create Group <small>Creating parameters.</small></h6>\n                                </div>\n                            </div>\n                            <hr></hr>\n                            <div className=\"changeable-form group-form\">\n                                <div className=\"row\">\n                                    <div className=\"col-sm-6\">\n                                        <div className=\"col-sm-12 label required\">\n                                            License <img alt=\"down-arrow\" src={IconGreenSortingDown} />\n                                        </div>\n                                        <div className=\"col-sm-12 mb-2\">\n                                            <select \n                                                className=\"selectpickerform-control form-control-sm\" \n                                                /*  multiple */\n\t\t\t\t\t\t                        data-live-search=\"true\"\n                                                name=\"subscriptionId\" \n                                                onChange={(event)=>{this.handleFormData(event)}}>\n\t\t\t\t\t\t{ this.state.subscriptions.map((subscription, subscriptionIndex) => {\n                                                        return(\n                                                            <option\n                                                                key={\"subscriptionOption\"+subscriptionIndex}\n                                                                value={ subscription.licenseId }>{ subscription.licenseId }</option>)\n                                                    })}\n                                            </select>\n                                            <small className=\"text-danger\">{ this.state.errorsGroupForm['subscriptionId']}</small>\n                                        </div>\n                                    </div>\n                                    <div className=\"col-sm-6\">\n                                        <div className=\"col-sm-12 label required\">\n                                            Group ID <img alt=\"down-arrow\" src={IconGreenSortingDown} />\n                                        </div>\n                                        <div className=\"col-sm-12 mb-2\">\n                                            <input\n                                                type=\"text\"\n                                                className=\"form-control form-control-sm\"\n                                                name=\"groupId\"\n                                                value={this.state.groupForm.groupId.value}\n                                                onChange={(event)=>{this.handleFormData(event)}} />\n                                            <small className=\"text-danger\">{ this.state.errorsGroupForm['groupId']}</small>\n                                        </div>\n                                    </div>\n                                </div>\n\n                                <div className=\"row\">\n                                    <div className=\"col-sm-12 mb-2 text-right\">\n                                        <button \n                                            id=\"create-group-btn\"\n                                            disabled={!this.state.groupFormIsValid}\n                                            onClick={this.createGroup.bind(this)} \n                                            className=\"btn btn-sm customize-view-btn\">CREATE GROUP</button>\n                                    </div>\n                                </div>\n\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n        /* jshint ignore:end */\n    }\n}\n"],"sourceRoot":""}