{"version":3,"sources":["assets/images/icon_greensortingdown.svg","assets/images/info.svg","Subscription/SubscriptionCreate/SubscriptionAdd.js"],"names":["module","exports","SubscriptionAdd","props","state","transactionForm","revision","value","dirtyState","transactionId","oidcUserId","transactionFormIsValid","errorsForm","e","currentForm","Object","assign","this","updatedValue","target","name","setState","handleFormValidation","formIsValid","errors","trim","showGlobalMessage","prepareData","url","baseUrl","trid","console","log","fetch","method","headers","Accept","Authorization","authToken","body","JSON","stringify","then","response","status","json","respData","errorStatus","setTimeout","hideGlobalMessage","statusMsg","catch","err","className","id","type","readOnly","alt","src","IconInfo","data-toggle","data-trigger","data-placement","autoComplete","onChange","event","handleFormData","disabled","onClick","shareSubscription","bind","React","Component"],"mappings":"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","file":"static/js/23.3514d1c7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icon_greensortingdown.7d91f50e.svg\";","module.exports = __webpack_public_path__ + \"static/media/info.dffb9c37.svg\";","import React from \"react\";\r\nimport $ from \"jquery\";\r\n\r\nimport IconGreenSortingDown from \"../../assets/images/icon_greensortingdown.svg\";\r\nimport IconInfo from \"../../assets/images/info.svg\";\r\n\r\nexport default class SubscriptionAdd extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      transactionForm: {\r\n        revision: { value: \"v1.2beta\", dirtyState: false },\r\n        transactionId: { value: \"\", dirtyState: false },\r\n        oidcUserId: { value: \"\", dirtyState: false }\r\n      }, \r\n      transactionFormIsValid: false,\r\n      errorsForm : {},\r\n    }\r\n  }\r\n  /* istanbul ignore next */\r\n\r\n  handleFormData(e) {\r\n    let currentForm = Object.assign({}, this.state.transactionForm);\r\n    let fieldName = e.target.name;\r\n    let updatedValue = e.target.value;\r\n    currentForm.oidcUserId.value = updatedValue;\r\n    currentForm.oidcUserId.dirtyState = true;\r\n\r\n    this.setState({\r\n      transactionForm: currentForm\r\n    });\r\n    this.handleFormValidation();\r\n\r\n  }\r\n\r\n  handleFormValidation(){\r\n    let formData  = this.state.transactionForm;\r\n    let formIsValid = true;\r\n    let errors = {};\r\n    let oidcUserId = formData.oidcUserId;\r\n\r\n    if(oidcUserId.value.trim() === \"\"){\r\n      if (oidcUserId.dirtyState) {\r\n        errors.oidcUserId = \"Please enter SSO\";\r\n      }\r\n      formIsValid = false;\r\n    }\r\n    this.setState({\r\n      errorsForm:errors,\r\n      transactionFormIsValid: formIsValid\r\n    })\r\n  }\r\n  \r\n  shareSubscription(){\r\n    this.props.showGlobalMessage(\r\n      true,\r\n      true,\r\n      \"Please wait...\",\r\n      \"custom-success\"\r\n    );\r\n    let currentForm = Object.assign({}, this.state.transactionForm);\r\n    let prepareData = {};\r\n    let url = this.props.baseUrl + currentForm.revision.value +\"/trs/add/oidc-user-id\";\r\n   \r\n    prepareData.trid  = currentForm.transactionId.value;\r\n    prepareData.oidcUserId = currentForm.oidcUserId.value;\r\n    prepareData.revision = currentForm.revision.value;\r\n    \r\n\r\n    console.log(prepareData);\r\n    fetch(url, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: \"Bearer \" + this.props.authToken,\r\n      },\r\n      body: JSON.stringify(prepareData),\r\n    })\r\n      .then((response) => {\r\n        if (response.status === 200) {\r\n          //this.snapshotUpdate();\r\n          response.json().then((respData) => {\r\n            respData = {\r\n              errorStatus: {\r\n                status: \"ok\",\r\n              },\r\n            };\r\n            if (respData.errorStatus.status == \"ok\") {\r\n              this.props.showGlobalMessage(\r\n                false,\r\n                true,\r\n                \"Record saved successfully\",\r\n                \"custom-success\"\r\n              );\r\n              setTimeout(() => {\r\n                this.props.hideGlobalMessage();\r\n                let transactionForm =  {\r\n                  revision: { value: \"v1.2beta\", dirtyState: false },\r\n                  transactionId: { value: \"\", dirtyState: false },\r\n                  oidcUserId: { value: \"\", dirtyState: false }\r\n                };\r\n                this.setState({\r\n                  transactionForm: transactionForm,\r\n                  transactionFormIsValid: false,\r\n                });\r\n              }, 2000);\r\n            } else {\r\n              this.props.showGlobalMessage(\r\n                true,\r\n                true,\r\n                respData.errorStatus.statusMsg,\r\n                \"custom-danger\"\r\n              );\r\n              setTimeout(() => {\r\n                this.props.hideGlobalMessage();\r\n              }, 2000);\r\n            }\r\n          });\r\n        } else {\r\n          this.props.showGlobalMessage(\r\n            true,\r\n            true,\r\n            \"Please try after sometime\",\r\n            \"custom-danger\"\r\n          );\r\n          setTimeout(() => {\r\n            this.props.hideGlobalMessage();\r\n          }, 2000);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        this.props.showGlobalMessage(\r\n          true,\r\n          true,\r\n          \"Please try after sometime\",\r\n          \"custom-danger\"\r\n        );\r\n        setTimeout(() => {\r\n          this.props.hideGlobalMessage();\r\n        }, 2000);\r\n      }); \r\n  }\r\n  /* istanbul ignore next */\r\n  render() {\r\n    /* jshint ignore:start */\r\n    /* istanbul ignore next */\r\n    return (\r\n      /* istanbul ignore next */\r\n\r\n      <div className=\"centered-div-header\">\r\n        <div className=\"row maintainagentcreate-header\">\r\n          <div className=\"col-md-12\">\r\n            <h6 id=\"maintainlicenseCreate-title\">\r\n              Share Subscription{\" \"}\r\n              <small>\r\n                One Subscription ID can be share among your team.\r\n              </small>\r\n            </h6>\r\n          </div>\r\n        </div>\r\n        <hr></hr>\r\n        <div className=\"changeable-form subscription-form\">\r\n          <div className=\"row\">\r\n            <div className=\"col-sm-6\">\r\n              <div className=\"col-sm-12 label required\">Subscription ID</div>\r\n              <div className=\"col-sm-12 mb-2\">\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control form-control-sm\"\r\n                  name=\"licenseId\"\r\n                  readOnly={true}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"col-sm-6\">\r\n              <div className=\"col-sm-12 label required\">\r\n                SSO\r\n                <span className=\"float-right help-text\">\r\n                  <img\r\n                    alt=\"info\"\r\n                    src={IconInfo}\r\n                    data-toggle=\"popover\"\r\n                    data-trigger=\"hover\"\r\n                    data-placement=\"top\"\r\n                  />\r\n                </span>\r\n              </div>\r\n              <div className=\"col-sm-12 mb-2\">\r\n                <input\r\n                  type=\"text\"\r\n                  autoComplete=\"off\"\r\n                  className=\"form-control form-control-sm\"\r\n                  name=\"sso\"\r\n                  onChange={(event) => {\r\n                    this.handleFormData(event);\r\n                  }}\r\n                />\r\n                <small className=\"text-danger\">\r\n                  {this.state.errorsForm[\"oidcUserId\"]}\r\n                </small>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"row\">\r\n                    <div className=\"col-sm-12 mb-2 text-center\">\r\n                      <button\r\n                        id=\"create-subscription-btn\"\r\n                        disabled={!this.state.transactionFormIsValid}\r\n                        onClick={this.shareSubscription.bind(this)}\r\n                        className=\"btn btn-sm customize-view-btn\"\r\n                      >\r\n                        CREATE SUBCRIPTION\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n        </div>\r\n      </div>\r\n    );\r\n    /* jshint ignore:end */\r\n  }\r\n}\r\n"],"sourceRoot":""}