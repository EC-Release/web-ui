{"version":3,"sources":["../node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","assets/images/icon_greensortingdown.svg","assets/images/copy.svg","Maintain/Maintainagentcreate.js"],"names":["_arrayLikeToArray","arr","len","length","i","arr2","Array","_unsupportedIterableToArray","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","from","test","_createForOfIteratorHelper","Symbol","iterator","isArray","F","s","done","value","e","_e","f","TypeError","it","err","normalCompletion","didErr","step","next","_e2","_toConsumableArray","arrayLikeToArray","iter","unsupportedIterableToArray","module","exports","Maintainagentcreate","props","state","agentForm","agentMode","dirtyState","gateway","businessId","businessName","requestor","requestedDate","customerEmail","bucAnd","vpc","debugMode","subscriptionId","ecVersion","errorsAgentForm","agentFormIsValid","serverForm","mode","agentId","type","group","clientId","clientSecret","duration","OAuth2","host","zone","serviceUrl","remoteHost","remotePort","proxy","noproxy","allowPlugIn","plugIn","hca","os","errorsServerForm","serverFormIsValid","clientForm","localPort","targetId","errorsClientForm","clientFormIsValid","xclientForm","errorsXClientForm","xclientFormIsValid","xserverForm","errorsXServerForm","xserverFormIsValid","subscriptions","agentModeButtons","text","gateways","id","businesses","ecVersions","ecVersionIndex","groups","ecSubVersions","ecVersionId","osTypes","plugIns","environments","operatingSystems","isTesting","keyName","setTimeout","$","popover","this","enableToolTip","assign","setState","selectedOs","showGlobalMessage","sessionStorage","getItem","respData","JSON","parse","allData","subscriptionData","groupData","keys","forEach","key","push","individualData","parent","hideGlobalMessage","newAgentMode","currentAgentForm","selectedSubscriptionId","selectedSubscription","filter","serviceUri","clientSc","uaaUrl","fetch","baseUrl","method","headers","Accept","Authorization","authToken","then","response","status","json","errorStatus","data","selectedGroupId","groupId","changeAidForServer","changeAidTidForClient","glist","modifiedGateways","gatewayKey","selectedGateway","indexGateway","cfURL","modifiedCfUrlObj","cfURLSplit","split","search","newCfURL","join","selectedGroup","ids","tid","aid","fieldName","target","updatedValue","checked","handleAgentFormValidation","currentFormData","businessIdValue","businessNameValue","businessNameDirtyState","requestorValue","requestorDirtyState","requestedDateValue","requestedDateDirtyState","customerEmailValue","customerEmailDirtyState","bucAndValue","bucAndDirtyState","formIsValid","errors","trim","currentServerForm","durationAfterValidityCheck","validity","valid","remotePortAfterValidityCheck","options","l","selected","hcaAfterValidityCheck","handleServerFormValidation","handleXServerFormValidation","groupValue","groupDirtyState","clientIdValue","clientIdDirtyState","OAuth2Value","OAuth2DirtyState","remoteHostValue","remoteHostDirtyState","handleXClientFormValidation","agentIdValue","agentIdDirtyState","clientSecretValue","clientSecretDirtyState","durationValue","durationDirtyState","zoneValue","zoneDirtyState","serviceUrlValue","serviceUrlDirtyState","remotePortValue","remotePortDirtyState","allowPlugInValue","plugInValue","plugInDirtyState","hcaValue","hcaDirtyState","urlRegExp","currentClientForm","localPortAfterValidityCheck","handleClientFormValidation","localPortValue","localPortDirtyState","targetIdValue","targetIdDirtyState","commandData","showModal","className","action","prepareData","agentFormData","modalHeading","buttons","serverFormData","mod","toLowerCase","dbg","grp","cid","csc","dur","parseInt","oa2","hst","zon","cps","sst","rht","rpt","pxy","nopxy","plg","statePlugIn","indexOf","body","stringify","setItem","selectedHost","vln","tls","blob","Blob","window","navigator","msSaveOrOpenBlob","msSaveBlob","elem","document","createElement","href","URL","createObjectURL","download","appendChild","click","removeChild","catch","console","log","xClientFormData","XClientForm","clientFormData","lpt","formName","currentForm","map","agentModeButton","buttonIndex","onClick","handleChangeAgentMode","bind","onChange","event","handleAgentFormData","htmlFor","subscription","subscriptionIndex","licenseId","alt","src","IconGreenSortingDown","disabled","defaultValue","handleServerFormData","groupIndex","showHideField","title","autoComplete","pattern","gatewayIndex","osIndex","multiple","style","height","plugInIndex","CopyIcon","copyFromClientToServer","saveFile","downloadFile","handleClientFormData","copyFromServerToClient","handleXServerFormData","copyFromXClientToXServer","handleXClientFormData","copyFromXServerToXClient","React","Component"],"mappings":"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","file":"static/js/10.3e149910.chunk.js","sourcesContent":["export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(n);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","import unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nexport default function _createForOfIteratorHelper(o) {\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (o = unsupportedIterableToArray(o))) {\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var it,\n      normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","module.exports = __webpack_public_path__ + \"static/media/icon_greensortingdown.7d91f50e.svg\";","module.exports = __webpack_public_path__ + \"static/media/copy.00b333c3.svg\";","import React from \"react\";\nimport $ from \"jquery\";\n\nimport IconGreenSortingDown from \"../assets/images/icon_greensortingdown.svg\";\nimport CopyIcon from \"../assets/images/copy.svg\";\n\nexport default class Maintainagentcreate extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      agentForm: {\n        agentMode: { value: 2, dirtyState: false },\n        gateway: { value: \"\", dirtyState: false },\n        businessId: { value: 0, dirtyState: false },\n        businessName: { value: \"\", dirtyState: false },\n        requestor: { value: \"\", dirtyState: false },\n        requestedDate: { value: \"\", dirtyState: false },\n        customerEmail: { value: \"\", dirtyState: false },\n        bucAnd: { value: \"\", dirtyState: false },\n        vpc: { value: \"\", dirtyState: false },\n        debugMode: { value: true, dirtyState: false },\n        subscriptionId: { value: \"\", dirtyState: false },\n        ecVersion: { value: \"\", dirtyState: false },\n      },\n      errorsAgentForm: {},\n      agentFormIsValid: false,\n      serverForm: {\n        mode: \"SERVER\",\n        agentId: { value: \"\", dirtyState: false, type: \"password\" },\n        group: { value: \"\", dirtyState: false },\n        clientId: { value: \"\", dirtyState: false },\n        clientSecret: { value: \"\", dirtyState: false, type: \"password\" },\n        duration: { value: \"\", dirtyState: false },\n        OAuth2: { value: \"\", dirtyState: false },\n        host: { value: \"\", dirtyState: false },\n        zone: { value: \"\", dirtyState: false },\n        serviceUrl: { value: \"\", dirtyState: false },\n        remoteHost: { value: \"\", dirtyState: false },\n        remotePort: { value: \"\", dirtyState: false },\n        proxy: { value: \"\", dirtyState: false },\n        noproxy: { value: \"\", dirtyState: false },\n        allowPlugIn: { value: false, dirtyState: false },\n        plugIn: { value: [], dirtyState: false },\n        hca: { value: \"\", dirtyState: false },\n        os: { value: \"\", dirtyState: false },\n      },\n      errorsServerForm: {},\n      serverFormIsValid: false,\n      clientForm: {\n        mode: \"CLIENT\",\n        agentId: { value: \"\", dirtyState: false, type: \"password\" },\n        group: { value: \"\", dirtyState: false },\n        clientId: { value: \"\", dirtyState: false },\n        clientSecret: { value: \"\", dirtyState: false, type: \"password\" },\n        duration: { value: \"\", dirtyState: false },\n        OAuth2: { value: \"\", dirtyState: false },\n        host: { value: \"\", dirtyState: false },\n        localPort: { value: \"\", dirtyState: false },\n        targetId: { value: \"\", dirtyState: false, type: \"password\" },\n        proxy: { value: \"\", dirtyState: false },\n        noproxy: { value: \"\", dirtyState: false },\n        allowPlugIn: { value: false, dirtyState: false },\n        plugIn: { value: [], dirtyState: false },\n        hca: { value: \"\", dirtyState: false },\n        os: { value: \"\", dirtyState: false },\n      },\n      errorsClientForm: {},\n      clientFormIsValid: false,\n      xclientForm: {\n        mode: \"X:CLIENT\",\n        group: { value: \"\", dirtyState: false },\n        clientId: { value: \"\", dirtyState: false },\n        OAuth2: { value: \"\", dirtyState: false },\n        host: { value: \"\", dirtyState: false },\n        remoteHost: { value: \"\", dirtyState: false },\n      },\n      errorsXClientForm: {},\n      xclientFormIsValid: false,\n\n      xserverForm: {\n        mode: \"X:SERVER\",\n        group: { value: \"\", dirtyState: false },\n        clientId: { value: \"\", dirtyState: false },\n        OAuth2: { value: \"\", dirtyState: false },\n        host: { value: \"\", dirtyState: false },\n        remoteHost: { value: \"\", dirtyState: false },\n      },\n      errorsXServerForm: {},\n      xserverFormIsValid: false,\n      subscriptions: [],\n      // API will provide this agentModeButtons\n      agentModeButtons: [\n        { text: \"SERVER\", value: 2 },\n        { text: \"CLIENT\", value: 3 },\n        { text: \"X:SERVER\", value: 4 },\n        { text: \"X:CLIENT\", value: 5 },\n      ],\n      /* istanbul ignore next */\n      // API will provide this gateways\n      gateways: [\n        { name: \"Choose Gateway...\", id: 100 },\n        { name: \"gateway-03123012\", id: 101 },\n        { name: \"gateway-31034216\", id: 102 },\n        { name: \"gateway-03130357\", id: 103 },\n      ],\n      // API will provide this businesses\n      businesses: [\n        { name: \"Aviation\", id: \"1\" },\n        { name: \"Power\", id: \"2\" },\n        { name: \"Capital\", id: \"3\" },\n        { name: \"External\", id: \"4\" },\n      ],\n      // API will provide this ecVersions\n      ecVersions: [\n        { ecVersion: \"v1.hokkaido.214.lib\", ecVersionIndex: \"214\" },\n        { ecVersion: \"v1.hokkaido.213.lib\", ecVersionIndex: \"213\" },\n        { ecVersion: \"v1beta.fukuoka.1728.lib\", ecVersionIndex: \"212\" },\n      ],\n      groups: [],\n      // API will provide this ecSubVersions\n      ecSubVersions: [\n        { name: \"v1.hokkaido.212 stable\", id: \"1\", ecVersionId: \"1\" },\n        { name: \"v1beta.fukuoka.1724\", id: \"2\", ecVersionId: \"2\" },\n      ],\n      // API will provide this osTypes\n      osTypes: [\n        { name: \"Linux\", id: \"1\" },\n        { name: \"Windows\", id: \"2\" },\n        { name: \"Solaris\", id: \"3\" },\n        { name: \"MAC\", id: \"4\" },\n      ],\n      // API will provide this plugIns\n      plugIns: [\n        { name: \"VLN\", id: \"vln\" },\n        { name: \"TLS\", id: \"tls\" },\n      ],\n      // API will provide this environments\n      environments: [\n        { name: \"CF\", id: \"cf\" },\n        { name: \"AWS\", id: \"aws\" },\n      ],\n      operatingSystems: [\n        { name: \"Linux\", id: \"linux\" },\n        { name: \"Windows\", id: \"windows\" },\n        { name: \"Darwin\", id: \"darwin\" },\n      ],\n      isTesting: false,\n      keyName: \"\",\n    };\n  }\n\n  enableToolTip() {\n    setTimeout(() => {\n      $('[data-toggle=\"popover\"]').popover(); // For tooltips\n    }, 1000);\n  }\n  /* istanbul ignore next */\n  componentDidMount() {\n    this.enableToolTip();\n    let businesses = [...this.state.businesses];\n    let agentForm = Object.assign({}, this.state.agentForm);\n    if (businesses.length > 0) {\n      agentForm.businessId.value = businesses[0].id;\n      this.setState({\n        agentForm: agentForm,\n      });\n    }\n\n    if (this.state.operatingSystems.length > 0) {\n      let selectedOs = this.state.operatingSystems[0].id;\n      let serverForm = Object.assign({}, this.state.serverForm);\n      let clientForm = Object.assign({}, this.state.clientForm);\n      serverForm.os.value = selectedOs;\n      clientForm.os.value = selectedOs;\n      this.setState({\n        serverForm: serverForm,\n        clientForm: clientForm,\n      });\n    }\n\n    // Subscription list start\n\n    this.props.showGlobalMessage(\n      true,\n      true,\n      \"Please wait...\",\n      \"custom-success\"\n    );\n    if (sessionStorage.getItem(\"snapshotData\") !== null) {\n      let respData = JSON.parse(sessionStorage.getItem(\"snapshotData\"));\n      let allData = [];\n      let subscriptionData = [];\n      let groupData = [];\n      Object.keys(respData).forEach((key) => {\n        allData.push(respData[key]);\n      });\n      for (let individualData of allData) {\n        if (individualData.parent) {\n          if (\n            individualData.parent === \"ab2a2691-a563-486c-9883-5111ff36ba9b\"\n          ) {\n            subscriptionData.push(individualData);\n          }\n          if (\n            individualData.parent === \"f894e5a8-0f9b-46ca-8b74-57e94610d731\"\n          ) {\n            groupData.push(individualData);\n          }\n        }\n      }\n      this.setState({ keyName: \"[\" + groupData.length + \"]\" });\n      if (subscriptionData.length < 0) {\n        subscriptionData = [];\n      }\n      this.setState({\n        subscriptions: subscriptionData,\n        groups: groupData,\n      });\n      this.props.hideGlobalMessage();\n    } else {\n      this.props.showGlobalMessage(\n        true,\n        true,\n        \"Please try after sometime\",\n        \"custom-danger\"\n      );\n      setTimeout(() => {\n        this.props.hideGlobalMessage();\n      }, 2000);\n    }\n\n    // Subscription list end\n  }\n\n  /* istanbul ignore next */\n  handleChangeAgentMode(newAgentMode) {\n    let currentAgentForm = Object.assign({}, this.state.agentForm);\n    currentAgentForm.agentMode.value = newAgentMode;\n\n    this.setState({\n      agentForm: currentAgentForm,\n    });\n    this.enableToolTip();\n  }\n\n  /* istanbul ignore next */\n  changeFormAutofill(selectedSubscriptionId) {\n    let subscriptions = this.state.subscriptions;\n    let serverForm = this.state.serverForm;\n    let clientForm = this.state.clientForm;\n    if (selectedSubscriptionId !== \"\") {\n      let selectedSubscription = subscriptions.filter(function (o) {\n        return o.subscriptionId === selectedSubscriptionId;\n      });\n\n      serverForm.zone.value = selectedSubscriptionId;\n      serverForm.serviceUrl.value = selectedSubscription[0].serviceUri;\n      serverForm.clientId.value = selectedSubscription[0].clientId;\n      serverForm.clientSecret.value = selectedSubscription[0].clientSc;\n      serverForm.OAuth2.value = selectedSubscription[0].uaaUrl + \"/oauth/token\";\n\n      clientForm.clientId.value = selectedSubscription[0].clientId;\n      clientForm.clientSecret.value = selectedSubscription[0].clientSc;\n      clientForm.OAuth2.value = selectedSubscription[0].uaaUrl + \"/oauth/token\";\n\n      fetch(\n        this.props.baseUrl +\n          \"/groupList?subscriptionID=\" +\n          selectedSubscriptionId,\n        {\n          //this.props.baseUrl + '/groupList?subscriptionID='+selectedSubscriptionId\n          method: \"GET\",\n          headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\",\n            Authorization: \"Bearer \" + this.props.authToken,\n          },\n        }\n      ).then((response) => {\n        if (response.status === 200) {\n          response.json().then((respData) => {\n            if (respData.errorStatus.status === \"ok\") {\n              let groups = respData.data;\n              if (groups.length > 0) {\n                let selectedGroup = groups[0];\n                let selectedGroupId = selectedGroup.groupId;\n                serverForm.group.value = selectedGroupId;\n                clientForm.group.value = selectedGroupId;\n                this.setState({\n                  groups: groups,\n                  serverForm: serverForm,\n                  clientForm: clientForm,\n                });\n                this.changeAidForServer(selectedGroupId);\n                this.changeAidTidForClient(selectedGroupId);\n              }\n            }\n          });\n        }\n      });\n    }\n\n    fetch(\n      this.props.baseUrl +\n        \"/gatewayList?subscriptionID=\" +\n        selectedSubscriptionId,\n      {\n        //this.props.baseUrl + '/groupList?subscriptionID='+selectedSubscriptionId\n        method: \"GET\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n          Authorization: \"Bearer \" + this.props.authToken,\n        },\n      }\n    ).then((response) => {\n      if (response.status === 200) {\n        response.json().then((respData) => {\n          if (respData.errorStatus.status === \"ok\") {\n            let gateways = respData.data.glist;\n            let modifiedGateways = [];\n            let gatewayKey = 0;\n            let selectedGateway = \"\";\n            for (let indexGateway in gateways) {\n              let cfURL = gateways[indexGateway].cfURL;\n              if (cfURL !== \"\") {\n                let modifiedCfUrlObj = {};\n                let cfURLSplit = cfURL.split(\"://\");\n                if (cfURLSplit[0].search(\"https\") !== -1) {\n                  cfURLSplit[0] = \"wss\";\n                } else {\n                  cfURLSplit[0] = \"ws\";\n                }\n                let newCfURL = cfURLSplit.join(\"://\");\n                newCfURL += \"/agent\";\n                modifiedCfUrlObj.id = newCfURL;\n                modifiedCfUrlObj.name = newCfURL;\n                modifiedGateways.push(modifiedCfUrlObj);\n                if (gatewayKey === 0) {\n                  selectedGateway = newCfURL;\n                }\n                gatewayKey++;\n              }\n            }\n\n            clientForm.host.value = selectedGateway;\n            serverForm.host.value = selectedGateway;\n            this.setState({\n              gateways: modifiedGateways,\n              clientForm: clientForm,\n              serverForm: serverForm,\n            });\n          }\n        });\n      }\n    });\n  }\n\n  /* istanbul ignore next */\n  changeAidForServer(selectedGroupId) {\n    if (selectedGroupId !== \"\") {\n      let groups = this.state.groups;\n      let serverForm = this.state.serverForm;\n      let selectedGroup = groups.filter(function (o) {\n        return o.groupId === selectedGroupId;\n      });\n      serverForm.agentId.value = selectedGroup[0].ids.tid;\n      this.setState({\n        serverForm: serverForm,\n      });\n    }\n  }\n\n  /* istanbul ignore next */\n  changeAidTidForClient(selectedGroupId) {\n    if (selectedGroupId !== \"\") {\n      let groups = this.state.groups;\n      let clientForm = this.state.clientForm;\n      let selectedGroup = groups.filter(function (o) {\n        return o.groupId === selectedGroupId;\n      });\n      clientForm.agentId.value = selectedGroup[0].ids.aid;\n      clientForm.targetId.value = selectedGroup[0].ids.tid;\n      this.setState({\n        clientForm: clientForm,\n      });\n    }\n  }\n\n  /* istanbul ignore next */\n  handleAgentFormData(e) {\n    let fieldName = e.target.name;\n    let updatedValue =\n      e.target.type === \"checkbox\" ? e.target.checked : e.target.value;\n    let currentAgentForm = Object.assign({}, this.state.agentForm);\n\n    if (fieldName === \"subscriptionId\") {\n      currentAgentForm.subscriptionId.value = updatedValue;\n      currentAgentForm.subscriptionId.dirtyState = true;\n      //  this.changeFormAutofill(updatedValue);\n    } else if (fieldName === \"ecVersion\") {\n      currentAgentForm.ecVersion.value = updatedValue;\n      currentAgentForm.ecVersion.dirtyState = true;\n    } else if (fieldName === \"debugMode\") {\n      currentAgentForm.debugMode.value = updatedValue;\n      currentAgentForm.debugMode.dirtyState = true;\n    }\n\n    this.setState({\n      agentForm: currentAgentForm,\n    });\n    this.handleAgentFormValidation();\n  }\n\n  /* istanbul ignore next */\n  handleAgentFormValidation() {\n    let currentFormData = this.state.agentForm;\n    let businessIdValue = currentFormData.businessId.value;\n    let businessNameValue = currentFormData.businessName.value;\n    let businessNameDirtyState = currentFormData.businessName.dirtyState;\n    let requestorValue = currentFormData.requestor.value;\n    let requestorDirtyState = currentFormData.requestor.dirtyState;\n    let requestedDateValue = currentFormData.requestedDate.value;\n    let requestedDateDirtyState = currentFormData.requestedDate.dirtyState;\n    let customerEmailValue = currentFormData.customerEmail.value;\n    let customerEmailDirtyState = currentFormData.customerEmail.dirtyState;\n    let bucAndValue = currentFormData.bucAnd.value;\n    let bucAndDirtyState = currentFormData.bucAnd.dirtyState;\n    let formIsValid = true;\n    let errors = {};\n\n    if (businessIdValue === \"\") {\n      errors.businessId = \"Please select Business\";\n      formIsValid = false;\n    }\n\n    if (businessIdValue === 0) {\n      if (businessNameValue.trim() === \"\") {\n        if (businessNameDirtyState) {\n          errors.businessName = \"Please enter Business Name\";\n        }\n        formIsValid = false;\n      }\n    }\n\n    if (requestorValue.trim() === \"\") {\n      if (requestorDirtyState) {\n        errors.requestor = \"Please enter Requestor\";\n      }\n      formIsValid = false;\n    }\n\n    if (requestedDateValue.trim() === \"\") {\n      if (requestedDateDirtyState) {\n        errors.requestedDate = \"Please enter Requested Date\";\n      }\n      formIsValid = false;\n    }\n\n    if (customerEmailValue.trim() === \"\") {\n      if (customerEmailDirtyState) {\n        errors.customerEmail = \"Please enter Customer Email\";\n      }\n      formIsValid = false;\n    }\n\n    if (bucAndValue.trim() === \"\") {\n      if (bucAndDirtyState) {\n        errors.bucAnd = \"Please enter BUC/AND\";\n      }\n      formIsValid = false;\n    }\n\n    this.setState({\n      agentFormIsValid: formIsValid,\n      errorsAgentForm: errors,\n    });\n  }\n\n  /* istanbul ignore next */\n  handleServerFormData(e) {\n    let fieldName = e.target.name;\n    let updatedValue =\n      e.target.type === \"checkbox\" ? e.target.checked : e.target.value;\n    let currentServerForm = Object.assign({}, this.state.serverForm);\n\n    if (fieldName === \"agentId\") {\n      if (updatedValue.length > 6) {\n        updatedValue = currentServerForm.agentId.value;\n      }\n      currentServerForm.agentId.value = updatedValue;\n      currentServerForm.agentId.dirtyState = true;\n    } else if (fieldName === \"group\") {\n      currentServerForm.group.value = updatedValue;\n      currentServerForm.group.dirtyState = true;\n      //  this.changeAidForServer(updatedValue);\n    } else if (fieldName === \"clientId\") {\n      currentServerForm.clientId.value = updatedValue;\n      currentServerForm.clientId.dirtyState = true;\n    } else if (fieldName === \"clientSecret\") {\n      currentServerForm.clientSecret.value = updatedValue;\n      currentServerForm.clientSecret.dirtyState = true;\n    } else if (fieldName === \"duration\") {\n      let durationAfterValidityCheck = e.target.validity.valid\n        ? updatedValue\n        : currentServerForm.duration.value;\n      if (durationAfterValidityCheck.length > 4) {\n        durationAfterValidityCheck = currentServerForm.duration.value;\n      }\n      currentServerForm.duration.value = durationAfterValidityCheck;\n      currentServerForm.duration.dirtyState = true;\n    } else if (fieldName === \"OAuth2\") {\n      currentServerForm.OAuth2.value = updatedValue;\n      currentServerForm.OAuth2.dirtyState = true;\n    } else if (fieldName === \"host\") {\n      currentServerForm.host.value = updatedValue;\n      currentServerForm.host.dirtyState = true;\n    } else if (fieldName === \"zone\") {\n      if (updatedValue.length > 36) {\n        updatedValue = currentServerForm.zone.value;\n      }\n      currentServerForm.zone.value = updatedValue;\n      currentServerForm.zone.dirtyState = true;\n    } else if (fieldName === \"serviceUrl\") {\n      currentServerForm.serviceUrl.value = updatedValue;\n      currentServerForm.serviceUrl.dirtyState = true;\n    } else if (fieldName === \"remoteHost\") {\n      currentServerForm.remoteHost.value = updatedValue;\n      currentServerForm.remoteHost.dirtyState = true;\n    } else if (fieldName === \"remotePort\") {\n      let remotePortAfterValidityCheck = e.target.validity.valid\n        ? updatedValue\n        : currentServerForm.remotePort.value;\n      if (remotePortAfterValidityCheck.length > 4) {\n        remotePortAfterValidityCheck = currentServerForm.remotePort.value;\n      }\n      currentServerForm.remotePort.value = remotePortAfterValidityCheck;\n      currentServerForm.remotePort.dirtyState = true;\n    } else if (fieldName === \"proxy\") {\n      currentServerForm.proxy.value = updatedValue;\n      currentServerForm.proxy.dirtyState = true;\n    } else if (fieldName === \"noproxy\") {\n      currentServerForm.noproxy.value = updatedValue;\n      currentServerForm.noproxy.dirtyState = true;\n    } else if (fieldName === \"allowPlugIn\") {\n      currentServerForm.allowPlugIn.value = updatedValue;\n      currentServerForm.allowPlugIn.dirtyState = true;\n    } else if (fieldName === \"plugIn\") {\n      let options = e.target.options;\n      let value = [];\n      for (let i = 0, l = options.length; i < l; i++) {\n        if (options[i].selected) {\n          value.push(options[i].value);\n        }\n      }\n      currentServerForm.plugIn.value = value;\n      currentServerForm.plugIn.dirtyState = true;\n    } else if (fieldName === \"hca\") {\n      let hcaAfterValidityCheck = e.target.validity.valid\n        ? updatedValue\n        : currentServerForm.hca.value;\n      if (hcaAfterValidityCheck.length > 4) {\n        hcaAfterValidityCheck = currentServerForm.hca.value;\n      }\n      currentServerForm.hca.value = hcaAfterValidityCheck;\n      currentServerForm.hca.dirtyState = true;\n    } else if (fieldName === \"os\") {\n      currentServerForm.os.value = updatedValue;\n      currentServerForm.os.dirtyState = true;\n    }\n\n    this.setState({\n      serverForm: currentServerForm,\n    });\n\n    this.handleServerFormValidation();\n  }\n\n  /* istanbul ignore next */\n  handleXServerFormData(e) {\n    let fieldName = e.target.name;\n    let updatedValue =\n      e.target.type === \"checkbox\" ? e.target.checked : e.target.value;\n    let currentServerForm = Object.assign({}, this.state.xserverForm);\n\n    if (fieldName === \"group\") {\n      currentServerForm.group.value = updatedValue;\n      currentServerForm.group.dirtyState = true;\n      //  this.changeAidForServer(updatedValue);\n    } else if (fieldName === \"clientId\") {\n      currentServerForm.clientId.value = updatedValue;\n      currentServerForm.clientId.dirtyState = true;\n    } else if (fieldName === \"OAuth2\") {\n      currentServerForm.OAuth2.value = updatedValue;\n      currentServerForm.OAuth2.dirtyState = true;\n    } else if (fieldName === \"host\") {\n      currentServerForm.host.value = updatedValue;\n      currentServerForm.host.dirtyState = true;\n    } else if (fieldName === \"remoteHost\") {\n      currentServerForm.remoteHost.value = updatedValue;\n      currentServerForm.remoteHost.dirtyState = true;\n    }\n\n    this.setState({\n      xserverForm: currentServerForm,\n    });\n\n    this.handleXServerFormValidation();\n  }\n\n  /* istanbul ignore next */\n  handleXServerFormValidation() {\n    let currentFormData = this.state.xserverForm;\n\n    let groupValue = currentFormData.group.value;\n    let groupDirtyState = currentFormData.group.dirtyState;\n    let clientIdValue = currentFormData.clientId.value;\n    let clientIdDirtyState = currentFormData.clientId.dirtyState;\n    let OAuth2Value = currentFormData.OAuth2.value;\n    let OAuth2DirtyState = currentFormData.OAuth2.dirtyState;\n    //let hostValue = currentFormData.host.value;\n    //let hostDirtyState = currentFormData.host.dirtyState;\n    let remoteHostValue = currentFormData.remoteHost.value;\n    let remoteHostDirtyState = currentFormData.remoteHost.dirtyState;\n    let formIsValid = true;\n    let errors = {};\n    let urlRegExp =\n      /^(?:(?:https?|ftp):\\/\\/)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:\\/\\S*)?$/;\n\n    if (groupValue.trim() === \"\") {\n      if (groupDirtyState) {\n        errors.group = \"Please enter Group\";\n      }\n      formIsValid = false;\n    }\n\n    if (clientIdValue.trim() === \"\") {\n      if (clientIdDirtyState) {\n        errors.clientId = \"Please enter Client Id\";\n      }\n      formIsValid = false;\n    }\n\n    if (remoteHostValue.trim() === \"\") {\n      if (remoteHostDirtyState) {\n        errors.remoteHost = \"Please enter Remote Host\";\n      }\n      formIsValid = false;\n    }\n    if (OAuth2Value.trim() === \"\") {\n      if (OAuth2DirtyState) {\n        errors.OAuth2 = \"Please enter OAuth2\";\n      }\n      formIsValid = false;\n    } else if (!urlRegExp.test(OAuth2Value)) {\n      if (OAuth2DirtyState) {\n        errors.OAuth2 = \"Please enter valid URL\";\n      }\n      formIsValid = false;\n    }\n\n    this.setState({\n      xserverFormIsValid: formIsValid,\n      errorsXServerForm: errors,\n    });\n  }\n\n  /* istanbul ignore next */\n  handleXClientFormData(e) {\n    let fieldName = e.target.name;\n    let updatedValue =\n      e.target.type === \"checkbox\" ? e.target.checked : e.target.value;\n    let currentServerForm = Object.assign({}, this.state.xclientForm);\n\n    if (fieldName === \"group\") {\n      currentServerForm.group.value = updatedValue;\n      currentServerForm.group.dirtyState = true;\n      //  this.changeAidForServer(updatedValue);\n    } else if (fieldName === \"clientId\") {\n      currentServerForm.clientId.value = updatedValue;\n      currentServerForm.clientId.dirtyState = true;\n    } else if (fieldName === \"OAuth2\") {\n      currentServerForm.OAuth2.value = updatedValue;\n      currentServerForm.OAuth2.dirtyState = true;\n    } else if (fieldName === \"host\") {\n      currentServerForm.host.value = updatedValue;\n      currentServerForm.host.dirtyState = true;\n    } else if (fieldName === \"remoteHost\") {\n      currentServerForm.remoteHost.value = updatedValue;\n      currentServerForm.remoteHost.dirtyState = true;\n    }\n\n    this.setState({\n      xclientForm: currentServerForm,\n    });\n\n    this.handleXClientFormValidation();\n  }\n\n  /* istanbul ignore next */\n  handleXClientFormValidation() {\n    let currentFormData = this.state.xclientForm;\n\n    let groupValue = currentFormData.group.value;\n    let groupDirtyState = currentFormData.group.dirtyState;\n    let clientIdValue = currentFormData.clientId.value;\n    let clientIdDirtyState = currentFormData.clientId.dirtyState;\n    let OAuth2Value = currentFormData.OAuth2.value;\n    let OAuth2DirtyState = currentFormData.OAuth2.dirtyState;\n    //let hostValue = currentFormData.host.value;\n    //let hostDirtyState = currentFormData.host.dirtyState;\n    let remoteHostValue = currentFormData.remoteHost.value;\n    let remoteHostDirtyState = currentFormData.remoteHost.dirtyState;\n    let formIsValid = true;\n    let errors = {};\n    let urlRegExp =\n      /^(?:(?:https?|ftp):\\/\\/)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:\\/\\S*)?$/;\n\n    if (groupValue.trim() === \"\") {\n      if (groupDirtyState) {\n        errors.group = \"Please enter Group\";\n      }\n      formIsValid = false;\n    }\n\n    if (clientIdValue.trim() === \"\") {\n      if (clientIdDirtyState) {\n        errors.clientId = \"Please enter Client Id\";\n      }\n      formIsValid = false;\n    }\n\n    if (remoteHostValue.trim() === \"\") {\n      if (remoteHostDirtyState) {\n        errors.remoteHost = \"Please enter Remote Host\";\n      }\n      formIsValid = false;\n    }\n    if (OAuth2Value.trim() === \"\") {\n      if (OAuth2DirtyState) {\n        errors.OAuth2 = \"Please enter OAuth2\";\n      }\n      formIsValid = false;\n    } else if (!urlRegExp.test(OAuth2Value)) {\n      if (OAuth2DirtyState) {\n        errors.OAuth2 = \"Please enter valid URL\";\n      }\n      formIsValid = false;\n    }\n\n    this.setState({\n      xclientFormIsValid: formIsValid,\n      errorsXClientForm: errors,\n    });\n  }\n\n  /* istanbul ignore next */\n  handleServerFormValidation() {\n    let currentFormData = this.state.serverForm;\n    let agentIdValue = currentFormData.agentId.value;\n    let agentIdDirtyState = currentFormData.agentId.dirtyState;\n    let groupValue = currentFormData.group.value;\n    let groupDirtyState = currentFormData.group.dirtyState;\n    let clientIdValue = currentFormData.clientId.value;\n    let clientIdDirtyState = currentFormData.clientId.dirtyState;\n    let clientSecretValue = currentFormData.clientSecret.value;\n    let clientSecretDirtyState = currentFormData.clientSecret.dirtyState;\n    let durationValue = currentFormData.duration.value;\n    let durationDirtyState = currentFormData.duration.dirtyState;\n    let OAuth2Value = currentFormData.OAuth2.value;\n    let OAuth2DirtyState = currentFormData.OAuth2.dirtyState;\n    //let hostValue = currentFormData.host.value;\n    //let hostDirtyState = currentFormData.host.dirtyState;\n    let zoneValue = currentFormData.zone.value;\n    let zoneDirtyState = currentFormData.zone.dirtyState;\n    let serviceUrlValue = currentFormData.serviceUrl.value;\n    let serviceUrlDirtyState = currentFormData.serviceUrl.dirtyState;\n    let remoteHostValue = currentFormData.remoteHost.value;\n    let remoteHostDirtyState = currentFormData.remoteHost.dirtyState;\n    let remotePortValue = currentFormData.remotePort.value;\n    let remotePortDirtyState = currentFormData.remotePort.dirtyState;\n    let allowPlugInValue = currentFormData.allowPlugIn.value;\n    //let allowPlugInDirtyState = currentFormData.allowPlugIn.dirtyState;\n    let plugInValue = currentFormData.plugIn.value;\n    let plugInDirtyState = currentFormData.plugIn.dirtyState;\n    let hcaValue = currentFormData.hca.value;\n    let hcaDirtyState = currentFormData.hca.dirtyState;\n    let formIsValid = true;\n    let errors = {};\n    let urlRegExp =\n      /^(?:(?:https?|ftp):\\/\\/)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:\\/\\S*)?$/;\n\n    if (agentIdValue.trim() === \"\") {\n      if (agentIdDirtyState) {\n        errors.agentId = \"Please enter Agent Id\";\n      }\n      formIsValid = false;\n    } else if (agentIdValue.length < 6) {\n      if (agentIdDirtyState) {\n        errors.agentId = \"Agent Id must have 6 character\";\n      }\n      formIsValid = false;\n    }\n\n    if (groupValue.trim() === \"\") {\n      if (groupDirtyState) {\n        errors.group = \"Please enter Group\";\n      }\n      formIsValid = false;\n    }\n\n    if (clientIdValue.trim() === \"\") {\n      if (clientIdDirtyState) {\n        errors.clientId = \"Please enter Client Id\";\n      }\n      formIsValid = false;\n    }\n\n    if (clientSecretValue.trim() === \"\") {\n      if (clientSecretDirtyState) {\n        errors.clientSecret = \"Please enter Client Secret\";\n      }\n      formIsValid = false;\n    }\n\n    if (durationValue === \"\") {\n      if (durationDirtyState) {\n        errors.duration = \"Please enter Duration in digit\";\n      }\n      formIsValid = false;\n    } else if (durationValue < 1200) {\n      if (durationDirtyState) {\n        errors.duration = \"Duration at least 1200\";\n      }\n      formIsValid = false;\n    }\n\n    if (OAuth2Value.trim() === \"\") {\n      if (OAuth2DirtyState) {\n        errors.OAuth2 = \"Please enter OAuth2\";\n      }\n      formIsValid = false;\n    } else if (!urlRegExp.test(OAuth2Value)) {\n      if (OAuth2DirtyState) {\n        errors.OAuth2 = \"Please enter valid URL\";\n      }\n      formIsValid = false;\n    }\n\n    /*    if(hostValue.trim() === ''){\n            if(hostDirtyState){\n                errors.host = 'Please enter Host';\n            }\n            formIsValid = false;\n        }\n        else if(hostValue.substr(0, 6) !== 'wss://' && hostValue.substr(0, 5) !== 'ws://'){\n            if(hostDirtyState){\n                errors.host = 'Host starts with wss:// or ws://';\n            }\n            formIsValid = false;\n        }\n        else if(hostValue.substr(hostValue.length - 6, 6) !== '/agent'){\n            if(hostDirtyState){\n                errors.host = 'Host ends with /agent';\n            }\n            formIsValid = false;\n        }*/\n\n    if (zoneValue.trim() === \"\") {\n      if (zoneDirtyState) {\n        errors.zone = \"Please enter Zone\";\n      }\n      formIsValid = false;\n    } else if (zoneValue.length < 36) {\n      if (zoneDirtyState) {\n        errors.zone = \"Zone must have 36 character\";\n      }\n      formIsValid = false;\n    }\n\n    if (serviceUrlValue.trim() === \"\") {\n      if (serviceUrlDirtyState) {\n        errors.serviceUrl = \"Please enter Service Url\";\n      }\n      formIsValid = false;\n    } else if (!urlRegExp.test(serviceUrlValue)) {\n      if (serviceUrlDirtyState) {\n        errors.serviceUrl = \"Please enter valid URL\";\n      }\n      formIsValid = false;\n    }\n\n    if (remoteHostValue.trim() === \"\") {\n      if (remoteHostDirtyState) {\n        errors.remoteHost = \"Please enter Remote Host\";\n      }\n      formIsValid = false;\n    }\n\n    if (remotePortValue.trim() === \"\") {\n      if (remotePortDirtyState) {\n        errors.remotePort = \"Please enter Remote Port in digit\";\n      }\n      formIsValid = false;\n    } else if (remotePortValue.length !== 4) {\n      if (remotePortDirtyState) {\n        errors.remotePort = \"Remote Port must have 4 digit\";\n      }\n      formIsValid = false;\n    }\n\n    if (allowPlugInValue) {\n      if (plugInValue.length === 0) {\n        if (plugInDirtyState) {\n          errors.plugIn = \"Please select Plug-In\";\n        }\n        formIsValid = false;\n      }\n    }\n\n    if (hcaValue.trim() === \"\") {\n      if (hcaDirtyState) {\n        errors.hca = \"Please enter Health Port in digit\";\n      }\n      formIsValid = false;\n    } else if (hcaValue.length !== 4) {\n      if (hcaDirtyState) {\n        errors.hca = \"Health Port must have 4 digit\";\n      }\n      formIsValid = false;\n    }\n\n    this.setState({\n      serverFormIsValid: formIsValid,\n      errorsServerForm: errors,\n    });\n  }\n\n  /* istanbul ignore next */\n  handleClientFormData(e) {\n    let fieldName = e.target.name;\n    let updatedValue =\n      e.target.type === \"checkbox\" ? e.target.checked : e.target.value;\n    let currentClientForm = Object.assign({}, this.state.clientForm);\n\n    if (fieldName === \"agentId\") {\n      if (updatedValue.length > 6) {\n        updatedValue = currentClientForm.agentId.value;\n      }\n      currentClientForm.agentId.value = updatedValue;\n      currentClientForm.agentId.dirtyState = true;\n    } else if (fieldName === \"group\") {\n      currentClientForm.group.value = updatedValue;\n      currentClientForm.group.dirtyState = true;\n      //  this.changeAidTidForClient(updatedValue);\n    } else if (fieldName === \"clientId\") {\n      currentClientForm.clientId.value = updatedValue;\n      currentClientForm.clientId.dirtyState = true;\n    } else if (fieldName === \"clientSecret\") {\n      currentClientForm.clientSecret.value = updatedValue;\n      currentClientForm.clientSecret.dirtyState = true;\n    } else if (fieldName === \"duration\") {\n      let durationAfterValidityCheck = e.target.validity.valid\n        ? updatedValue\n        : currentClientForm.duration.value;\n      if (durationAfterValidityCheck.length > 4) {\n        durationAfterValidityCheck = currentClientForm.duration.value;\n      }\n      currentClientForm.duration.value = durationAfterValidityCheck;\n      currentClientForm.duration.dirtyState = true;\n    } else if (fieldName === \"OAuth2\") {\n      currentClientForm.OAuth2.value = updatedValue;\n      currentClientForm.OAuth2.dirtyState = true;\n    } else if (fieldName === \"host\") {\n      currentClientForm.host.value = updatedValue;\n      currentClientForm.host.dirtyState = true;\n    } else if (fieldName === \"localPort\") {\n      let localPortAfterValidityCheck = e.target.validity.valid\n        ? updatedValue\n        : currentClientForm.localPort.value;\n      if (localPortAfterValidityCheck.length > 4) {\n        localPortAfterValidityCheck = currentClientForm.localPort.value;\n      }\n      currentClientForm.localPort.value = localPortAfterValidityCheck;\n      currentClientForm.localPort.dirtyState = true;\n    } else if (fieldName === \"targetId\") {\n      if (updatedValue.length > 6) {\n        updatedValue = currentClientForm.targetId.value;\n      }\n      currentClientForm.targetId.value = updatedValue;\n      currentClientForm.targetId.dirtyState = true;\n    } else if (fieldName === \"proxy\") {\n      currentClientForm.proxy.value = updatedValue;\n      currentClientForm.proxy.dirtyState = true;\n    } else if (fieldName === \"noproxy\") {\n      currentClientForm.noproxy.value = updatedValue;\n      currentClientForm.noproxy.dirtyState = true;\n    } else if (fieldName === \"allowPlugIn\") {\n      currentClientForm.allowPlugIn.value = updatedValue;\n      currentClientForm.allowPlugIn.dirtyState = true;\n    } else if (fieldName === \"plugIn\") {\n      let options = e.target.options;\n      let value = [];\n      for (let i = 0, l = options.length; i < l; i++) {\n        if (options[i].selected) {\n          value.push(options[i].value);\n        }\n      }\n      currentClientForm.plugIn.value = value;\n      currentClientForm.plugIn.dirtyState = true;\n    } else if (fieldName === \"hca\") {\n      let hcaAfterValidityCheck = e.target.validity.valid\n        ? updatedValue\n        : currentClientForm.hca.value;\n      if (hcaAfterValidityCheck.length > 4) {\n        hcaAfterValidityCheck = currentClientForm.hca.value;\n      }\n      currentClientForm.hca.value = hcaAfterValidityCheck;\n      currentClientForm.hca.dirtyState = true;\n    } else if (fieldName === \"os\") {\n      currentClientForm.os.value = updatedValue;\n      currentClientForm.os.dirtyState = true;\n    }\n\n    this.setState({\n      clientForm: currentClientForm,\n    });\n\n    this.handleClientFormValidation();\n  }\n\n  /* istanbul ignore next */\n  handleClientFormValidation() {\n    let currentFormData = this.state.clientForm;\n    let agentIdValue = currentFormData.agentId.value;\n    let agentIdDirtyState = currentFormData.agentId.dirtyState;\n    let groupValue = currentFormData.group.value;\n    let groupDirtyState = currentFormData.group.dirtyState;\n    let clientIdValue = currentFormData.clientId.value;\n    let clientIdDirtyState = currentFormData.clientId.dirtyState;\n    let clientSecretValue = currentFormData.clientSecret.value;\n    let clientSecretDirtyState = currentFormData.clientSecret.dirtyState;\n    let durationValue = currentFormData.duration.value;\n    let durationDirtyState = currentFormData.duration.dirtyState;\n    let OAuth2Value = currentFormData.OAuth2.value;\n    let OAuth2DirtyState = currentFormData.OAuth2.dirtyState;\n    //let hostValue = currentFormData.host.value;\n    //let hostDirtyState = currentFormData.host.dirtyState;\n    let localPortValue = currentFormData.localPort.value;\n    let localPortDirtyState = currentFormData.localPort.dirtyState;\n    let targetIdValue = currentFormData.targetId.value;\n    let targetIdDirtyState = currentFormData.targetId.dirtyState;\n    let allowPlugInValue = currentFormData.allowPlugIn.value;\n    let plugInValue = currentFormData.plugIn.value;\n    let plugInDirtyState = currentFormData.plugIn.dirtyState;\n    let hcaValue = currentFormData.hca.value;\n    let hcaDirtyState = currentFormData.hca.dirtyState;\n    let formIsValid = true;\n    let errors = {};\n    let urlRegExp =\n      /^(?:(?:https?|ftp):\\/\\/)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:\\/\\S*)?$/;\n\n    if (agentIdValue.trim() === \"\") {\n      if (agentIdDirtyState) {\n        errors.agentId = \"Please enter Agent Id\";\n      }\n      formIsValid = false;\n    } else if (agentIdValue.length < 6) {\n      if (agentIdDirtyState) {\n        errors.agentId = \"Agent Id must have 6 character\";\n      }\n      formIsValid = false;\n    }\n\n    if (groupValue.trim() === \"\") {\n      if (groupDirtyState) {\n        errors.group = \"Please enter Group\";\n      }\n      formIsValid = false;\n    }\n\n    if (clientIdValue.trim() === \"\") {\n      if (clientIdDirtyState) {\n        errors.clientId = \"Please enter Client Id\";\n      }\n      formIsValid = false;\n    }\n\n    if (clientSecretValue.trim() === \"\") {\n      if (clientSecretDirtyState) {\n        errors.clientSecret = \"Please enter Client Secret\";\n      }\n      formIsValid = false;\n    }\n\n    if (durationValue === \"\") {\n      if (durationDirtyState) {\n        errors.duration = \"Please enter Duration in digit\";\n      }\n      formIsValid = false;\n    } else if (durationValue < 1200) {\n      if (durationDirtyState) {\n        errors.duration = \"Duration at least 1200\";\n      }\n      formIsValid = false;\n    }\n\n    if (OAuth2Value.trim() === \"\") {\n      if (OAuth2DirtyState) {\n        errors.OAuth2 = \"Please enter OAuth2\";\n      }\n      formIsValid = false;\n    } else if (!urlRegExp.test(OAuth2Value)) {\n      if (OAuth2DirtyState) {\n        errors.OAuth2 = \"Please enter valid URL\";\n      }\n      formIsValid = false;\n    }\n\n    if (localPortValue.trim() === \"\") {\n      if (localPortDirtyState) {\n        errors.localPort = \"Please enter Local Port in digit\";\n      }\n      formIsValid = false;\n    } else if (localPortValue.length !== 4) {\n      if (localPortDirtyState) {\n        errors.localPort = \"Local Port must have 4 digit\";\n      }\n      formIsValid = false;\n    }\n\n    if (targetIdValue.trim() === \"\") {\n      if (targetIdDirtyState) {\n        errors.targetId = \"Please enter Target Id\";\n      }\n      formIsValid = false;\n    } else if (targetIdValue.length < 6) {\n      if (targetIdDirtyState) {\n        errors.targetId = \"Target Id must have 6 character\";\n      }\n      formIsValid = false;\n    }\n\n    if (allowPlugInValue) {\n      if (plugInValue.length === 0) {\n        if (plugInDirtyState) {\n          errors.plugIn = \"Please select Plug-In\";\n        }\n        formIsValid = false;\n      }\n    }\n\n    if (hcaValue.trim() === \"\") {\n      if (hcaDirtyState) {\n        errors.hca = \"Please enter Health Port in digit\";\n      }\n      formIsValid = false;\n    } else if (hcaValue.length !== 4) {\n      if (hcaDirtyState) {\n        errors.hca = \"Health Port must have 4 digit\";\n      }\n      formIsValid = false;\n    }\n\n    this.setState({\n      clientFormIsValid: formIsValid,\n      errorsClientForm: errors,\n    });\n  }\n\n  /* istanbul ignore next */\n  copyFromClientToServer() {\n    let currentClientForm = Object.assign({}, this.state.clientForm);\n    let currentServerForm = Object.assign({}, this.state.serverForm);\n\n    currentServerForm.agentId.value = currentClientForm.agentId.value;\n    currentServerForm.group.value = currentClientForm.group.value;\n    currentServerForm.clientId.value = currentClientForm.clientId.value;\n    currentServerForm.clientSecret.value = currentClientForm.clientSecret.value;\n    currentServerForm.duration.value = currentClientForm.duration.value;\n    currentServerForm.OAuth2.value = currentClientForm.OAuth2.value;\n    currentServerForm.host.value = currentClientForm.host.value;\n    currentServerForm.proxy.value = currentClientForm.proxy.value;\n    currentServerForm.noproxy.value = currentClientForm.noproxy.value;\n    currentServerForm.allowPlugIn.value = currentClientForm.allowPlugIn.value;\n    currentServerForm.plugIn.value = currentClientForm.plugIn.value;\n\n    this.setState({\n      serverForm: currentServerForm,\n    });\n\n    this.props.showGlobalMessage(\n      false,\n      true,\n      \"Data copied from client\",\n      \"custom-success\"\n    );\n    setTimeout(() => {\n      this.props.hideGlobalMessage();\n    }, 2000);\n    this.handleServerFormValidation();\n  }\n\n  /* istanbul ignore next */\n  copyFromServerToClient() {\n    let currentServerForm = Object.assign({}, this.state.serverForm);\n    let currentClientForm = Object.assign({}, this.state.clientForm);\n\n    currentClientForm.agentId.value = currentServerForm.agentId.value;\n    currentClientForm.group.value = currentServerForm.group.value;\n    currentClientForm.clientId.value = currentServerForm.clientId.value;\n    currentClientForm.clientSecret.value = currentServerForm.clientSecret.value;\n    currentClientForm.duration.value = currentServerForm.duration.value;\n    currentClientForm.OAuth2.value = currentServerForm.OAuth2.value;\n    currentClientForm.host.value = currentServerForm.host.value;\n    currentClientForm.proxy.value = currentServerForm.proxy.value;\n    currentClientForm.noproxy.value = currentServerForm.noproxy.value;\n    currentClientForm.allowPlugIn.value = currentServerForm.allowPlugIn.value;\n    currentClientForm.plugIn.value = currentServerForm.plugIn.value;\n\n    this.setState({\n      clientForm: currentClientForm,\n    });\n\n    this.props.showGlobalMessage(\n      false,\n      true,\n      \"Data copied from server\",\n      \"custom-success\"\n    );\n    setTimeout(() => {\n      this.props.hideGlobalMessage();\n    }, 2000);\n    this.handleClientFormValidation();\n  }\n\n  /* istanbul ignore next */\n  copyFromXServerToXClient() {\n    let currentServerForm = Object.assign({}, this.state.xserverForm);\n    let currentClientForm = Object.assign({}, this.state.xclientForm);\n\n    currentClientForm.group.value = currentServerForm.group.value;\n    currentClientForm.clientId.value = currentServerForm.clientId.value;\n    currentClientForm.OAuth2.value = currentServerForm.OAuth2.value;\n    currentClientForm.host.value = currentServerForm.host.value;\n\n    this.setState({\n      xclientForm: currentClientForm,\n    });\n\n    this.props.showGlobalMessage(\n      false,\n      true,\n      \"Data copied from x:server\",\n      \"custom-success\"\n    );\n    setTimeout(() => {\n      this.props.hideGlobalMessage();\n    }, 2000);\n    this.handleXClientFormValidation();\n  }\n\n  /* istanbul ignore next */\n  copyFromXClientToXServer() {\n    let currentClientForm = Object.assign({}, this.state.xclientForm);\n    let currentServerForm = Object.assign({}, this.state.xserverForm);\n\n    currentServerForm.group.value = currentClientForm.group.value;\n    currentServerForm.clientId.value = currentClientForm.clientId.value;\n    currentServerForm.OAuth2.value = currentClientForm.OAuth2.value;\n    currentServerForm.host.value = currentClientForm.host.value;\n\n    this.setState({\n      xserverForm: currentServerForm,\n    });\n\n    this.props.showGlobalMessage(\n      false,\n      true,\n      \"Data copied from x:client\",\n      \"custom-success\"\n    );\n    setTimeout(() => {\n      this.props.hideGlobalMessage();\n    }, 2000);\n    this.handleXServerFormValidation();\n  }\n  /* istanbul ignore next */\n  downloadFile(type) {\n    this.props.showGlobalMessage(\n      true,\n      true,\n      \"Please wait...\",\n      \"custom-success\"\n    );\n    let modalHeading = \"Copy and run below command\";\n    let buttons = [\n      {\n        className: \"btn btn-default customize-view-btn\",\n        action: \"closeModal\",\n        text: \"Close\",\n      },\n    ];\n    let commandData = \"\";\n\n    if (type === \"server\" || type === \"client\") {\n      commandData =\n        \" docker run -it -v $(pwd):/root/.ec enterpriseconnect/agent:v1 -cfg config.yml \\n ./agent -cfg config.yml\";\n    } else {\n      commandData =\n        \" docker run -it -v $(pwd):/root/.ec enterpriseconnect/agent:v1 -cfg config.yml \\n ./agent -dec -cfg config.yml\";\n    }\n    this.props.hideGlobalMessage();\n    this.props.showModal(modalHeading, commandData, buttons, true);\n  }\n\n  /* istanbul ignore next */\n  saveFile(type) {\n    this.props.showGlobalMessage(\n      true,\n      true,\n      \"Please wait...\",\n      \"custom-success\"\n    );\n    let prepareData = {};\n    let agentFormData = this.state.agentForm;\n    let modalHeading = \"Copy and run below command\";\n    let buttons = [\n      {\n        className: \"btn btn-default customize-view-btn\",\n        action: \"closeModal\",\n        text: \"Close\",\n      },\n    ];\n    if (type === \"server\") {\n      let serverFormData = Object.assign({}, this.state.serverForm);\n      prepareData.mod = serverFormData.mode.toLowerCase();\n      prepareData.dbg = agentFormData.debugMode.value;\n      prepareData.ecVersion = agentFormData.ecVersion.value;\n      prepareData.aid = serverFormData.agentId.value;\n      prepareData.grp = serverFormData.group.value;\n      prepareData.cid = serverFormData.clientId.value;\n      prepareData.csc = serverFormData.clientSecret.value;\n      prepareData.dur = parseInt(serverFormData.duration.value);\n      prepareData.oa2 = serverFormData.OAuth2.value;\n      prepareData.hst = serverFormData.host.value;\n      prepareData.zon = serverFormData.zone.value;\n      prepareData.cps = 0;\n      prepareData.sst = serverFormData.serviceUrl.value;\n      prepareData.rht = serverFormData.remoteHost.value;\n      prepareData.rpt = serverFormData.remotePort.value;\n      prepareData.pxy = serverFormData.proxy.value;\n      prepareData.nopxy = serverFormData.noproxy.value;\n      prepareData.plg = serverFormData.allowPlugIn.value;\n      prepareData.hca = serverFormData.hca.value;\n      prepareData.os = serverFormData.os.value;\n      prepareData.parent = \"65c77c4f-fdf4-4c6d-a703-48b12cc21b2d\";\n      prepareData.name = \"server\";\n      for (let statePlugIn of this.state.plugIns) {\n        if (serverFormData.plugIn.value.indexOf(statePlugIn.id) !== -1) {\n          prepareData[statePlugIn.id] = true;\n        } else {\n          prepareData[statePlugIn.id] = false;\n        }\n      }\n\n      fetch(this.props.baseUrl + \"generateServerScript\", {\n        method: \"POST\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n          Authorization: \"Bearer \" + this.props.authToken,\n        },\n        body: JSON.stringify(prepareData),\n      })\n        .then((response) => {\n          if (response.status === 200) {\n            response.json().then((respData) => {\n              /* if(respData.errorStatus.status === 'ok'){ */\n              sessionStorage.setItem(\"ServerData\", JSON.stringify(prepareData));\n              let commandData =\n                \" docker run -it -v $(pwd):/root/.ec enterpriseconnect/agent:v1 -cfg config.yml \\n ./agent -cfg config.yml\";\n              this.props.hideGlobalMessage();\n              this.props.showModal(modalHeading, commandData, buttons, true);\n              setTimeout(() => {\n                let selectedOs = \"\";\n                let selectedHost = \"\";\n                if (this.state.operatingSystems.length > 0) {\n                  selectedOs = this.state.operatingSystems[0].id;\n                }\n                if (this.state.gateways.length > 0) {\n                  selectedHost = this.state.gateways[0].id;\n                }\n                let serverForm = {\n                  mode: \"SERVER\",\n                  agentId: {\n                    value: serverFormData.agentId.value,\n                    dirtyState: false,\n                    type: serverFormData.agentId.type,\n                  },\n                  group: {\n                    value: serverFormData.group.value,\n                    dirtyState: false,\n                  },\n                  clientId: {\n                    value: serverFormData.clientId.value,\n                    dirtyState: false,\n                  },\n                  clientSecret: {\n                    value: serverFormData.clientSecret.value,\n                    dirtyState: false,\n                    type: serverFormData.clientSecret.type,\n                  },\n                  duration: { value: \"\", dirtyState: false },\n                  OAuth2: {\n                    value: serverFormData.OAuth2.value,\n                    dirtyState: false,\n                  },\n                  host: { value: selectedHost, dirtyState: false },\n                  zone: { value: serverFormData.zone.value, dirtyState: false },\n                  serviceUrl: {\n                    value: serverFormData.serviceUrl.value,\n                    dirtyState: false,\n                  },\n                  remoteHost: { value: \"\", dirtyState: false },\n                  remotePort: { value: \"\", dirtyState: false },\n                  proxy: { value: \"\", dirtyState: false },\n                  noproxy: { value: \"\", dirtyState: false },\n                  allowPlugIn: { value: false, dirtyState: false },\n                  plugIn: { value: [], dirtyState: false },\n                  hca: { value: \"\", dirtyState: false },\n                  os: { value: selectedOs, dirtyState: false },\n                };\n\n                let filename = \"server.yml\";\n                let data = \"\";\n                if (agentFormData.ecVersion.value === \"v1.hokkaido.212\") {\n                  data =\n                    \"ec-config:\\n  conf:\\n    mod: \" +\n                    serverFormData.mode.toLowerCase() +\n                    \"\\n    zon: \" +\n                    serverFormData.zone.value +\n                    \"\\n    grp: \" +\n                    serverFormData.group.value +\n                    \"\\n    sst: \" +\n                    serverFormData.serviceUrl.value.split(\".io\")[0] +\n                    \".io\" +\n                    \"\\n    hst: \" +\n                    serverFormData.host.value +\n                    \"\\n    dbg: \" +\n                    agentFormData.debugMode.value +\n                    \"\\n    cid: \" +\n                    serverFormData.clientId.value +\n                    \"\\n    csc: \" +\n                    serverFormData.clientSecret.value +\n                    \"\\n    oa2: \" +\n                    serverFormData.OAuth2.value +\n                    \"\\n    dur: \" +\n                    serverFormData.duration.value +\n                    \"\\n    aid: \" +\n                    serverFormData.agentId.value +\n                    \"\\n    rpt: \" +\n                    '\"' +\n                    serverFormData.remotePort.value +\n                    '\"' +\n                    \"\\n    rht: \" +\n                    serverFormData.remoteHost.value +\n                    \"\\n    hca: \" +\n                    '\"' +\n                    prepareData.hca +\n                    '\"';\n                  if (serverFormData.proxy.value.trim() !== \"\") {\n                    data = data + \"\\n    pxy: \" + serverFormData.proxy.value;\n                  }\n                } else {\n                  data =\n                    \"ec-config:\\n  conf:\\n    mod: \" +\n                    serverFormData.mode.toLowerCase() +\n                    \"\\n    zon: \" +\n                    serverFormData.zone.value +\n                    \"\\n    grp: \" +\n                    serverFormData.group.value +\n                    \"\\n    sst: \" +\n                    serverFormData.serviceUrl.value +\n                    \"\\n    hst: \" +\n                    serverFormData.host.value +\n                    \"\\n    dbg: \" +\n                    agentFormData.debugMode.value +\n                    \"\\n    cid: \" +\n                    serverFormData.clientId.value +\n                    \"\\n    csc: \" +\n                    serverFormData.clientSecret.value +\n                    \"\\n    oa2: \" +\n                    serverFormData.OAuth2.value +\n                    \"\\n    dur: \" +\n                    serverFormData.duration.value +\n                    \"\\n    aid: \" +\n                    serverFormData.agentId.value +\n                    \"\\n    rpt: \" +\n                    '\":' +\n                    serverFormData.remotePort.value +\n                    '\"' +\n                    \"\\n    rht: \" +\n                    serverFormData.remoteHost.value +\n                    \"\\n    hca: \" +\n                    '\":' +\n                    prepareData.hca +\n                    '\"';\n                }\n\n                if (serverFormData.allowPlugIn.value) {\n                  data =\n                    data +\n                    \"\\n    plg: \" +\n                    serverFormData.allowPlugIn.value +\n                    \"\\n    vln: \" +\n                    prepareData.vln +\n                    \"\\n    tls: \" +\n                    prepareData.tls;\n                }\n\n                let blob = new Blob([data], { type: \"text/yml\" });\n                if (window.navigator.msSaveOrOpenBlob) {\n                  window.navigator.msSaveBlob(blob, filename);\n                } else {\n                  let elem = window.document.createElement(\"a\");\n                  elem.href = window.URL.createObjectURL(blob);\n                  elem.download = filename;\n                  document.body.appendChild(elem);\n                  elem.click();\n                  document.body.removeChild(elem);\n                }\n\n                this.setState({\n                  serverForm: serverForm,\n                  serverFormIsValid: false,\n                });\n              }, 2000);\n            });\n          } else {\n            this.props.showGlobalMessage(\n              true,\n              true,\n              \"Please try after sometime\",\n              \"custom-danger\"\n            );\n            setTimeout(() => {\n              this.props.hideGlobalMessage();\n            }, 2000);\n          }\n        })\n        .catch((err) => {\n          console.log(err);\n          this.props.showGlobalMessage(\n            true,\n            true,\n            \"Please try after sometime\",\n            \"custom-danger\"\n          );\n          setTimeout(() => {\n            this.props.hideGlobalMessage();\n          }, 2000);\n        });\n    } else if (type === \"x:server\") {\n      let serverFormData = Object.assign({}, this.state.xserverForm);\n      prepareData.mod = serverFormData.mode.toLowerCase();\n      prepareData.dbg = agentFormData.debugMode.value;\n      prepareData.ecVersion = agentFormData.ecVersion.value;\n      prepareData.grp = serverFormData.group.value;\n      prepareData.cid = serverFormData.clientId.value;\n      prepareData.oa2 = serverFormData.OAuth2.value;\n      prepareData.hst = serverFormData.host.value;\n      prepareData.cps = 0;\n      prepareData.rht = serverFormData.remoteHost.value;\n      prepareData.parent = \"65c77c4f-fdf4-4c6d-a703-48b12cc21b2d\";\n      prepareData.name = \"server\";\n\n      fetch(this.props.baseUrl + \"generateXServerScript\", {\n        method: \"POST\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n          Authorization: \"Bearer \" + this.props.authToken,\n        },\n        body: JSON.stringify(prepareData),\n      })\n        .then((response) => {\n          if (response.status === 200) {\n            response.json().then((respData) => {\n              /* if(respData.errorStatus.status === 'ok'){ */\n              let commandData =\n                \" docker run -it -v $(pwd):/root/.ec enterpriseconnect/agent:v1 -cfg config.yml \\n ./agent -dec -cfg config.yml \";\n              sessionStorage.setItem(\n                \"XServerData\",\n                JSON.stringify(prepareData)\n              );\n              this.props.hideGlobalMessage();\n              this.props.showModal(modalHeading, commandData, buttons, true);\n              setTimeout(() => {\n                let selectedHost = \"\";\n                if (this.state.gateways.length > 0) {\n                  selectedHost = this.state.gateways[0].id;\n                }\n                let serverForm = {\n                  mode: \"X:SERVER\",\n                  group: {\n                    value: serverFormData.group.value,\n                    dirtyState: false,\n                  },\n                  clientId: {\n                    value: serverFormData.clientId.value,\n                    dirtyState: false,\n                  },\n                  OAuth2: {\n                    value: serverFormData.OAuth2.value,\n                    dirtyState: false,\n                  },\n                  host: { value: selectedHost, dirtyState: false },\n                  remoteHost: { value: \"\", dirtyState: false },\n                };\n\n                let filename = \"x:server.yml\";\n                let data = \"\";\n                if (agentFormData.ecVersion.value === \"v1.hokkaido.212\") {\n                  data =\n                    \"ec-config:\\n  conf:\\n    mod: \" +\n                    serverFormData.mode.toLowerCase() +\n                    \"\\n    grp: \" +\n                    serverFormData.group.value +\n                    \"\\n  hst: \" +\n                    serverFormData.host.value +\n                    \"\\n    dbg: \" +\n                    agentFormData.debugMode.value +\n                    \"\\n    cid: \" +\n                    serverFormData.clientId.value +\n                    \"\\n   oa2: \" +\n                    serverFormData.OAuth2.value +\n                    \"\\n   rht: \" +\n                    serverFormData.remoteHost.value;\n                } else {\n                  data =\n                    \"ec-config:\\n  conf:\\n    mod: \" +\n                    serverFormData.mode.toLowerCase() +\n                    \"\\n    grp: \" +\n                    serverFormData.group.value +\n                    \"\\n    hst: \" +\n                    serverFormData.host.value +\n                    \"\\n    dbg: \" +\n                    agentFormData.debugMode.value +\n                    \"\\n    cid: \" +\n                    serverFormData.clientId.value +\n                    \"\\n    oa2: \" +\n                    serverFormData.OAuth2.value +\n                    \"\\n  rht: \" +\n                    serverFormData.remoteHost.value;\n                }\n\n                let blob = new Blob([data], { type: \"text/yml\" });\n                if (window.navigator.msSaveOrOpenBlob) {\n                  window.navigator.msSaveBlob(blob, filename);\n                } else {\n                  let elem = window.document.createElement(\"a\");\n                  elem.href = window.URL.createObjectURL(blob);\n                  elem.download = filename;\n                  document.body.appendChild(elem);\n                  elem.click();\n                  document.body.removeChild(elem);\n                }\n\n                this.setState({\n                  xserverForm: serverForm,\n                  xserverFormIsValid: false,\n                });\n              }, 2000);\n            });\n          } else {\n            this.props.showGlobalMessage(\n              true,\n              true,\n              \"Please try after sometime\",\n              \"custom-danger\"\n            );\n            setTimeout(() => {\n              this.props.hideGlobalMessage();\n            }, 2000);\n          }\n        })\n        .catch((err) => {\n          console.log(err);\n          this.props.showGlobalMessage(\n            true,\n            true,\n            \"Please try after sometime\",\n            \"custom-danger\"\n          );\n          setTimeout(() => {\n            this.props.hideGlobalMessage();\n          }, 2000);\n        });\n    } else if (type === \"x:client\") {\n      let xClientFormData = Object.assign({}, this.state.xclientForm);\n      prepareData.mod = xClientFormData.mode.toLowerCase();\n      prepareData.dbg = agentFormData.debugMode.value;\n      prepareData.ecVersion = agentFormData.ecVersion.value;\n      prepareData.grp = xClientFormData.group.value;\n      prepareData.cid = xClientFormData.clientId.value;\n      prepareData.oa2 = xClientFormData.OAuth2.value;\n      prepareData.hst = xClientFormData.host.value;\n      prepareData.cps = 0;\n      prepareData.rht = xClientFormData.remoteHost.value;\n      prepareData.parent = \"65c77c4f-fdf4-4c6d-a703-48b12cc21b2d\";\n      prepareData.name = \"server\";\n\n      fetch(this.props.baseUrl + \"generateXClientScript\", {\n        method: \"POST\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n          Authorization: \"Bearer \" + this.props.authToken,\n        },\n        body: JSON.stringify(prepareData),\n      })\n        .then((response) => {\n          if (response.status === 200) {\n            response.json().then((respData) => {\n              /* if(respData.errorStatus.status === 'ok'){ */\n              let commandData =\n                \" docker run -it -v $(pwd):/root/.ec enterpriseconnect/agent:v1 -cfg config.yml \\n ./agent -dec -cfg config.yml \";\n              sessionStorage.setItem(\n                \"XClientData\",\n                JSON.stringify(prepareData)\n              );\n              this.props.hideGlobalMessage();\n              this.props.showModal(modalHeading, commandData, buttons, true);\n              setTimeout(() => {\n                let selectedHost = \"\";\n                if (this.state.gateways.length > 0) {\n                  selectedHost = this.state.gateways[0].id;\n                }\n                let XClientForm = {\n                  mode: \"X:CLIENT\",\n                  group: {\n                    value: xClientFormData.group.value,\n                    dirtyState: false,\n                  },\n                  clientId: {\n                    value: xClientFormData.clientId.value,\n                    dirtyState: false,\n                  },\n                  OAuth2: {\n                    value: xClientFormData.OAuth2.value,\n                    dirtyState: false,\n                  },\n                  host: { value: selectedHost, dirtyState: false },\n                  remoteHost: { value: \"\", dirtyState: false },\n                };\n\n                let filename = \"x:client.yml\";\n                let data = \"\";\n                if (agentFormData.ecVersion.value === \"v1.hokkaido.212\") {\n                  data =\n                    \"ec-config:\\n  conf:\\n    mod: \" +\n                    xClientFormData.mode.toLowerCase() +\n                    \"\\n    grp: \" +\n                    xClientFormData.group.value +\n                    \"\\n  hst: \" +\n                    xClientFormData.host.value +\n                    \"\\n    dbg: \" +\n                    agentFormData.debugMode.value +\n                    \"\\n    cid: \" +\n                    xClientFormData.clientId.value +\n                    \"\\n   oa2: \" +\n                    xClientFormData.OAuth2.value +\n                    \"\\n   rht: \" +\n                    xClientFormData.remoteHost.value;\n                } else {\n                  data =\n                    \"ec-config:\\n  conf:\\n    mod: \" +\n                    xClientFormData.mode.toLowerCase() +\n                    \"\\n    grp: \" +\n                    xClientFormData.group.value +\n                    \"\\n    hst: \" +\n                    xClientFormData.host.value +\n                    \"\\n    dbg: \" +\n                    agentFormData.debugMode.value +\n                    \"\\n    cid: \" +\n                    xClientFormData.clientId.value +\n                    \"\\n    oa2: \" +\n                    xClientFormData.OAuth2.value +\n                    \"\\n  rht: \" +\n                    xClientFormData.remoteHost.value;\n                }\n\n                let blob = new Blob([data], { type: \"text/yml\" });\n                if (window.navigator.msSaveOrOpenBlob) {\n                  window.navigator.msSaveBlob(blob, filename);\n                } else {\n                  let elem = window.document.createElement(\"a\");\n                  elem.href = window.URL.createObjectURL(blob);\n                  elem.download = filename;\n                  document.body.appendChild(elem);\n                  elem.click();\n                  document.body.removeChild(elem);\n                }\n\n                this.setState({\n                  xClientFormData: XClientForm,\n                  xclientFormIsValid: false,\n                });\n              }, 2000);\n            });\n          } else {\n            this.props.showGlobalMessage(\n              true,\n              true,\n              \"Please try after sometime\",\n              \"custom-danger\"\n            );\n            setTimeout(() => {\n              this.props.hideGlobalMessage();\n            }, 2000);\n          }\n        })\n        .catch((err) => {\n          console.log(err);\n          this.props.showGlobalMessage(\n            true,\n            true,\n            \"Please try after sometime\",\n            \"custom-danger\"\n          );\n          setTimeout(() => {\n            this.props.hideGlobalMessage();\n          }, 2000);\n        });\n    } else if (type === \"client\") {\n      let clientFormData = this.state.clientForm;\n      prepareData.mod = clientFormData.mode.toLowerCase();\n      prepareData.dbg = agentFormData.debugMode.value;\n      prepareData.ecVersion = agentFormData.ecVersion.value;\n      prepareData.aid = clientFormData.agentId.value;\n      prepareData.grp = clientFormData.group.value;\n      prepareData.cps = 0;\n      prepareData.cid = clientFormData.clientId.value;\n      prepareData.csc = clientFormData.clientSecret.value;\n      prepareData.dur = parseInt(clientFormData.duration.value);\n      prepareData.oa2 = clientFormData.OAuth2.value;\n      prepareData.hst = clientFormData.host.value;\n      prepareData.lpt = clientFormData.localPort.value;\n      prepareData.tid = clientFormData.targetId.value;\n      prepareData.pxy = clientFormData.proxy.value;\n      prepareData.nopxy = clientFormData.noproxy.value;\n      prepareData.plg = clientFormData.allowPlugIn.value;\n      prepareData.hca = clientFormData.hca.value;\n      prepareData.os = clientFormData.os.value;\n      prepareData.parent = \"65c77c4f-fdf4-4c6d-a703-48b12cc21b2d\";\n      prepareData.name = \"client\";\n      for (let statePlugIn of this.state.plugIns) {\n        if (clientFormData.plugIn.value.indexOf(statePlugIn.id) !== -1) {\n          prepareData[statePlugIn.id] = true;\n        } else {\n          prepareData[statePlugIn.id] = false;\n        }\n      }\n\n      fetch(this.props.baseUrl + \"generateClientScript\", {\n        method: \"POST\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n          Authorization: \"Bearer \" + this.props.authToken,\n        },\n        body: JSON.stringify(prepareData),\n      })\n        .then((response) => {\n          if (response.status === 200) {\n            response.json().then((respData) => {\n              /*  if(respData.errorStatus.status === 'ok'){ */\n              this.props.hideGlobalMessage();\n              let commandData =\n                \" docker run -it -v $(pwd):/root/.ec enterpriseconnect/agent:v1 -cfg config.yml \\n ./agent -cfg config.yml \";\n              sessionStorage.setItem(\"ClientData\", JSON.stringify(prepareData));\n              this.props.showModal(modalHeading, commandData, buttons, true);\n              setTimeout(() => {\n                let selectedOs = \"\";\n                let selectedHost = \"\";\n                if (this.state.operatingSystems.length > 0) {\n                  selectedOs = this.state.operatingSystems[0].id;\n                }\n                if (this.state.gateways.length > 0) {\n                  selectedHost = this.state.gateways[0].id;\n                }\n                let clientForm = {\n                  mode: \"CLIENT\",\n                  agentId: {\n                    value: clientFormData.agentId.value,\n                    dirtyState: false,\n                    type: clientFormData.agentId.type,\n                  },\n                  group: {\n                    value: clientFormData.group.value,\n                    dirtyState: false,\n                  },\n                  clientId: {\n                    value: clientFormData.agentId.value,\n                    dirtyState: false,\n                  },\n                  clientSecret: {\n                    value: clientFormData.clientSecret.value,\n                    dirtyState: false,\n                    type: clientFormData.clientSecret.type,\n                  },\n                  duration: { value: \"\", dirtyState: false },\n                  OAuth2: {\n                    value: clientFormData.OAuth2.value,\n                    dirtyState: false,\n                  },\n                  host: { value: selectedHost, dirtyState: false },\n                  localPort: { value: \"\", dirtyState: false },\n                  targetId: {\n                    value: clientFormData.targetId.value,\n                    dirtyState: false,\n                    type: clientFormData.targetId.type,\n                  },\n                  proxy: { value: \"\", dirtyState: false },\n                  noproxy: { value: \"\", dirtyState: false },\n                  allowPlugIn: { value: false, dirtyState: false },\n                  plugIn: { value: [], dirtyState: false },\n                  hca: { value: \"\", dirtyState: false },\n                  os: { value: selectedOs, dirtyState: false },\n                };\n\n                let filename = \"client.yml\";\n                let data = \"\";\n                if (agentFormData.ecVersion.value === \"v1.hokkaido.212\") {\n                  data =\n                    \"ec-config:\\n  conf:\\n    mod: \" +\n                    clientFormData.mode.toLowerCase() +\n                    \"\\n    aid: \" +\n                    clientFormData.agentId.value +\n                    \"\\n    tid: \" +\n                    clientFormData.targetId.value +\n                    \"\\n    hst: \" +\n                    clientFormData.host.value +\n                    \"\\n    cid: \" +\n                    clientFormData.clientId.value +\n                    \"\\n    csc: \" +\n                    clientFormData.clientSecret.value +\n                    \"\\n    oa2: \" +\n                    clientFormData.OAuth2.value +\n                    \"\\n    dur: \" +\n                    clientFormData.duration.value +\n                    \"\\n    dbg: \" +\n                    agentFormData.debugMode.value +\n                    \"\\n    grp: \" +\n                    clientFormData.group.value +\n                    \"\\n    lpt: \" +\n                    '\"' +\n                    clientFormData.localPort.value +\n                    '\"' +\n                    \"\\n    hca: \" +\n                    '\"' +\n                    prepareData.hca +\n                    '\"';\n                  if (clientFormData.proxy.value.trim() !== \"\") {\n                    data = data + \"\\n    pxy: \" + clientFormData.proxy.value;\n                  }\n                } else {\n                  data =\n                    \"ec-config:\\n  conf:\\n    mod: \" +\n                    clientFormData.mode.toLowerCase() +\n                    \"\\n    aid: \" +\n                    clientFormData.agentId.value +\n                    \"\\n    tid: \" +\n                    clientFormData.targetId.value +\n                    \"\\n    hst: \" +\n                    clientFormData.host.value +\n                    \"\\n    cid: \" +\n                    clientFormData.clientId.value +\n                    \"\\n    csc: \" +\n                    clientFormData.clientSecret.value +\n                    \"\\n    oa2: \" +\n                    clientFormData.OAuth2.value +\n                    \"\\n    dur: \" +\n                    clientFormData.duration.value +\n                    \"\\n    dbg: \" +\n                    agentFormData.debugMode.value +\n                    \"\\n    grp: \" +\n                    clientFormData.group.value +\n                    \"\\n    lpt: \" +\n                    '\":' +\n                    clientFormData.localPort.value +\n                    '\"' +\n                    \"\\n    hca: \" +\n                    '\":' +\n                    prepareData.hca +\n                    '\"';\n                }\n\n                if (clientFormData.allowPlugIn.value) {\n                  data =\n                    data +\n                    \"\\n    plg: \" +\n                    clientFormData.allowPlugIn.value +\n                    \"\\n    vln: \" +\n                    prepareData.vln +\n                    \"\\n    tls: \" +\n                    prepareData.tls;\n                }\n\n                let blob = new Blob([data], { type: \"text/yml\" });\n                if (window.navigator.msSaveOrOpenBlob) {\n                  window.navigator.msSaveBlob(blob, filename);\n                } else {\n                  let elem = window.document.createElement(\"a\");\n                  elem.href = window.URL.createObjectURL(blob);\n                  elem.download = filename;\n                  document.body.appendChild(elem);\n                  elem.click();\n                  document.body.removeChild(elem);\n                }\n\n                this.setState({\n                  clientForm: clientForm,\n                  clientFormIsValid: false,\n                });\n              }, 2000);\n            });\n          } else {\n            this.props.showGlobalMessage(\n              true,\n              true,\n              \"Please try after sometime\",\n              \"custom-danger\"\n            );\n            setTimeout(() => {\n              this.props.hideGlobalMessage();\n            }, 2000);\n          }\n        })\n        .catch((err) => {\n          console.log(err);\n          this.props.showGlobalMessage(\n            true,\n            true,\n            \"Please try after sometime\",\n            \"custom-danger\"\n          );\n          setTimeout(() => {\n            this.props.hideGlobalMessage();\n          }, 2000);\n        });\n    }\n  }\n\n  /* istanbul ignore next */\n  showHideField(e, formName, fieldName) {\n    let currentForm = {};\n    if (formName === \"serverForm\") {\n      currentForm = Object.assign({}, this.state.serverForm);\n    } else if (formName === \"clientForm\") {\n      currentForm = Object.assign({}, this.state.clientForm);\n    }\n\n    if (currentForm[fieldName].type === \"password\") {\n      currentForm[fieldName].type = \"text\";\n    } else {\n      currentForm[fieldName].type = \"password\";\n    }\n\n    if (formName === \"serverForm\") {\n      this.setState({\n        serverForm: currentForm,\n      });\n    } else if (formName === \"clientForm\") {\n      this.setState({\n        clientForm: currentForm,\n      });\n    }\n  }\n\n  render() {\n    /* jshint ignore:start */\n    /* istanbul ignore next */\n    return (\n      <div className=\"row Maintainagentcreate\">\n        <div className=\"col-md-12 mt-2\">\n          <div className=\"row\">\n            <div className=\"text-left\">\n              <ul className=\"breadcrumb\">\n                <li className=\"breadcrumb-item active\">Maintain</li>\n                <li className=\"breadcrumb-item active\">Create Agent</li>\n              </ul>\n            </div>\n          </div>\n          <div className=\"centered-div\">\n            <div className=\"centered-div-header\">\n              <div className=\"row maintainagentcreate-header\">\n                <div className=\"col-md-12\">\n                  <h6 id=\"maintainagentcreate-title\">\n                    Create Agent <small>Creating parameters.</small>\n                  </h6>\n                </div>\n              </div>\n              <hr></hr>\n              <div className=\"row form-body\">\n                <div className=\"col-sm-4\">\n                  <h6>Agent Mode</h6>\n                  <div className=\"col-sm-12 mb-2\">\n                    {this.state.agentModeButtons.map(\n                      (agentModeButton, buttonIndex) => {\n                        return (\n                          <button\n                            key={\"agentModeButton\" + buttonIndex}\n                            type=\"button\"\n                            id={\"agentModeButton\" + buttonIndex}\n                            name=\"agentMode\"\n                            className={\n                              agentModeButton.value ===\n                              this.state.agentForm.agentMode.value\n                                ? \"btn btn-sm mr-2 btn-selected\"\n                                : \"btn btn-sm mr-2 btn-deselected\"\n                            }\n                            onClick={this.handleChangeAgentMode.bind(\n                              this,\n                              agentModeButton.value\n                            )}\n                          >\n                            {agentModeButton.text}\n                          </button>\n                        );\n                      }\n                    )}\n                  </div>\n                </div>\n                <div className=\"col-sm-2\">\n                  <h6>&nbsp;</h6>\n                  <div className=\"custom-control custom-checkbox\">\n                    <input\n                      type=\"checkbox\"\n                      className=\"custom-control-input custom-control-checkbox\"\n                      id=\"debugMode\"\n                      name=\"debugMode\"\n                      checked={this.state.agentForm.debugMode.value}\n                      onChange={(event) => {\n                        this.handleAgentFormData(event);\n                      }}\n                    />\n                    <label className=\"custom-control-label\" htmlFor=\"debugMode\">\n                      <small className=\"theme-color\">\n                        <strong>DEBUG MODE ENABLED</strong>\n                      </small>\n                    </label>\n                  </div>\n                </div>\n                <div className=\"col-sm-3\">\n                  <h6 className=\"ml-0\">Subscription</h6>\n                  <select\n                    className=\"form-control form-control-sm\"\n                    name=\"subscriptionId\"\n                    value={this.state.agentForm.subscriptionId.value}\n                    onChange={(event) => {\n                      this.handleAgentFormData(event);\n                    }}\n                  >\n                    {this.state.subscriptions.map(\n                      (subscription, subscriptionIndex) => {\n                        return (\n                          <option\n                            key={\"subscriptionOption\" + subscriptionIndex}\n                            value={subscription.licenseId}\n                          >\n                            {subscription.licenseId}\n                          </option>\n                        );\n                      }\n                    )}\n                  </select>\n                </div>\n                <div className=\"col-sm-3\">\n                  <h6 className=\"ml-0\">EC Version</h6>\n                  <select\n                    className=\"form-control form-control-sm\"\n                    name=\"ecVersion\"\n                    value={this.state.agentForm.ecVersion.value}\n                    onChange={(event) => {\n                      this.handleAgentFormData(event);\n                    }}\n                  >\n                    {this.state.ecVersions.map((ecVersion, ecVersionIndex) => {\n                      return (\n                        <option\n                          key={\"ecVersionOption\" + ecVersionIndex}\n                          value={ecVersion.ecVersionIndex}\n                        >\n                          {ecVersion.ecVersion}\n                        </option>\n                      );\n                    })}\n                  </select>\n                </div>\n              </div>\n              <hr></hr>\n              {this.state.agentForm.agentMode.value === 2 ? (\n                <div className=\"changeable-form maintainagentcreate-body server-form\">\n                  <div className=\"row\">\n                    <div className=\"col-sm-3\">\n                      <div className=\"col-sm-12 label required\">\n                        Mode <img alt=\"down-arrow\" src={IconGreenSortingDown} />\n                      </div>\n                      <div className=\"col-sm-12 mb-2\">\n                        <input\n                          type=\"text\"\n                          className=\"form-control form-control-sm\"\n                          name=\"mode\"\n                          disabled={true}\n                          defaultValue={this.state.serverForm.mode}\n                        />\n                      </div>\n                    </div>\n                    <div className=\"col-sm-3\">\n                      <div className=\"col-sm-12 label required\">\n                        Group{\" \"}\n                        <img alt=\"down-arrow\" src={IconGreenSortingDown} />\n                      </div>\n                      <div className=\"col-sm-12 mb-2\">\n                        <select\n                          className=\"form-control form-control-sm\"\n                          name=\"group\"\n                          value={this.state.serverForm.group.value}\n                          onChange={(event) => {\n                            this.handleServerFormData(event);\n                          }}\n                        >\n                          {this.state.groups.map((group, groupIndex) => {\n                            return (\n                              <option\n                                key={\"groupOption\" + groupIndex}\n                                value={group.groupId}\n                              >\n                                {group.groupId}\n                              </option>\n                            );\n                          })}\n                        </select>\n                        <small className=\"text-danger\">\n                          {this.state.errorsServerForm[\"group\"]}\n                        </small>\n                      </div>\n                    </div>\n                    <div className=\"col-sm-3\">\n                      <div className=\"col-sm-12 label required\">\n                        Agent ID{\" \"}\n                        <img alt=\"down-arrow\" src={IconGreenSortingDown} />{\" \"}\n                        {this.state.serverForm.agentId.type === \"password\" ? (\n                          <i\n                            onClick={(event) => {\n                              this.showHideField(\n                                event,\n                                \"serverForm\",\n                                \"agentId\"\n                              );\n                            }}\n                            className=\"fa fa-eye cursor-pointer\"\n                            title=\"Show\"\n                          ></i>\n                        ) : (\n                          <i\n                            onClick={(event) => {\n                              this.showHideField(\n                                event,\n                                \"serverForm\",\n                                \"agentId\"\n                              );\n                            }}\n                            className=\"fa fa-eye-slash cursor-pointer\"\n                            title=\"Hide\"\n                          ></i>\n                        )}\n                      </div>\n                      <div className=\"col-sm-12 mb-2\">\n                        <input\n                          type={this.state.serverForm.agentId.type}\n                          autoComplete=\"off\"\n                          className=\"form-control form-control-sm\"\n                          name=\"agentId\"\n                          value={this.state.serverForm.agentId.value}\n                          onChange={(event) => {\n                            this.handleServerFormData(event);\n                          }}\n                        />\n                        <small className=\"text-danger\">\n                          {this.state.errorsServerForm[\"agentId\"]}\n                        </small>\n                      </div>\n                    </div>\n                    <div className=\"col-sm-3\">\n                      <div className=\"col-sm-12 label required\">\n                        Client ID{\" \"}\n                        <img alt=\"down-arrow\" src={IconGreenSortingDown} />\n                      </div>\n                      <div className=\"col-sm-12 mb-2\">\n                        <input\n                          type=\"text\"\n                          autoComplete=\"off\"\n                          className=\"form-control form-control-sm\"\n                          name=\"clientId\"\n                          value={this.state.serverForm.clientId.value}\n                          onChange={(event) => {\n                            this.handleServerFormData(event);\n                          }}\n                        />\n                        <small className=\"text-danger\">\n                          {this.state.errorsServerForm[\"clientId\"]}\n                        </small>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"row\">\n                    <div className=\"col-sm-3\">\n                      <div className=\"col-sm-12 label required\">\n                        Client Secret{\" \"}\n                        <img alt=\"down-arrow\" src={IconGreenSortingDown} />{\" \"}\n                        {this.state.serverForm.clientSecret.type ===\n                        \"password\" ? (\n                          <i\n                            onClick={(event) => {\n                              this.showHideField(\n                                event,\n                                \"serverForm\",\n                                \"clientSecret\"\n                              );\n                            }}\n                            className=\"fa fa-eye cursor-pointer\"\n                            title=\"Show\"\n                          ></i>\n                        ) : (\n                          <i\n                            onClick={(event) => {\n                              this.showHideField(\n                                event,\n                                \"serverForm\",\n                                \"clientSecret\"\n                              );\n                            }}\n                            className=\"fa fa-eye-slash cursor-pointer\"\n                            title=\"Hide\"\n                          ></i>\n                        )}\n                      </div>\n                      <div className=\"col-sm-12 mb-2\">\n                        <input\n                          type={this.state.serverForm.clientSecret.type}\n                          autoComplete=\"off\"\n                          className=\"form-control form-control-sm\"\n                          name=\"clientSecret\"\n                          value={this.state.serverForm.clientSecret.value}\n                          onChange={(event) => {\n                            this.handleServerFormData(event);\n                          }}\n                        />\n                        <small className=\"text-danger\">\n                          {this.state.errorsServerForm[\"clientSecret\"]}\n                        </small>\n                      </div>\n                    </div>\n                    <div className=\"col-sm-3\">\n                      <div className=\"col-sm-12 label required\">\n                        Duration{\" \"}\n                        <img alt=\"down-arrow\" src={IconGreenSortingDown} />\n                      </div>\n                      <div className=\"col-sm-12 mb-2\">\n                        <input\n                          type=\"text\"\n                          autoComplete=\"off\"\n                          pattern=\"^[1-9][0-9]*\"\n                          className=\"form-control form-control-sm\"\n                          name=\"duration\"\n                          value={this.state.serverForm.duration.value}\n                          onChange={(event) => {\n                            this.handleServerFormData(event);\n                          }}\n                        />\n                        <small className=\"text-danger\">\n                          {this.state.errorsServerForm[\"duration\"]}\n                        </small>\n                      </div>\n                    </div>\n                    <div className=\"col-sm-3\">\n                      <div className=\"col-sm-12 label required\">\n                        OAUTH2{\" \"}\n                        <img alt=\"down-arrow\" src={IconGreenSortingDown} />\n                      </div>\n                      <div className=\"col-sm-12 mb-2\">\n                        <input\n                          type=\"text\"\n                          autoComplete=\"off\"\n                          className=\"form-control form-control-sm\"\n                          name=\"OAuth2\"\n                          value={this.state.serverForm.OAuth2.value}\n                          onChange={(event) => {\n                            this.handleServerFormData(event);\n                          }}\n                        />\n                        <small className=\"text-danger\">\n                          {this.state.errorsServerForm[\"OAuth2\"]}\n                        </small>\n                      </div>\n                    </div>\n                    <div className=\"col-sm-3\">\n                      <div className=\"col-sm-12 label required\">\n                        Host <img alt=\"down-arrow\" src={IconGreenSortingDown} />\n                      </div>\n                      <div className=\"col-sm-12 mb-2\">\n                        <select\n                          className=\"form-control form-control-sm\"\n                          name=\"host\"\n                          value={this.state.serverForm.host.value}\n                          onChange={(event) => {\n                            this.handleServerFormData(event);\n                          }}\n                        >\n                          {this.state.gateways.map((gateway, gatewayIndex) => {\n                            return (\n                              <option\n                                key={\"gatewayOption\" + gatewayIndex}\n                                value={gateway.id}\n                              >\n                                {gateway.name}\n                              </option>\n                            );\n                          })}\n                        </select>\n                        <small className=\"text-danger\">\n                          {this.state.errorsServerForm[\"host\"]}\n                        </small>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"row\">\n                    <div className=\"col-sm-3\">\n                      <div className=\"col-sm-12 label required\">\n                        Zone <img alt=\"down-arrow\" src={IconGreenSortingDown} />\n                      </div>\n                      <div className=\"col-sm-12 mb-2\">\n                        <input\n                          type=\"text\"\n                          autoComplete=\"off\"\n                          className=\"form-control form-control-sm\"\n                          name=\"zone\"\n                          value={this.state.serverForm.zone.value}\n                          onChange={(event) => {\n                            this.handleServerFormData(event);\n                          }}\n                        />\n                        <small className=\"text-danger\">\n                          {this.state.errorsServerForm[\"zone\"]}\n                        </small>\n                      </div>\n                    </div>\n                    <div className=\"col-sm-3\">\n                      <div className=\"col-sm-12 label required\">\n                        Service URL{\" \"}\n                        <img alt=\"down-arrow\" src={IconGreenSortingDown} />\n                      </div>\n                      <div className=\"col-sm-12 mb-2\">\n                        <input\n                          type=\"text\"\n                          className=\"form-control form-control-sm\"\n                          name=\"serviceUrl\"\n                          value={this.state.serverForm.serviceUrl.value}\n                          onChange={(event) => {\n                            this.handleServerFormData(event);\n                          }}\n                        />\n                        <small className=\"text-danger\">\n                          {this.state.errorsServerForm[\"serviceUrl\"]}\n                        </small>\n                      </div>\n                    </div>\n                    <div className=\"col-sm-3\">\n                      <div className=\"col-sm-12 label required\">\n                        Remote Host{\" \"}\n                        <img alt=\"down-arrow\" src={IconGreenSortingDown} />\n                      </div>\n                      <div className=\"col-sm-12 mb-2\">\n                        <input\n                          type=\"text\"\n                          autoComplete=\"off\"\n                          className=\"form-control form-control-sm\"\n                          name=\"remoteHost\"\n                          value={this.state.serverForm.remoteHost.value}\n                          onChange={(event) => {\n                            this.handleServerFormData(event);\n                          }}\n                        />\n                        <small className=\"text-danger\">\n                          {this.state.errorsServerForm[\"remoteHost\"]}\n                        </small>\n                      </div>\n                    </div>\n                    <div className=\"col-sm-3\">\n                      <div className=\"col-sm-12 label required\">\n                        Remote Port{\" \"}\n                        <img alt=\"down-arrow\" src={IconGreenSortingDown} />\n                      </div>\n                      <div className=\"col-sm-12 mb-2\">\n                        <input\n                          type=\"text\"\n                          pattern=\"^[1-9][0-9]*\"\n                          autoComplete=\"off\"\n                          className=\"form-control form-control-sm\"\n                          name=\"remotePort\"\n                          value={this.state.serverForm.remotePort.value}\n                          onChange={(event) => {\n                            this.handleServerFormData(event);\n                          }}\n                        />\n                        <small className=\"text-danger\">\n                          {this.state.errorsServerForm[\"remotePort\"]}\n                        </small>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"row\">\n                    <div className=\"col-sm-3\">\n                      <div className=\"col-sm-12 label required\">\n                        Health Port{\" \"}\n                        <img alt=\"down-arrow\" src={IconGreenSortingDown} />\n                      </div>\n                      <div className=\"col-sm-12 mb-2\">\n                        <input\n                          type=\"text\"\n                          pattern=\"^[1-9][0-9]*\"\n                          autoComplete=\"off\"\n                          className=\"form-control form-control-sm\"\n                          name=\"hca\"\n                          value={this.state.serverForm.hca.value}\n                          onChange={(event) => {\n                            this.handleServerFormData(event);\n                          }}\n                        />\n                        <small className=\"text-danger\">\n                          {this.state.errorsServerForm[\"hca\"]}\n                        </small>\n                      </div>\n                    </div>\n                    <div className=\"col-sm-3\">\n                      <div className=\"col-sm-12 label required\">\n                        Operating System{\" \"}\n                        <img alt=\"down-arrow\" src={IconGreenSortingDown} />\n                      </div>\n                      <div className=\"col-sm-12 mb-2\">\n                        <select\n                          className=\"form-control form-control-sm\"\n                          name=\"os\"\n                          value={this.state.serverForm.os.value}\n                          onChange={(event) => {\n                            this.handleServerFormData(event);\n                          }}\n                        >\n                          {this.state.operatingSystems.map((os, osIndex) => {\n                            return (\n                              <option key={\"osOption\" + osIndex} value={os.id}>\n                                {os.name}\n                              </option>\n                            );\n                          })}\n                        </select>\n                      </div>\n                    </div>\n                    <div className=\"col-sm-3\">\n                      <div className=\"col-sm-12 label required\">Proxy</div>\n                      <div className=\"col-sm-12 mb-2\">\n                        <input\n                          type=\"text\"\n                          autoComplete=\"off\"\n                          className=\"form-control form-control-sm\"\n                          name=\"proxy\"\n                          value={this.state.serverForm.proxy.value}\n                          onChange={(event) => {\n                            this.handleServerFormData(event);\n                          }}\n                        />\n                      </div>\n                    </div>\n                    <div className=\"col-sm-3\">\n                      <div className=\"col-sm-12 label required\">No Proxy</div>\n                      <div className=\"col-sm-12 mb-2\">\n                        <input\n                          type=\"text\"\n                          autoComplete=\"off\"\n                          className=\"form-control form-control-sm\"\n                          name=\"noproxy\"\n                          value={this.state.serverForm.noproxy.value}\n                          onChange={(event) => {\n                            this.handleServerFormData(event);\n                          }}\n                        />\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"row\">\n                    <div className=\"col-sm-3\">\n                      <div className=\"col-sm-12 label required\">\n                        Allow Plug-in{\" \"}\n                        <img alt=\"down-arrow\" src={IconGreenSortingDown} />\n                      </div>\n                      <div className=\"col-sm-12 mb-2\">\n                        <div className=\"custom-control custom-checkbox\">\n                          <input\n                            type=\"checkbox\"\n                            className=\"custom-control-input custom-control-checkbox\"\n                            id=\"allowPlugIn\"\n                            name=\"allowPlugIn\"\n                            checked={this.state.serverForm.allowPlugIn.value}\n                            onChange={(event) => {\n                              this.handleServerFormData(event);\n                            }}\n                          />\n                          <label\n                            className=\"custom-control-label\"\n                            htmlFor=\"allowPlugIn\"\n                          ></label>\n                        </div>\n                      </div>\n                    </div>\n                    {this.state.serverForm.allowPlugIn.value ? (\n                      <div className=\"col-sm-3\">\n                        <div className=\"col-sm-12 label\">\n                          Plug-in{\" \"}\n                          <img alt=\"down-arrow\" src={IconGreenSortingDown} />\n                        </div>\n                        <div className=\"col-sm-12 mb-2\">\n                          <select\n                            multiple\n                            className=\"form-control form-control-sm\"\n                            style={{ height: \"45px\" }}\n                            name=\"plugIn\"\n                            value={this.state.serverForm.plugIn.value}\n                            onChange={(event) => {\n                              this.handleServerFormData(event);\n                            }}\n                          >\n                            {this.state.plugIns.map((plugIn, plugInIndex) => {\n                              return (\n                                <option\n                                  key={\"plugInOption\" + plugInIndex}\n                                  value={plugIn.id}\n                                >\n                                  {plugIn.name}\n                                </option>\n                              );\n                            })}\n                          </select>\n                          <small className=\"text-danger\">\n                            {this.state.errorsServerForm[\"plugIn\"]}\n                          </small>\n                        </div>\n                      </div>\n                    ) : null}\n                  </div>\n\n                  <div className=\"col-sm-12 mb-2\">\n                    <hr></hr>\n                  </div>\n\n                  <div className=\"row\">\n                    <div className=\"col-sm-5 mb-2\">\n                      <img\n                        alt=\"copy\"\n                        src={CopyIcon}\n                        height=\"15px\"\n                      />\n                      <a\n                        onClick={this.copyFromClientToServer.bind(this)}\n                        href=\"#\"\n                        className=\"theme-color cursor-pointer ml-1\"\n                      >\n                        <small>Copy details from client</small>\n                      </a>\n                    </div>\n                    <div className=\"col-sm-7 mb-2\">\n                      <button\n                        id=\"create-server-btn\"\n                        disabled={!this.state.serverFormIsValid}\n                        onClick={this.saveFile.bind(this, \"server\")}\n                        className=\"btn btn-sm customize-view-btn mr-2\"\n                      >\n                        SAVE SCRIPT\n                      </button>\n                      <button\n                        id=\"create-server-btn\"\n                        disabled={!this.state.serverFormIsValid}\n                        onClick={this.downloadFile.bind(this, \"server\")}\n                        className=\"btn btn-sm customize-view-btn ml-2\"\n                      >\n                        DOWNLOAD SCRIPT\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              ) : null}\n\n              {this.state.agentForm.agentMode.value === 3 ? (\n                <div className=\"changeable-form maintainagentcreate-body client-form\">\n                  <div className=\"row\">\n                    <div className=\"col-sm-3\">\n                      <div className=\"col-sm-12 label required\">\n                        Mode <img alt=\"down-arrow\" src={IconGreenSortingDown} />\n                      </div>\n                      <div className=\"col-sm-12 mb-2\">\n                        <input\n                          type=\"text\"\n                          className=\"form-control form-control-sm\"\n                          name=\"mode\"\n                          disabled={true}\n                          defaultValue={this.state.clientForm.mode}\n                        />\n                      </div>\n                    </div>\n                    <div className=\"col-sm-3\">\n                      <div className=\"col-sm-12 label required\">\n                        Group{\" \"}\n                        <img alt=\"down-arrow\" src={IconGreenSortingDown} />\n                      </div>\n                      <div className=\"col-sm-12 mb-2\">\n                        <select\n                          className=\"form-control form-control-sm\"\n                          name=\"group\"\n                          value={this.state.clientForm.group.value}\n                          onChange={(event) => {\n                            this.handleClientFormData(event);\n                          }}\n                        >\n                          {this.state.groups.map((group, groupIndex) => {\n                            return (\n                              <option\n                                key={\"groupOption\" + groupIndex}\n                                value={group.groupId}\n                              >\n                                {group.groupId}\n                              </option>\n                            );\n                          })}\n                        </select>\n                        <small className=\"text-danger\">\n                          {this.state.errorsClientForm[\"group\"]}\n                        </small>\n                      </div>\n                    </div>\n                    <div className=\"col-sm-3\">\n                      <div className=\"col-sm-12 label required\">\n                        Agent ID{\" \"}\n                        <img alt=\"down-arrow\" src={IconGreenSortingDown} />{\" \"}\n                        {this.state.clientForm.agentId.type === \"password\" ? (\n                          <i\n                            onClick={(event) => {\n                              this.showHideField(\n                                event,\n                                \"clientForm\",\n                                \"agentId\"\n                              );\n                            }}\n                            className=\"fa fa-eye cursor-pointer\"\n                            title=\"Show\"\n                          ></i>\n                        ) : (\n                          <i\n                            onClick={(event) => {\n                              this.showHideField(\n                                event,\n                                \"clientForm\",\n                                \"agentId\"\n                              );\n                            }}\n                            className=\"fa fa-eye-slash cursor-pointer\"\n                            title=\"Hide\"\n                          ></i>\n                        )}\n                      </div>\n                      <div className=\"col-sm-12 mb-2\">\n                        <input\n                          type={this.state.clientForm.agentId.type}\n                          autoComplete=\"off\"\n                          className=\"form-control form-control-sm\"\n                          name=\"agentId\"\n                          value={this.state.clientForm.agentId.value}\n                          onChange={(event) => {\n                            this.handleClientFormData(event);\n                          }}\n                        />\n                        <small className=\"text-danger\">\n                          {this.state.errorsClientForm[\"agentId\"]}\n                        </small>\n                      </div>\n                    </div>\n                    <div className=\"col-sm-3\">\n                      <div className=\"col-sm-12 label required\">\n                        Client ID{\" \"}\n                        <img alt=\"down-arrow\" src={IconGreenSortingDown} />\n                      </div>\n                      <div className=\"col-sm-12 mb-2\">\n                        <input\n                          type=\"text\"\n                          autoComplete=\"off\"\n                          className=\"form-control form-control-sm\"\n                          name=\"clientId\"\n                          value={this.state.clientForm.clientId.value}\n                          onChange={(event) => {\n                            this.handleClientFormData(event);\n                          }}\n                        />\n                        <small className=\"text-danger\">\n                          {this.state.errorsClientForm[\"clientId\"]}\n                        </small>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"row\">\n                    <div className=\"col-sm-3\">\n                      <div className=\"col-sm-12 label required\">\n                        Client Secret{\" \"}\n                        <img alt=\"down-arrow\" src={IconGreenSortingDown} />{\" \"}\n                        {this.state.clientForm.clientSecret.type ===\n                        \"password\" ? (\n                          <i\n                            onClick={(event) => {\n                              this.showHideField(\n                                event,\n                                \"clientForm\",\n                                \"clientSecret\"\n                              );\n                            }}\n                            className=\"fa fa-eye cursor-pointer\"\n                            title=\"Show\"\n                          ></i>\n                        ) : (\n                          <i\n                            onClick={(event) => {\n                              this.showHideField(\n                                event,\n                                \"clientForm\",\n                                \"clientSecret\"\n                              );\n                            }}\n                            className=\"fa fa-eye-slash cursor-pointer\"\n                            title=\"Hide\"\n                          ></i>\n                        )}\n                      </div>\n                      <div className=\"col-sm-12 mb-2\">\n                        <input\n                          type={this.state.clientForm.clientSecret.type}\n                          autoComplete=\"off\"\n                          className=\"form-control form-control-sm\"\n                          name=\"clientSecret\"\n                          value={this.state.clientForm.clientSecret.value}\n                          onChange={(event) => {\n                            this.handleClientFormData(event);\n                          }}\n                        />\n                        <small className=\"text-danger\">\n                          {this.state.errorsClientForm[\"clientSecret\"]}\n                        </small>\n                      </div>\n                    </div>\n                    <div className=\"col-sm-3\">\n                      <div className=\"col-sm-12 label required\">\n                        Duration{\" \"}\n                        <img alt=\"down-arrow\" src={IconGreenSortingDown} />\n                      </div>\n                      <div className=\"col-sm-12 mb-2\">\n                        <input\n                          type=\"text\"\n                          autoComplete=\"off\"\n                          pattern=\"^[1-9][0-9]*\"\n                          className=\"form-control form-control-sm\"\n                          name=\"duration\"\n                          value={this.state.clientForm.duration.value}\n                          onChange={(event) => {\n                            this.handleClientFormData(event);\n                          }}\n                        />\n                        <small className=\"text-danger\">\n                          {this.state.errorsClientForm[\"duration\"]}\n                        </small>\n                      </div>\n                    </div>\n                    <div className=\"col-sm-3\">\n                      <div className=\"col-sm-12 label required\">\n                        OAUTH2{\" \"}\n                        <img alt=\"down-arrow\" src={IconGreenSortingDown} />\n                      </div>\n                      <div className=\"col-sm-12 mb-2\">\n                        <input\n                          type=\"text\"\n                          autoComplete=\"off\"\n                          className=\"form-control form-control-sm\"\n                          name=\"OAuth2\"\n                          value={this.state.clientForm.OAuth2.value}\n                          onChange={(event) => {\n                            this.handleClientFormData(event);\n                          }}\n                        />\n                        <small className=\"text-danger\">\n                          {this.state.errorsClientForm[\"OAuth2\"]}\n                        </small>\n                      </div>\n                    </div>\n                    <div className=\"col-sm-3\">\n                      <div className=\"col-sm-12 label required\">\n                        Host <img alt=\"down-arrow\" src={IconGreenSortingDown} />\n                      </div>\n                      <div className=\"col-sm-12 mb-2\">\n                        <select\n                          className=\"form-control form-control-sm\"\n                          name=\"host\"\n                          value={this.state.clientForm.host.value}\n                          onChange={(event) => {\n                            this.handleClientFormData(event);\n                          }}\n                        >\n                          {this.state.gateways.map((gateway, gatewayIndex) => {\n                            return (\n                              <option\n                                key={\"gatewayOption\" + gatewayIndex}\n                                value={gateway.id}\n                              >\n                                {gateway.name}\n                              </option>\n                            );\n                          })}\n                        </select>\n                        <small className=\"text-danger\">\n                          {this.state.errorsClientForm[\"host\"]}\n                        </small>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"row\">\n                    <div className=\"col-sm-3\">\n                      <div className=\"col-sm-12 label required\">\n                        Local Port{\" \"}\n                        <img alt=\"down-arrow\" src={IconGreenSortingDown} />\n                      </div>\n                      <div className=\"col-sm-12 mb-2\">\n                        <input\n                          type=\"text\"\n                          pattern=\"^[1-9][0-9]*\"\n                          autoComplete=\"off\"\n                          className=\"form-control form-control-sm\"\n                          name=\"localPort\"\n                          value={this.state.clientForm.localPort.value}\n                          onChange={(event) => {\n                            this.handleClientFormData(event);\n                          }}\n                        />\n                        <small className=\"text-danger\">\n                          {this.state.errorsClientForm[\"localPort\"]}\n                        </small>\n                      </div>\n                    </div>\n                    <div className=\"col-sm-3\">\n                      <div className=\"col-sm-12 label required\">\n                        Target ID{\" \"}\n                        <img alt=\"down-arrow\" src={IconGreenSortingDown} />{\" \"}\n                        {this.state.clientForm.targetId.type === \"password\" ? (\n                          <i\n                            onClick={(event) => {\n                              this.showHideField(\n                                event,\n                                \"clientForm\",\n                                \"targetId\"\n                              );\n                            }}\n                            className=\"fa fa-eye cursor-pointer\"\n                            title=\"Show\"\n                          ></i>\n                        ) : (\n                          <i\n                            onClick={(event) => {\n                              this.showHideField(\n                                event,\n                                \"clientForm\",\n                                \"targetId\"\n                              );\n                            }}\n                            className=\"fa fa-eye-slash cursor-pointer\"\n                            title=\"Hide\"\n                          ></i>\n                        )}\n                      </div>\n                      <div className=\"col-sm-12 mb-2\">\n                        <input\n                          type={this.state.clientForm.targetId.type}\n                          autoComplete=\"off\"\n                          className=\"form-control form-control-sm\"\n                          name=\"targetId\"\n                          value={this.state.clientForm.targetId.value}\n                          onChange={(event) => {\n                            this.handleClientFormData(event);\n                          }}\n                        />\n                        <small className=\"text-danger\">\n                          {this.state.errorsClientForm[\"targetId\"]}\n                        </small>\n                      </div>\n                    </div>\n                    <div className=\"col-sm-3\">\n                      <div className=\"col-sm-12 label required\">Proxy</div>\n                      <div className=\"col-sm-12 mb-2\">\n                        <input\n                          type=\"text\"\n                          autoComplete=\"off\"\n                          className=\"form-control form-control-sm\"\n                          name=\"proxy\"\n                          value={this.state.clientForm.proxy.value}\n                          onChange={(event) => {\n                            this.handleClientFormData(event);\n                          }}\n                        />\n                      </div>\n                    </div>\n                    <div className=\"col-sm-3\">\n                      <div className=\"col-sm-12 label required\">No Proxy</div>\n                      <div className=\"col-sm-12 mb-2\">\n                        <input\n                          type=\"text\"\n                          autoComplete=\"off\"\n                          className=\"form-control form-control-sm\"\n                          name=\"noproxy\"\n                          value={this.state.clientForm.noproxy.value}\n                          onChange={(event) => {\n                            this.handleClientFormData(event);\n                          }}\n                        />\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"row\">\n                    <div className=\"col-sm-3\">\n                      <div className=\"col-sm-12 label required\">\n                        Health Port{\" \"}\n                        <img alt=\"down-arrow\" src={IconGreenSortingDown} />\n                      </div>\n                      <div className=\"col-sm-12 mb-2\">\n                        <input\n                          type=\"text\"\n                          pattern=\"^[1-9][0-9]*\"\n                          autoComplete=\"off\"\n                          className=\"form-control form-control-sm\"\n                          name=\"hca\"\n                          value={this.state.clientForm.hca.value}\n                          onChange={(event) => {\n                            this.handleClientFormData(event);\n                          }}\n                        />\n                        <small className=\"text-danger\">\n                          {this.state.errorsClientForm[\"hca\"]}\n                        </small>\n                      </div>\n                    </div>\n                    <div className=\"col-sm-3\">\n                      <div className=\"col-sm-12 label required\">\n                        Operating System{\" \"}\n                        <img alt=\"down-arrow\" src={IconGreenSortingDown} />\n                      </div>\n                      <div className=\"col-sm-12 mb-2\">\n                        <select\n                          className=\"form-control form-control-sm\"\n                          name=\"os\"\n                          value={this.state.clientForm.os.value}\n                          onChange={(event) => {\n                            this.handleClientFormData(event);\n                          }}\n                        >\n                          {this.state.operatingSystems.map((os, osIndex) => {\n                            return (\n                              <option key={\"osOption\" + osIndex} value={os.id}>\n                                {os.name}\n                              </option>\n                            );\n                          })}\n                        </select>\n                      </div>\n                    </div>\n                    <div className=\"col-sm-3\">\n                      <div className=\"col-sm-12 label required\">\n                        Allow Plug-in{\" \"}\n                        <img alt=\"down-arrow\" src={IconGreenSortingDown} />\n                      </div>\n                      <div className=\"col-sm-12 mb-2\">\n                        <div className=\"custom-control custom-checkbox\">\n                          <input\n                            type=\"checkbox\"\n                            className=\"custom-control-input custom-control-checkbox\"\n                            id=\"allowPlugIn\"\n                            name=\"allowPlugIn\"\n                            checked={this.state.clientForm.allowPlugIn.value}\n                            onChange={(event) => {\n                              this.handleClientFormData(event);\n                            }}\n                          />\n                          <label\n                            className=\"custom-control-label\"\n                            htmlFor=\"allowPlugIn\"\n                          ></label>\n                        </div>\n                      </div>\n                    </div>\n                    {this.state.clientForm.allowPlugIn.value ? (\n                      <div className=\"col-sm-3\">\n                        <div className=\"col-sm-12 label\">\n                          Plug-in{\" \"}\n                          <img alt=\"down-arrow\" src={IconGreenSortingDown} />\n                        </div>\n                        <div className=\"col-sm-12 mb-2\">\n                          <select\n                            multiple\n                            className=\"form-control form-control-sm\"\n                            style={{ height: \"45px\" }}\n                            name=\"plugIn\"\n                            value={this.state.clientForm.plugIn.value}\n                            onChange={(event) => {\n                              this.handleClientFormData(event);\n                            }}\n                          >\n                            {this.state.plugIns.map((plugIn, plugInIndex) => {\n                              return (\n                                <option\n                                  key={\"plugInOption\" + plugInIndex}\n                                  value={plugIn.id}\n                                >\n                                  {plugIn.name}\n                                </option>\n                              );\n                            })}\n                          </select>\n                          <small className=\"text-danger\">\n                            {this.state.errorsClientForm[\"plugIn\"]}\n                          </small>\n                        </div>\n                      </div>\n                    ) : null}\n                  </div>\n\n                  <div className=\"col-sm-12 mb-2\">\n                    <hr></hr>\n                  </div>\n\n                  <div className=\"row\">\n                    <div className=\"col-sm-5 mb-2\">\n                      <img\n                        alt=\"copy\"\n                        src={CopyIcon}\n                        height=\"15px\"\n                      />\n                      <a\n                        onClick={this.copyFromServerToClient.bind(this)}\n                        href=\"#\"\n                        className=\"theme-color cursor-pointer ml-1\"\n                      >\n                        <small>Copy details from server</small>\n                      </a>\n                    </div>\n                    <div className=\"col-sm-7 mb-2\">\n                      <button\n                        id=\"create-client-btn\"\n                        disabled={!this.state.clientFormIsValid}\n                        onClick={this.saveFile.bind(this, \"client\")}\n                        className=\"btn btn-sm customize-view-btn mr-2\"\n                      >\n                        SAVE SCRIPT\n                      </button>\n                      <button\n                        id=\"create-client-btn\"\n                        disabled={!this.state.clientFormIsValid}\n                        onClick={this.downloadFile.bind(this, \"client\")}\n                        className=\"btn btn-sm customize-view-btn ml-2\"\n                      >\n                        DOWNLOAD SCRIPT\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              ) : null}\n\n              {this.state.agentForm.agentMode.value === 4 ? (\n                <div className=\"changeable-form maintainagentcreate-body x-server-form\">\n                  <div className=\"row\">\n                    <div className=\"col-sm-4\">\n                      <div className=\"col-sm-12 label required\">\n                        Mode <img alt=\"down-arrow\" src={IconGreenSortingDown} />\n                      </div>\n                      <div className=\"col-sm-12 mb-2\">\n                        <input\n                          type=\"text\"\n                          className=\"form-control form-control-sm\"\n                          name=\"mode\"\n                          disabled={true}\n                          defaultValue={this.state.xserverForm.mode}\n                        />\n                      </div>\n                    </div>\n                    <div className=\"col-sm-4\">\n                      <div className=\"col-sm-12 label required\">\n                        Group{\" \"}\n                        <img alt=\"down-arrow\" src={IconGreenSortingDown} />\n                      </div>\n                      <div className=\"col-sm-12 mb-2\">\n                        <select\n                          className=\"form-control form-control-sm\"\n                          name=\"group\"\n                          value={this.state.xserverForm.group.value}\n                          onChange={(event) => {\n                            this.handleXServerFormData(event);\n                          }}\n                        >\n                          {this.state.groups.map((group, groupIndex) => {\n                            return (\n                              <option\n                                key={\"groupOption\" + groupIndex}\n                                value={group.groupId}\n                              >\n                                {group.groupId}\n                              </option>\n                            );\n                          })}\n                        </select>\n                        <small className=\"text-danger\">\n                          {this.state.errorsXServerForm[\"group\"]}\n                        </small>\n                      </div>\n                    </div>\n\n                    <div className=\"col-sm-4\">\n                      <div className=\"col-sm-12 label required\">\n                        Client ID{\" \"}\n                        <img alt=\"down-arrow\" src={IconGreenSortingDown} />\n                      </div>\n                      <div className=\"col-sm-12 mb-2\">\n                        <input\n                          type=\"text\"\n                          autoComplete=\"off\"\n                          className=\"form-control form-control-sm\"\n                          name=\"clientId\"\n                          value={this.state.xserverForm.clientId.value}\n                          onChange={(event) => {\n                            this.handleXServerFormData(event);\n                          }}\n                        />\n                        <small className=\"text-danger\">\n                          {this.state.errorsXServerForm[\"clientId\"]}\n                        </small>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"row\">\n                    <div className=\"col-sm-4\">\n                      <div className=\"col-sm-12 label required\">\n                        OAUTH2{\" \"}\n                        <img alt=\"down-arrow\" src={IconGreenSortingDown} />\n                      </div>\n                      <div className=\"col-sm-12 mb-2\">\n                        <input\n                          type=\"text\"\n                          autoComplete=\"off\"\n                          className=\"form-control form-control-sm\"\n                          name=\"OAuth2\"\n                          value={this.state.xserverForm.OAuth2.value}\n                          onChange={(event) => {\n                            this.handleXServerFormData(event);\n                          }}\n                        />\n                        <small className=\"text-danger\">\n                          {this.state.errorsXServerForm[\"OAuth2\"]}\n                        </small>\n                      </div>\n                    </div>\n                    <div className=\"col-sm-4\">\n                      <div className=\"col-sm-12 label required\">\n                        Host <img alt=\"down-arrow\" src={IconGreenSortingDown} />\n                      </div>\n                      <div className=\"col-sm-12 mb-2\">\n                        <select\n                          className=\"form-control form-control-sm\"\n                          name=\"host\"\n                          value={this.state.xserverForm.host.value}\n                          onChange={(event) => {\n                            this.handleXServerFormData(event);\n                          }}\n                        >\n                          {this.state.gateways.map((gateway, gatewayIndex) => {\n                            return (\n                              <option\n                                key={\"gatewayOption\" + gatewayIndex}\n                                value={gateway.id}\n                              >\n                                {gateway.name}\n                              </option>\n                            );\n                          })}\n                        </select>\n                        <small className=\"text-danger\">\n                          {this.state.errorsXServerForm[\"host\"]}\n                        </small>\n                      </div>\n                    </div>\n                    <div className=\"col-sm-4\">\n                      <div className=\"col-sm-12 label required\">\n                        Remote Host{\" \"}\n                        <img alt=\"down-arrow\" src={IconGreenSortingDown} />\n                      </div>\n                      <div className=\"col-sm-12 mb-2\">\n                        <input\n                          type=\"text\"\n                          autoComplete=\"off\"\n                          className=\"form-control form-control-sm\"\n                          name=\"remoteHost\"\n                          value={this.state.xserverForm.remoteHost.value}\n                          onChange={(event) => {\n                            this.handleXServerFormData(event);\n                          }}\n                        />\n                        <small className=\"text-danger\">\n                          {this.state.errorsXServerForm[\"remoteHost\"]}\n                        </small>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"col-sm-12 mb-2\">\n                    <hr></hr>\n                  </div>\n\n                  <div className=\"row\">\n                    <div className=\"col-sm-5 mb-2\">\n                      <img\n                        alt=\"copy\"\n                        src={CopyIcon}\n                        height=\"15px\"\n                      />\n                      <a\n                        onClick={this.copyFromXClientToXServer.bind(this)}\n                        href=\"#\"\n                        className=\"theme-color cursor-pointer ml-1\"\n                      >\n                        <small>Copy details from x:client</small>\n                      </a>\n                    </div>\n                    <div className=\"col-sm-7 mb-2\">\n                      <button\n                        id=\"create-server-btn\"\n                        disabled={!this.state.xserverFormIsValid}\n                        onClick={this.saveFile.bind(this, \"x:server\")}\n                        className=\"btn btn-sm customize-view-btn mr-2\"\n                      >\n                        SAVE SCRIPT\n                      </button>\n\n                      <button\n                        id=\"create-server-btn\"\n                        disabled={!this.state.xserverFormIsValid}\n                        onClick={this.downloadFile.bind(this, \"x:server\")}\n                        className=\"btn btn-sm customize-view-btn ml-2\"\n                      >\n                        DOWNLOAD SCRIPT\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              ) : null}\n\n              {this.state.agentForm.agentMode.value === 5 ? (\n                <div className=\"changeable-form maintainagentcreate-body x-client-form\">\n                  <div className=\"row\">\n                    <div className=\"col-sm-4\">\n                      <div className=\"col-sm-12 label required\">\n                        Mode <img alt=\"down-arrow\" src={IconGreenSortingDown} />\n                      </div>\n                      <div className=\"col-sm-12 mb-2\">\n                        <input\n                          type=\"text\"\n                          className=\"form-control form-control-sm\"\n                          name=\"mode\"\n                          disabled={true}\n                          defaultValue={this.state.xclientForm.mode}\n                        />\n                      </div>\n                    </div>\n                    <div className=\"col-sm-4\">\n                      <div className=\"col-sm-12 label required\">\n                        Group{\" \"}\n                        <img alt=\"down-arrow\" src={IconGreenSortingDown} />\n                      </div>\n                      <div className=\"col-sm-12 mb-2\">\n                        <select\n                          className=\"form-control form-control-sm\"\n                          name=\"group\"\n                          value={this.state.xclientForm.group.value}\n                          onChange={(event) => {\n                            this.handleXClientFormData(event);\n                          }}\n                        >\n                          {this.state.groups.map((group, groupIndex) => {\n                            return (\n                              <option\n                                key={\"groupOption\" + groupIndex}\n                                value={group.groupId}\n                              >\n                                {group.groupId}\n                              </option>\n                            );\n                          })}\n                        </select>\n                        <small className=\"text-danger\">\n                          {this.state.errorsXClientForm[\"group\"]}\n                        </small>\n                      </div>\n                    </div>\n\n                    <div className=\"col-sm-4\">\n                      <div className=\"col-sm-12 label required\">\n                        Client ID{\" \"}\n                        <img alt=\"down-arrow\" src={IconGreenSortingDown} />\n                      </div>\n                      <div className=\"col-sm-12 mb-2\">\n                        <input\n                          type=\"text\"\n                          autoComplete=\"off\"\n                          className=\"form-control form-control-sm\"\n                          name=\"clientId\"\n                          value={this.state.xclientForm.clientId.value}\n                          onChange={(event) => {\n                            this.handleXClientFormData(event);\n                          }}\n                        />\n                        <small className=\"text-danger\">\n                          {this.state.errorsXClientForm[\"clientId\"]}\n                        </small>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"row\">\n                    <div className=\"col-sm-4\">\n                      <div className=\"col-sm-12 label required\">\n                        OAUTH2{\" \"}\n                        <img alt=\"down-arrow\" src={IconGreenSortingDown} />\n                      </div>\n                      <div className=\"col-sm-12 mb-2\">\n                        <input\n                          type=\"text\"\n                          autoComplete=\"off\"\n                          className=\"form-control form-control-sm\"\n                          name=\"OAuth2\"\n                          value={this.state.xclientForm.OAuth2.value}\n                          onChange={(event) => {\n                            this.handleXClientFormData(event);\n                          }}\n                        />\n                        <small className=\"text-danger\">\n                          {this.state.errorsXClientForm[\"OAuth2\"]}\n                        </small>\n                      </div>\n                    </div>\n                    <div className=\"col-sm-4\">\n                      <div className=\"col-sm-12 label required\">\n                        Host <img alt=\"down-arrow\" src={IconGreenSortingDown} />\n                      </div>\n                      <div className=\"col-sm-12 mb-2\">\n                        <select\n                          className=\"form-control form-control-sm\"\n                          name=\"host\"\n                          value={this.state.xclientForm.host.value}\n                          onChange={(event) => {\n                            this.handleXClientFormData(event);\n                          }}\n                        >\n                          {this.state.gateways.map((gateway, gatewayIndex) => {\n                            return (\n                              <option\n                                key={\"gatewayOption\" + gatewayIndex}\n                                value={gateway.id}\n                              >\n                                {gateway.name}\n                              </option>\n                            );\n                          })}\n                        </select>\n                        <small className=\"text-danger\">\n                          {this.state.errorsXClientForm[\"host\"]}\n                        </small>\n                      </div>\n                    </div>\n                    <div className=\"col-sm-4\">\n                      <div className=\"col-sm-12 label required\">\n                        Remote Host{\" \"}\n                        <img alt=\"down-arrow\" src={IconGreenSortingDown} />\n                      </div>\n                      <div className=\"col-sm-12 mb-2\">\n                        <input\n                          type=\"text\"\n                          autoComplete=\"off\"\n                          className=\"form-control form-control-sm\"\n                          name=\"remoteHost\"\n                          value={this.state.xclientForm.remoteHost.value}\n                          onChange={(event) => {\n                            this.handleXClientFormData(event);\n                          }}\n                        />\n                        <small className=\"text-danger\">\n                          {this.state.errorsXClientForm[\"remoteHost\"]}\n                        </small>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"col-sm-12 mb-2\">\n                    <hr></hr>\n                  </div>\n\n                  <div className=\"row\">\n                    <div className=\"col-sm-5 mb-2\">\n                      <img\n                        alt=\"copy\"\n                        src={CopyIcon}\n                        height=\"15px\"\n                      />\n                      <a\n                        onClick={this.copyFromXServerToXClient.bind(this)}\n                        href=\"#\"\n                        className=\"theme-color cursor-pointer ml-1\"\n                      >\n                        <small>Copy details from x:server</small>\n                      </a>\n                    </div>\n                    <div className=\"col-sm-7 mb-2\">\n                      <button\n                        id=\"create-client-btn\"\n                        disabled={!this.state.xclientFormIsValid}\n                        onClick={this.saveFile.bind(this, \"x:client\")}\n                        className=\"btn btn-sm customize-view-btn mr-2\"\n                      >\n                        SAVE SCRIPT\n                      </button>\n\n                      <button\n                        id=\"create-client-btn\"\n                        /*  disabled = {!this.state.xclientFormIsValid}  */\n                        onClick={this.downloadFile.bind(this, \"x:client\")}\n                        className=\"btn btn-sm customize-view-btn ml-2\"\n                      >\n                        DOWNLOAD SCRIPT\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              ) : null}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n    /* jshint ignore:end */\n  }\n}\n"],"sourceRoot":""}