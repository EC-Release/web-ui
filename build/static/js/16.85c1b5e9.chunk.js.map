{"version":3,"sources":["assets/images/icon_arrowmore.svg","assets/images/x_button.svg","assets/images/leftarrowbutton.svg","assets/images/rightarrowbutton.svg","assets/images/refresh.svg","Treelist/Treelist.js","Topologygraph/Topologygraph.js","Viewtable/Viewtable.js","View/Customsearch.js","View/Technicalview.js","View/Businessview.js","View/View.js"],"names":["module","exports","Treelist","props","that","this","setTimeout","treeValue","length","topParentId","id","el","document","getElementById","click","items","key","children","onClick","changeTopology","bind","title","data-toggle","aria-expanded","href","value","className","map","item","handleGenerateTreeList","React","Component","Topologygraph","generateTopology","nodeData","Network","refs","myRef","height","moveTo","position","x","y","offset","scale","ref","Viewtable","tableData","thead","val","index","fieldName","tbody","tbodyVal","tbodyIndex","Fragment","data-target","role","tdIndex","hiddenValue","hiddenState","showHideTableTdData","alt","src","IconArrowMore","colSpan","Healthstatus","userId","showGlobalMessage","hideGlobalMessage","tableindx","permissions","Customsearch","state","allStateFields","availableFields","filteredAvailableFields","selectedFields","filteredSelectedFields","clickedFilteredAvailableFieldIndex","clickedFilteredSelectedFieldIndex","whereCondition","whereOperator","formDatas","finalFormDatas","isFormValid","isDisableCreateViewButton","allFields","condition","label","operator","whereField","fieldId","whereValue","whereValueError","slicedAvailableFields","selectedField","filter","obj","setState","propName","term","termLowerCase","toLowerCase","singleObj","Object","keys","some","indexOf","myArray","i","splice","e","searchStr","target","trim","filteredCurrentAvailableFields","filterBy","currentAvailableFields","objToMove","removeObject","push","filteredCurrentSelectedFields","currentSelectedFields","currentFormRows","formNewObject","formValidation","formRowIndex","type","currentFormRowIndex","name","updatedFieldValue","createView","formData","onChange","event","changeFormValue","whereConditionObjet","field","whereOperatorObjet","autoComplete","removeFormRow","IconXButton","addNewFilter","resetFilter","availableFieldsSerach","placeholder","availableFieldObj","availableFieldIndex","handleAvailableFieldSelect","handleMoveInAvailable","IconLeftArrowButton","handleMoveInSelected","IconRightArrowButton","selectedFieldsSerach","selectedFieldObj","selectedFieldIndex","handleSelectedFieldSelect","disabled","applyFilter","Technicalview","graph","nodes","edges","loadTreeJs","centerNodeColor","nodeShapes","apiLoadPercentage","mockTableData","table","isSearchView","color","edgeLabel","sessionStorage","setItem","JSON","stringify","localStorage","getItem","technicalTableData","progressPercent","fetch","baseUrl","method","headers","Accept","Authorization","authToken","then","response","status","json","respData","errorStatus","data","listdata","groupName","groupId","sessionId","subscriptions","numOfSubscriptions","totalNumOfAjax","totalNumOfAjaxProcessed","console","log","Math","round","newId","indexSubscriptions","subscriptionId","subscriptionName","newSubscriptionsObj","valueToshow","substr","nodeType","glist","suidbscriptionId","subscrititleptionName","cfURL","gateways","gatewaysCount","indexGateway","newGatewayObj","cfUrl","startPos","endPos","slice","gatewayShortCurl","first7Char","last7Char","split","SuperConns","serverId","ClientPool","bindId","Sessions","clientConfig","clientPools","preparedClientPools","clientPoolCounts","superConns","preparedSuperConns","superConnCounts","sessions","secondarySessions","preparedSessions","sessionCounts","sessionIndex","prepareSessionData","forEach","element","removeDuplicates","indexClientPool","newClientPoolObj","preparePoolDataForTable","subscription_name","gateway","group_id","count","indexSuperConn","newSuperConnObj","prepareSupperConDataForTable","sessionIndexToPushChildren","indexSession","newSessionObj","prepareSessionDataForTable","generateTableStructure","treeObj","parentNode","shape","childNode","childNodeId","childNodeLabel","childNodeTitle","childColor","childNodeEgdeLabel","preparedChildNode","prepareEdges","from","to","displayDataFromLocalStorage","clearInterval","timer","parse","gatewayId","RefID","IP","bindid","targetId","timeCreated","serviceUrl","allDataKeys","dataKey","theadOject","toTableHeaderCase","allData","tbodyObj","objKey","str","word","charAt","toUpperCase","join","objectIndex","itemIndex","currentTbody","copiedObjectToChange","assign","tempValue","parentNodeId","parentNodeLabel","parentNodeTitle","childern","copiedChildNode","childNodeType","childNodeColor","myArr","prop","pos","arr","mapObj","tableId","$","DataTable","destroy","destroyDataTable","filterFields","filteredData","andFilters","orFilters","filterField","andFilter","orResults","orFilter","orFilteredDatas","wholeData","orFilteredData","orResult","seen","create","o","k","selectedDataKeys","selDatakey","aria-controls","aria-selected","refreshData","IconRefresh","aria-labelledby","changeToSearchView","style","width","changeTopologyView","Businessview","options","layout","hierarchical","View","topologyView","fn","extend","treed","openedClass","closedClass","tree","addClass","find","has","each","branch","prepend","on","toggleClass","toggle","closest","preventDefault","checked","htmlFor","servedTopologyView"],"mappings":"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","file":"static/js/16.85c1b5e9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icon_arrowmore.d49ae6a5.svg\";","module.exports = __webpack_public_path__ + \"static/media/x_button.47259160.svg\";","module.exports = __webpack_public_path__ + \"static/media/leftarrowbutton.8f0a6766.svg\";","module.exports = __webpack_public_path__ + \"static/media/rightarrowbutton.597b923c.svg\";","module.exports = __webpack_public_path__ + \"static/media/refresh.bcf2dbd4.svg\";","import React from \"react\";\n\nexport default class Treelist extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  /* istanbul ignore next */\n  componentDidMount() {\n    let that = this;\n\n    setTimeout(function () {\n      //window.loadTree('treeList');\n      if (that.props.treeValue.length > 0) {\n        let topParentId = that.props.treeValue[0].id;\n        let el = document.getElementById(\"parentTreeNodeAnchor\" + topParentId);\n        if (el !== null) {\n          el.click();\n        }\n      }\n    }, 2);\n  }\n\n  /* istanbul ignore next */\n  componentDidUpdate() {\n    //console.log(this.props.treeValue);\n  }\n\n  /* istanbul ignore next */\n  handleGenerateTreeList(items, key) {\n    if (items.children) {\n      /* jshint ignore:start */\n      return (\n        <li key={items.id}>\n          <a\n            id={\"parentTreeNodeAnchor\" + items.id}\n            onClick={this.props.changeTopology.bind(this, items)}\n            title={items.title}\n            data-toggle=\"collapse\" aria-expanded=\"false\"\n            href={\"#childTreeNodeAnchor\" + items.id}\n          >\n            &nbsp;\n            {items.value}\n          </a>\n          <ul id={\"childTreeNodeAnchor\" + items.id} className=\"collapse\">\n            {items.children.map((item, key) => {\n              return this.handleGenerateTreeList(item, key);\n            })}\n          </ul>\n        </li>\n      );\n      /* jshint ignore:end */\n    } else {\n      /* jshint ignore:start */\n      return (\n        <li title={items.title} key={items.id}>\n          {items.value}\n        </li>\n      );\n      /* jshint ignore:end */\n    }\n  }\n\n  render() {\n    /* jshint ignore:start */\n    /* istanbul ignore next */\n    return (\n        <ul id=\"treeList\">\n          {this.props.treeValue.length > 0 ? (\n            this.props.treeValue.map((item, key) => {\n              return this.handleGenerateTreeList(item, key);\n            })\n          ) : (\n            <li>No record</li>\n          )}\n        </ul>\n    );\n    /* jshint ignore:end */\n  }\n}\n","import React from \"react\";\n//import { vis } from \"vis-network\";\n//import { DataSet, Network } from 'vis-network/standalone/esm/vis-network';\nimport {\n  Network,\n  DataSet,\n} from \"vis-network/standalone/umd/vis-network.min.js\";\n\nexport default class Topologygraph extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount() {\n    this.generateTopology(this.props.nodeData);\n  }\n\n  /* istanbul ignore next */\n  componentDidUpdate() {\n    this.generateTopology(this.props.nodeData);\n  }\n\n  generateTopology(nodeData) {\n    var width = 400;\n    var height = 280;\n    var options = {\n      height: \"280px\",\n    };\n    var network = new Network(this.refs.myRef, nodeData, options);\n    network.moveTo({\n      position: { x: 0, y: 0 },\n      offset: { x: -width / 2, y: -height / 2 },\n      scale: 1,\n    });\n  }\n  render() {\n    /* jshint ignore:start */\n    /* istanbul ignore next */\n    return (\n      <div  className=\"Topologygraph\" id=\"topologygraph\" >\n        <div ref=\"myRef\"></div>\n      </div>\n    );\n    /* jshint ignore:end */\n  }\n}\n","import React from \"react\";\nimport Healthstatus from \"../Monitor/Healthstatus.js\";\nimport $ from 'jquery';\n\nimport IconArrowMore from '../assets/images/icon_arrowmore.svg';\n\nexport default class Viewtable extends React.Component {\n    /* istanbul ignore next */\n    componentDidMount(){\n        //window.initTable('viewTable');\n    }\n\n    /* istanbul ignore next */\n    componentDidUpdate(){\n        //window.initTable('viewTable');\n    }\n\n    render(){\n        /* jshint ignore:start */\n        /* istanbul ignore next */\n        return(/* istanbul ignore next */\n          /*  <table id=\"viewTable\" className=\"table\">\n                <thead>\n                    <tr>\n                        {this.props.tableData.thead.map((val, index) => {\n                            return(<th key={'viewTableThead_'+index}>{ val.fieldName }</th>)\n                        })}\n                    </tr>\n                </thead>\n                <tbody>\n                    {this.props.tableData.tbody.map((tbodyVal, tbodyIndex) => {\n                        return(\n                            <tr key={'viewTableTbodyTr_'+tbodyIndex}>\n                                {this.props.tableData.thead.map((val, tdIndex) => {\n                                    return(\n                                        <td key={'viewTableTbodyTd_'+tdIndex}>\n                                            { tbodyVal[tdIndex].value } &nbsp;&nbsp;\n                                            {\n                                                tbodyVal[tdIndex].hiddenValue && tbodyVal[tdIndex].hiddenValue != '' && tbodyVal[tdIndex].hiddenState ?\n                                                    <img onClick={this.props.showHideTableTdData.bind(this, tbodyIndex, tdIndex)} className=\"icon-arrowmore\" alt=\"td-detail\" src=\"assets/static/images/icon_arrowmore.svg\" />:\n                                                    null\n                                            }\n                                        </td>\n                                    )\n                                })}\n                            </tr>\n                        )\n                    })}\n                </tbody>\n            </table>*/\n        <table className=\"table \">\n          <thead>\n            <tr>\n              {this.props.tableData.thead.map((val, index) => {\n                return <th key={\"viewTableThead_\" + index}>{val.fieldName}</th>;\n              })}\n            </tr>\n          </thead>\n          <tbody>\n            {this.props.tableData.tbody.map((tbodyVal, tbodyIndex) => {\n              return (\n                <React.Fragment key={\"viewTableTbodyTr_\" + tbodyIndex}>\n                  <tr\n                    data-toggle=\"collapse\"\n                    data-target={\"#collapseme\" + tbodyIndex}\n                    role=\"row\"\n                    className=\"parent-row\"\n                  >\n                    {this.props.tableData.thead.map((val, tdIndex) => {\n                      return (\n                        <td key={\"viewTableTbodyTd_\" + tdIndex}>\n                          {}\n                          {tbodyVal[tdIndex].value} &nbsp;&nbsp;\n                          {tbodyVal[tdIndex].hiddenValue &&\n                          tbodyVal[tdIndex].hiddenValue != \"\" &&\n                          tbodyVal[tdIndex].hiddenState ? (\n                            <img\n                              onClick={this.props.showHideTableTdData.bind(\n                                this,\n                                tbodyIndex,\n                                tdIndex\n                              )}\n                              className=\"icon-arrowmore\"\n                              alt=\"td-detail\"\n                              src={IconArrowMore}\n                            />\n                          ) : null}\n                        </td>\n                      );\n                    })}\n                  </tr>\n                  <tr id={\"collapseme\" + tbodyIndex} className=\"collapse out\">\n                    <td colSpan=\"8\">\n                      <div>\n                        <Healthstatus\n                          userId={this.props.userId}\n                          showGlobalMessage={this.props.showGlobalMessage.bind(\n                            this\n                          )}\n                          hideGlobalMessage={this.props.hideGlobalMessage.bind(\n                            this\n                          )}\n                          tableindx={tbodyIndex}\n                          permissions={this.props.permissions}\n                        />\n                      </div>\n                    </td>\n                  </tr>\n                </React.Fragment>\n              );\n            })}\n          </tbody>\n        </table>\n        )\n        /* jshint ignore:end */\n    }\n}\n","import React from \"react\";\n\nimport IconXButton from '../assets/images/x_button.svg';\nimport IconLeftArrowButton from '../assets/images/leftarrowbutton.svg';\nimport IconRightArrowButton from '../assets/images/rightarrowbutton.svg';\n\nexport default class Customsearch extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      allStateFields: [],\n      availableFields: [],\n      filteredAvailableFields: [],\n      selectedFields: [],\n      filteredSelectedFields: [],\n      clickedFilteredAvailableFieldIndex: \"\",\n      clickedFilteredSelectedFieldIndex: \"\",\n      whereCondition: [],\n      whereOperator: [],\n      formDatas: [],\n      finalFormDatas: [],\n      isFormValid: true,\n      isDisableCreateViewButton: false,\n    };\n  }\n\n  /* istanbul ignore next */\n  componentDidMount() {\n    let allStateFields = [...this.props.allFields];\n    let selectedFields = [...this.props.selectedFields];\n\n    let whereCondition = [\n      { condition: \"AND\", label: \"AND\" },\n      { condition: \"OR\", label: \"OR\" },\n    ];\n    let whereOperator = [\n      { operator: \"=\", label: \"=\" },\n      { operator: \">\", label: \">\" },\n      { operator: \"<\", label: \"<\" },\n      { operator: \"!=\", label: \"!=\" },\n    ];\n    let formDatas = [\n      {\n        whereCondition: whereCondition[0].condition,\n        whereField: allStateFields[0].fieldId,\n        whereOperator: whereOperator[0].operator,\n        whereValue: \"\",\n        whereValueError: \"\",\n      },\n    ];\n\n    let slicedAvailableFields = allStateFields;\n    for (let selectedField of selectedFields) {\n      slicedAvailableFields = slicedAvailableFields.filter(function (obj) {\n        // jshint ignore:line\n        return obj.fieldId !== selectedField.fieldId;\n      });\n    }\n\n    this.setState({\n      allStateFields: allStateFields,\n      availableFields: slicedAvailableFields,\n      filteredAvailableFields: slicedAvailableFields,\n      selectedFields: selectedFields,\n      filteredSelectedFields: selectedFields,\n      whereCondition: whereCondition,\n      whereOperator: whereOperator,\n      formDatas: formDatas,\n    });\n  }\n\n  /* istanbul ignore next */\n  handleAvailableFieldSelect(index) {\n    this.setState({\n      clickedFilteredAvailableFieldIndex: index,\n      clickedFilteredSelectedFieldIndex: \"\",\n    });\n  }\n\n  /* istanbul ignore next */\n  handleSelectedFieldSelect(index) {\n    this.setState({\n      clickedFilteredSelectedFieldIndex: index,\n      clickedFilteredAvailableFieldIndex: \"\",\n    });\n  }\n\n  /* istanbul ignore next */\n  filterBy(propName, term) {\n    const termLowerCase = term.toLowerCase();\n    return (singleObj) =>\n      Object.keys(singleObj).some(\n        (propName) =>\n          singleObj[propName].toLowerCase().indexOf(termLowerCase) !== -1\n      );\n  }\n\n  /* istanbul ignore next */\n  removeObject(myArray, key, value) {\n    for (var i = 0; i < myArray.length; i++) {\n      if (myArray[i][key] === value) myArray.splice(i, 1);\n    }\n    return myArray;\n  }\n\n  /* istanbul ignore next */\n  availableFieldsSerach(e) {\n    let searchStr = e.target.value.trim();\n    let filteredCurrentAvailableFields = [];\n    if (searchStr !== \"\") {\n      let currentAvailableFields = [...this.state.availableFields];\n      filteredCurrentAvailableFields = currentAvailableFields.filter(\n        this.filterBy(\"fieldName\", searchStr)\n      );\n    } else {\n      filteredCurrentAvailableFields = [...this.state.availableFields];\n    }\n    this.setState({\n      filteredAvailableFields: filteredCurrentAvailableFields,\n      clickedFilteredAvailableFieldIndex: \"\",\n    });\n  }\n\n  /* istanbul ignore next */\n  handleMoveInSelected() {\n    let clickedFilteredAvailableFieldIndex =\n      this.state.clickedFilteredAvailableFieldIndex;\n    if (clickedFilteredAvailableFieldIndex !== \"\") {\n      let currentAvailableFields = [...this.state.availableFields];\n      let filteredAvailableFields = [...this.state.filteredAvailableFields];\n      let selectedFields = [...this.state.selectedFields];\n      let filteredSelectedFields = [...this.state.filteredSelectedFields];\n      let objToMove =\n        filteredAvailableFields[clickedFilteredAvailableFieldIndex];\n      let isDisableCreateViewButton = false;\n      filteredAvailableFields.splice(clickedFilteredAvailableFieldIndex, 1);\n      currentAvailableFields = this.removeObject(\n        currentAvailableFields,\n        \"fieldId\",\n        objToMove.fieldId\n      );\n      selectedFields.push(objToMove);\n      filteredSelectedFields.push(objToMove);\n      if (selectedFields.length === 0) {\n        isDisableCreateViewButton = true;\n      }\n      this.setState({\n        availableFields: currentAvailableFields,\n        filteredAvailableFields: filteredAvailableFields,\n        selectedFields: selectedFields,\n        filteredSelectedFields: filteredSelectedFields,\n        clickedFilteredAvailableFieldIndex: \"\",\n        isDisableCreateViewButton: isDisableCreateViewButton,\n      });\n    }\n  }\n\n  /* istanbul ignore next */\n  selectedFieldsSerach(e) {\n    let searchStr = e.target.value.trim();\n    let filteredCurrentSelectedFields = [];\n    if (searchStr !== \"\") {\n      let currentselectedFields = [...this.state.selectedFields];\n      filteredCurrentSelectedFields = currentselectedFields.filter(\n        this.filterBy(\"fieldName\", searchStr)\n      );\n    } else {\n      filteredCurrentSelectedFields = [...this.state.selectedFields];\n    }\n    this.setState({\n      filteredSelectedFields: filteredCurrentSelectedFields,\n      clickedFilteredSelectedFieldIndex: \"\",\n    });\n  }\n\n  /* istanbul ignore next */\n  handleMoveInAvailable() {\n    let clickedFilteredSelectedFieldIndex =\n      this.state.clickedFilteredSelectedFieldIndex;\n    if (clickedFilteredSelectedFieldIndex !== \"\") {\n      let currentSelectedFields = [...this.state.selectedFields];\n      let filteredSelectedFields = [...this.state.filteredSelectedFields];\n      let availableFields = [...this.state.availableFields];\n      let filteredAvailableFields = [...this.state.filteredAvailableFields];\n      let objToMove = filteredSelectedFields[clickedFilteredSelectedFieldIndex];\n      let isDisableCreateViewButton = false;\n      filteredSelectedFields.splice(clickedFilteredSelectedFieldIndex, 1);\n      currentSelectedFields = this.removeObject(\n        currentSelectedFields,\n        \"fieldId\",\n        objToMove.fieldId\n      );\n      availableFields.push(objToMove);\n      filteredAvailableFields.push(objToMove);\n      if (currentSelectedFields.length === 0) {\n        isDisableCreateViewButton = true;\n      }\n      this.setState({\n        selectedFields: currentSelectedFields,\n        filteredSelectedFields: filteredSelectedFields,\n        availableFields: availableFields,\n        filteredAvailableFields: filteredAvailableFields,\n        clickedFilteredSelectedFieldIndex: \"\",\n        isDisableCreateViewButton: isDisableCreateViewButton,\n      });\n    }\n  }\n\n  /* istanbul ignore next */\n  addNewFilter() {\n    let currentFormRows = [...this.state.formDatas];\n    let formNewObject = {\n      whereCondition: this.state.whereCondition[0].condition,\n      whereField: this.state.allStateFields[0].fieldId,\n      whereOperator: this.state.whereOperator[0].operator,\n      whereValue: \"\",\n      whereValueError: \"\",\n    };\n    currentFormRows.push(formNewObject);\n\n    this.setState({\n      formDatas: currentFormRows,\n    });\n    setTimeout(() => {\n      this.formValidation(\"inline\");\n    }, 500);\n  }\n\n  /* istanbul ignore next */\n  removeFormRow(formRowIndex) {\n    let currentFormRows = [...this.state.formDatas];\n    currentFormRows.splice(formRowIndex, 1);\n\n    this.setState({\n      formDatas: currentFormRows,\n    });\n    setTimeout(() => {\n      this.formValidation(\"inline\");\n    }, 500);\n  }\n\n  /* istanbul ignore next */\n  formValidation(type) {\n    let isFormValid = true;\n    let currentFormRows = [...this.state.formDatas];\n\n    for (let currentFormRowIndex in currentFormRows) {\n      let whereValue = currentFormRows[currentFormRowIndex].whereValue.trim();\n      if (whereValue === \"\") {\n        if (type !== \"inline\")\n          currentFormRows[currentFormRowIndex].whereValueError =\n            \"Please enter value\";\n        isFormValid = false;\n      }\n    }\n\n    if (currentFormRows.length === 0) {\n      isFormValid = false;\n    }\n\n    this.setState({\n      formDatas: currentFormRows,\n      isFormValid: isFormValid,\n    });\n  }\n\n  /* istanbul ignore next */\n  changeFormValue(e, formRowIndex) {\n    let fieldName = e.target.name;\n    let updatedFieldValue = e.target.value;\n    let currentFormRows = [...this.state.formDatas];\n    if (fieldName === \"whereValue\") {\n      currentFormRows[formRowIndex].whereValue = updatedFieldValue;\n      updatedFieldValue = updatedFieldValue.trim();\n      if (updatedFieldValue === \"\") {\n        currentFormRows[formRowIndex].whereValueError = \"Please enter value\";\n      } else {\n        currentFormRows[formRowIndex].whereValueError = \"\";\n      }\n    } else if (fieldName === \"whereCondition\") {\n      currentFormRows[formRowIndex].whereCondition = updatedFieldValue;\n    } else if (fieldName === \"whereField\") {\n      currentFormRows[formRowIndex].whereField = updatedFieldValue;\n    } else if (fieldName === \"whereOperator\") {\n      currentFormRows[formRowIndex].whereOperator = updatedFieldValue;\n    }\n\n    this.setState({\n      formDatas: currentFormRows,\n    });\n    this.formValidation(\"inline\");\n  }\n\n  /* istanbul ignore next */\n  applyFilter() {\n    this.setState({\n      finalFormDatas: [...this.state.formDatas],\n    });\n    this.props.showGlobalMessage(\n      false,\n      true,\n      \"Filter applied successfully\",\n      \"custom-success\"\n    );\n    let that = this;\n    setTimeout(function () {\n      that.props.hideGlobalMessage();\n      that.props.createView(\n        that.state.selectedFields,\n        that.state.finalFormDatas\n      );\n    }, 2000);\n  }\n\n  /* istanbul ignore next */\n  resetFilter() {\n    let formDatas = [\n      {\n        whereCondition: this.state.whereCondition[0].condition,\n        whereField: this.state.allStateFields[0].fieldId,\n        whereOperator: this.state.whereOperator[0].operator,\n        whereValue: \"\",\n        whereValueError: \"\",\n      },\n    ];\n\n    this.setState({\n      formDatas: formDatas,\n      finalFormDatas: [],\n      isFormValid: true,\n    });\n  }\n\n  render() {\n    /* jshint ignore:start */\n    /* istanbul ignore next */\n    return (\n      <div className=\"Customsearch\">\n        <div className=\"row\">\n          <div className=\"col-sm-6 vdivide\">\n            <div className=\"centered-div-header\">\n              <div className=\"row view-header\">\n                <div className=\"col-sm-8\">\n                  <h6>\n                    Search Criteria <small>Search parameters</small>\n                  </h6>\n                </div>\n                <div className=\"col-sm-4\">&nbsp;</div>\n              </div>\n            </div>\n            <hr></hr>\n            <div className=\"search-form\">\n              {this.state.formDatas.map((formData, formRowIndex) => {\n                return (\n                  <div key={\"form-row\" + formRowIndex}>\n                    {formRowIndex !== 0 ? (\n                      <div className=\"row mb-2\">\n                        <div className=\"col-sm-3\">\n                          <select\n                            onChange={(event) => {\n                              this.changeFormValue(event, formRowIndex);\n                            }}\n                            className=\"form-control\"\n                            id={\"whereCondition\" + formRowIndex}\n                            name=\"whereCondition\"\n                            value={formData.whereCondition}\n                          >\n                            {this.state.whereCondition.map(\n                              (whereConditionObjet, index) => {\n                                return (\n                                  <option\n                                    key={\n                                      \"whereConditionOption\" +\n                                      formRowIndex +\n                                      index\n                                    }\n                                    value={whereConditionObjet.condition}\n                                  >\n                                    {whereConditionObjet.label}\n                                  </option>\n                                );\n                              }\n                            )}\n                          </select>\n                        </div>\n                      </div>\n                    ) : null}\n\n                    <div className=\"row mb-2\">\n                      <div className=\"col-sm-4\">\n                        <select\n                          onChange={(event) => {\n                            this.changeFormValue(event, formRowIndex);\n                          }}\n                          value={formData.whereField}\n                          className=\"form-control\"\n                          id={\"whereField\" + formRowIndex}\n                          name=\"whereField\"\n                        >\n                          {this.state.allStateFields.map((field, index) => {\n                            return (\n                              <option\n                                key={\"whereFieldOption\" + formRowIndex + index}\n                                value={field.fieldId}\n                              >\n                                {field.fieldName}\n                              </option>\n                            );\n                          })}\n                        </select>\n                      </div>\n                      <div className=\"col-sm-3\">\n                        <select\n                          onChange={(event) => {\n                            this.changeFormValue(event, formRowIndex);\n                          }}\n                          value={formData.whereOperator}\n                          className=\"form-control\"\n                          id={\"whereOperator\" + formRowIndex}\n                          name=\"whereOperator\"\n                        >\n                          {this.state.whereOperator.map(\n                            (whereOperatorObjet, index) => {\n                              return (\n                                <option\n                                  key={\n                                    \"whereOperatorOption\" + formRowIndex + index\n                                  }\n                                  value={whereOperatorObjet.operator}\n                                >\n                                  {whereOperatorObjet.label}\n                                </option>\n                              );\n                            }\n                          )}\n                        </select>\n                      </div>\n                      <div className=\"col-sm-4\">\n                        <input\n                          onChange={(event) => {\n                            this.changeFormValue(event, formRowIndex);\n                          }}\n                          value={formData.whereValue}\n                          type=\"text\"\n                          className=\"form-control\"\n                          name=\"whereValue\"\n                          autoComplete=\"off\"\n                        />\n                        <small className=\"text-danger\">\n                          {formData.whereValueError !== \"\"\n                            ? formData.whereValueError\n                            : \"\"}\n                        </small>\n                      </div>\n                      <div className=\"col-sm-1\">\n                        <img\n                          onClick={this.removeFormRow.bind(this, formRowIndex)}\n                          className=\"remove-row\"\n                          alt=\"remove-row\"\n                          src={IconXButton}\n                        />\n                      </div>\n                    </div>\n                  </div>\n                );\n              })}\n              <div className=\"row\">\n                <div className=\"col-md-12\">\n                  <button\n                    onClick={this.addNewFilter.bind(this)}\n                    className=\"btn btn-sm float-left customize-view-btn\"\n                  >\n                    ADD FILTER\n                  </button>\n                </div>\n              </div>\n              <div className=\"row\">\n                <div className=\"col-md-12\">\n                  <span className=\"float-right\">\n                    {/*<button disabled={!this.state.isFormValid} onClick={this.applyFilter.bind(this)} className=\"btn btn-sm customize-view-btn\">APPLY</button> */}\n                    <button\n                      onClick={this.resetFilter.bind(this)}\n                      className=\"btn btn-sm customize-reset-btn ml-2\"\n                    >\n                      RESET\n                    </button>\n                  </span>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"col-sm-6 view-selection-panel\">\n            <div className=\"row\">\n              <div className=\"col-sm-5\">\n                <h6>\n                  <small>AVAILABLE FIELDS</small>\n                </h6>\n                <div className=\"pre-scrollable\">\n                  <div className=\"list-group\">\n                    <input\n                      type=\"text\"\n                      onChange={(event) => {\n                        this.availableFieldsSerach(event);\n                      }}\n                      className=\"form-control\"\n                      placeholder=\"Search\"\n                    />\n                    {this.state.filteredAvailableFields.map(\n                      (availableFieldObj, availableFieldIndex) => {\n                        return (\n                          <a\n                            onClick={this.handleAvailableFieldSelect.bind(\n                              this,\n                              availableFieldIndex\n                            )}\n                            key={\n                              \"availableFieldAnchorKey\" + availableFieldIndex\n                            }\n                            href=\"#\"\n                            className={\n                              this.state.clickedFilteredAvailableFieldIndex ===\n                              availableFieldIndex\n                                ? \"list-group-item list-group-item-action active\"\n                                : \"list-group-item list-group-item-action\"\n                            }\n                          >\n                            {availableFieldObj.fieldName}\n                          </a>\n                        );\n                      }\n                    )}\n                  </div>\n                </div>\n              </div>\n              <div className=\"col-sm-2 selection-button-div\">\n                <img\n                  onClick={this.handleMoveInAvailable.bind(this)}\n                  className=\"mx-auto d-block\"\n                  alt=\"view-field-selection\"\n                  src={IconLeftArrowButton}\n                />\n                <img\n                  onClick={this.handleMoveInSelected.bind(this)}\n                  className=\"mx-auto d-block\"\n                  alt=\"view-field-selection\"\n                  src={IconRightArrowButton}\n                />\n              </div>\n              <div className=\"col-sm-5\">\n                <h6>\n                  <small>SELECTED FIELDS</small>\n                </h6>\n                <div className=\"pre-scrollable\">\n                  <div className=\"list-group\">\n                    <input\n                      type=\"text\"\n                      onChange={(event) => {\n                        this.selectedFieldsSerach(event);\n                      }}\n                      className=\"form-control\"\n                      placeholder=\"Search\"\n                    />\n                    {this.state.selectedFields.length > 0 ? (\n                      this.state.filteredSelectedFields.map(\n                        (selectedFieldObj, selectedFieldIndex) => {\n                          return (\n                            <a\n                              onClick={this.handleSelectedFieldSelect.bind(\n                                this,\n                                selectedFieldIndex\n                              )}\n                              key={\n                                \"selectedFieldAnchorKey\" + selectedFieldIndex\n                              }\n                              href=\"#\"\n                              className={\n                                this.state.clickedFilteredSelectedFieldIndex ===\n                                selectedFieldIndex\n                                  ? \"list-group-item list-group-item-action active\"\n                                  : \"list-group-item list-group-item-action\"\n                              }\n                            >\n                              {selectedFieldObj.fieldName}\n                            </a>\n                          );\n                        }\n                      )\n                    ) : (\n                      <li className=\"list-group-item list-group-item-danger\">\n                        Please select fields\n                      </li>\n                    )}\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-md-12\">\n            <button\n              disabled={\n                !this.state.isFormValid || this.state.isDisableCreateViewButton\n                  ? true\n                  : false\n              }\n              onClick={this.applyFilter.bind(this)}\n              className=\"btn btn-sm customize-view-btn\"\n            >\n              CREATE VIEW\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n    /* jshint ignore:end */\n  }\n}\n","import React from \"react\";\nimport $ from \"jquery\";\n\nimport Treelist from \"../Treelist/Treelist.js\";\nimport Topologygraph from \"../Topologygraph/Topologygraph.js\";\nimport Viewtable from \"../Viewtable/Viewtable.js\";\nimport Customsearch from \"./Customsearch.js\";\n\nimport IconRefresh from \"../assets/images/refresh.svg\";\n\nexport default class Technicalview extends React.Component {\n  /* istanbul ignore next */\n  constructor(props) {\n    super(props);\n    this.state = {\n      treeValue: [],\n      graph: {\n        nodes: [],\n        edges: [],\n      },\n      loadTreeJs: false,\n      centerNodeColor: \"#ff0000\",\n      nodeShapes: [\"ellipse\", \"circle\", \"box\"],\n      apiLoadPercentage: 0,\n      mockTableData: [],\n      table: {\n        thead: [],\n        tbody: [],\n      },\n      allFields: [],\n      isSearchView: false,\n    };\n  }\n\n  /* istanbul ignore next */\n  componentDidMount() {\n    //for now once api ready change it again\n    let treeValue = [\n      {\n        id: 1,\n        value: \"group-101\",\n        color: \"#57F518\",\n        /* x: 200,\n        y: 100, */\n        children: [\n          {\n            id: 2,\n            value: \"Gateway-104\",\n            color: \"#8FF4FF\",\n            children: [\n              {\n                id: 3,\n                value: \"Wabtec-gecars-qa client\",\n                color: \"#C98FFF\",\n                edgeLabel: \"Group 101\",\n              },\n              {\n                id: 4,\n                value: \" Wabtec-gecars-qa server\",\n                color: \"#C98FFF\",\n                edgeLabel: \"Group 101\",\n              },\n              {\n                id: 5,\n                value: \"wabtec-gecars-ta client\",\n                color: \"#45C7FF\",\n                edgeLabel: \"Group 101\",\n              },\n              {\n                id: 6,\n                value: \"wabtec-gecars-ta server\",\n                color: \"#45C7FF\",\n                edgeLabel: \"Group 101\",\n              },\n            ],\n          },\n          {\n            id: 7,\n            value: \"Gateway-101\",\n            color: \"#8FF4FF\",\n            children: [\n              {\n                id: 8,\n                value: \"wabtec-gecorp-qa client\",\n                color: \"#C98FFF\",\n                edgeLabel: \"Group 101\",\n              },\n              {\n                id: 9,\n                value: \"wabtec-gecorp-qa server\",\n                color: \"#C98FFF\",\n                edgeLabel: \"Group 101\",\n              },\n              {\n                id: 10,\n                value: \"wabtec-gecorp-dev client\",\n                color: \"#45C7FF\",\n                edgeLabel: \"Group 101\",\n              },\n              {\n                id: 11,\n                value: \"wabtec-gecorp-dev server\",\n                color: \"#45C7FF\",\n                edgeLabel: \"Group 101\",\n              },\n            ],\n          },\n        ],\n      },\n      {\n        id: 12,\n        value: \"group-102\",\n        x: 200,\n        y: 100,\n        children: [\n          {\n            id: 13,\n            value: \"Gateway-102\",\n            children: [\n              {\n                id: 14,\n                value: \"Client-01\",\n                color: \"#C98FFF\",\n                edgeLabel: \"Group 102\",\n              },\n              {\n                id: 15,\n                value: \"Server-01\",\n                color: \"#C98FFF\",\n                edgeLabel: \"Group 102\",\n              },\n              {\n                id: 16,\n                value: \"Client-02\",\n                color: \"#45C7FF\",\n                edgeLabel: \"Group 102\",\n              },\n              {\n                id: 17,\n                value: \"Server-02\",\n                color: \"#45C7FF\",\n                edgeLabel: \"Group 102\",\n              },\n            ],\n          },\n          {\n            id: 21,\n            value: \"Gateway-103\",\n            children: [\n              {\n                id: 22,\n                value: \"Client-01\",\n                color: \"#C98FFF\",\n                edgeLabel: \"Group 102\",\n              },\n              {\n                id: 23,\n                value: \"Server-01\",\n                color: \"#C98FFF\",\n                edgeLabel: \"Group 102\",\n              },\n            ],\n          },\n        ],\n      },\n    ];\n\n    sessionStorage.setItem(\"graphData\", JSON.stringify(treeValue));\n\n    if (\n      localStorage.getItem(\"treeValue\") === null ||\n      localStorage.getItem(\"technicalTableData\") === null\n    ) {\n      let technicalTableData = [];\n      let progressPercent = 0;\n\n      fetch(this.props.baseUrl + \"/snapshot\", {\n        method: \"GET\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n          Authorization: \"Bearer \" + this.props.authToken,\n        },\n      }).then((response) => {\n        if (response.status === 200) {\n          response.json().then((respData) => {\n            respData = {\n              errorStatus: {\n                status: \"ok\",\n              },\n              data: [\n                {\n                  listdata: [\n                    {\n                      groupName: \"wabtec-gecars-qa\",\n                      items: [\n                        {\n                          groupId: \"wabtec-gecars-qa\",\n                          sessionId: \"0idLmsMk8e\",\n                        },\n                        {\n                          groupId: \"wabtec-gecars-qa\",\n                          sessionId: \"0idLmsMk8t\",\n                        },\n                      ],\n                    },\n                    {\n                      groupName: \"wabtec-gecars-ba\",\n                      items: [\n                        {\n                          groupId: \"wabtec-gecars-ba\",\n                          sessionId: \"0idLmsMk8e\",\n                        },\n                        {\n                          groupId: \"wabtec-gecars-ba\",\n                          sessionId: \"0idLmsMk8f\",\n                        },\n                      ],\n                    },\n                  ],\n                },\n              ],\n            };\n            if (respData.errorStatus.status === \"ok\") {\n              let subscriptions = respData.data;\n              if (subscriptions !== null) {\n                treeValue[0].value =\n                  treeValue[0].value + \" (\" + subscriptions.length + \")\";\n                if (subscriptions.length === 0) {\n                  subscriptions = [];\n                }\n\n                let numOfSubscriptions = subscriptions.length;\n                let totalNumOfAjax = subscriptions.length;\n                let totalNumOfAjaxProcessed = 0;\n                if (numOfSubscriptions === 0) {\n                  let that = this;\n                  setTimeout(function () {\n                    that.setState({\n                      loadTreeJs: true,\n                    });\n                    console.log(\"subscriptions\");\n                  }, 1000);\n                }\n\n                progressPercent = Math.round(\n                  (totalNumOfAjaxProcessed / totalNumOfAjax) * 100\n                );\n                this.setState({\n                  apiLoadPercentage: progressPercent,\n                });\n\n                let newId = treeValue[0].id;\n                for (let indexSubscriptions in subscriptions) {\n                  let subscriptionId =\n                    subscriptions[indexSubscriptions].listdata[\n                      indexSubscriptions\n                    ].items[indexSubscriptions].groupId;\n                  let subscriptionName =\n                    subscriptions[indexSubscriptions].listdata[\n                      indexSubscriptions\n                    ].items[indexSubscriptions].groupId;\n                  // let subscriptionId = indexSubscriptions.subscriptionId;\n                  // let subscriptionName = indexSubscriptions.subscriptionName;\n                  newId++;\n                  let newSubscriptionsObj = {};\n                  newSubscriptionsObj.id = newId;\n                  newSubscriptionsObj.title = subscriptionName;\n                  let valueToshow = subscriptionName;\n                  if (subscriptionName.length > 20) {\n                    let first3Char = subscriptionName.substr(0, 5);\n                    let last3Char = subscriptionName.substr(\n                      subscriptionName.length - 5,\n                      5\n                    );\n                    valueToshow = first3Char + \"...\" + last3Char;\n                  }\n                  newSubscriptionsObj.value = valueToshow;\n                  newSubscriptionsObj.nodeType = \"subscription\";\n\n                  if (indexSubscriptions === 0) {\n                    treeValue[0].children = [newSubscriptionsObj];\n                  } else {\n                    treeValue[0].children.push(newSubscriptionsObj);\n                  }\n\n                  if (subscriptionId !== \"\") {\n                    // fetch(this.props.baseUrl + '/gatewayList?subscriptionID='+subscriptionId, { // Get gateways '/gatewayList?subscriptionID='+subscriptionId\n                    fetch(\"https://reqres.in/api/users/2\", {\n                      method: \"GET\",\n                      headers: {\n                        Accept: \"application/json\",\n                        \"Content-Type\": \"application/json\",\n                        Authorization: \"Bearer \" + this.props.authToken,\n                      },\n                    }).then((response) => {\n                      // jshint ignore:line\n                      if (response.status === 200) {\n                        totalNumOfAjaxProcessed++;\n                        progressPercent = Math.round(\n                          (totalNumOfAjaxProcessed / totalNumOfAjax) * 100\n                        );\n                        this.setState({\n                          apiLoadPercentage: progressPercent,\n                        });\n                        response.json().then((respData) => {\n                          respData = {\n                            errorStatus: {\n                              status: \"ok\",\n                            },\n                            data: {\n                              glist: [\n                                {\n                                  suidbscriptionId: 2323,\n                                  subscrititleptionName: \"abc\",\n                                  cfURL: \"https://reqres.in/api/users/2\",\n                                  children: \"\",\n                                },\n                                {\n                                  id: 6754,\n                                  title: \"uytut\",\n                                  cfURL: \"https://reqres.in/api/users/2\",\n                                  children: \"\",\n                                },\n                              ],\n                            },\n                          };\n                          if (respData.errorStatus.status === \"ok\") {\n                            let gateways = respData.data.glist;\n                            let gatewaysCount = Object.keys(gateways).length;\n                            totalNumOfAjax = totalNumOfAjax + gatewaysCount;\n                            progressPercent = Math.round(\n                              (totalNumOfAjaxProcessed / totalNumOfAjax) * 100\n                            );\n                            this.setState({\n                              apiLoadPercentage: progressPercent,\n                            });\n                            treeValue[0].children[indexSubscriptions].value =\n                              treeValue[0].children[indexSubscriptions].value +\n                              \" (\" +\n                              gatewaysCount +\n                              \")\";\n                            for (let indexGateway in gateways) {\n                              newId++;\n                              let newGatewayObj = {};\n                              newGatewayObj.id = newId;\n                              newGatewayObj.title =\n                                gateways[indexGateway].cfURL;\n                              let cfUrl = gateways[indexGateway].cfURL;\n                              let startPos = cfUrl.indexOf(\"://\") + 3;\n                              let endPos = cfUrl.indexOf(\".\");\n                              let valueToshow = cfUrl.slice(startPos, endPos);\n                              let gatewayShortCurl = valueToshow;\n                              if (valueToshow > 30) {\n                                let first7Char = valueToshow.substr(0, 10);\n                                let last7Char = valueToshow.substr(\n                                  valueToshow.length - 10,\n                                  10\n                                );\n                                valueToshow = first7Char + \"...\" + last7Char;\n                              }\n                              newGatewayObj.value = valueToshow;\n                              newGatewayObj.nodeType = \"gateway\";\n\n                              if (indexGateway.split(\":\")[1] === 0) {\n                                treeValue[0].children[\n                                  indexSubscriptions\n                                ].children = [newGatewayObj];\n                              } else {\n                                //treeValue[0].children[indexSubscriptions].push(newGatewayObj);\n                              }\n\n                              // fetch(this.props.baseUrl + '/getGatewayHealth?gatewayURL='+gateways[indexGateway].cfURL, {\n                              fetch(\"https://reqres.in/api/users/2\", {\n                                method: \"GET\",\n                                headers: {\n                                  Accept: \"application/json\",\n                                  \"Content-Type\": \"application/json\",\n                                  Authorization:\n                                    \"Bearer \" + this.props.authToken,\n                                },\n                              }).then((response) => {\n                                // jshint ignore:line\n                                if (response.status === 200) {\n                                  response.json().then((respData) => {\n                                    respData = {\n                                      errorStatus: {\n                                        status: \"ok\",\n                                      },\n                                      data: {\n                                        SuperConns: {\n                                          serverId: 23,\n                                        },\n                                        ClientPool: [{ bindId: 3432 }],\n                                        Sessions: [\n                                          {\n                                            clientConfig: {\n                                              groupId: 53435,\n                                            },\n                                          },\n                                        ],\n                                      },\n                                    };\n                                    totalNumOfAjaxProcessed++;\n                                    progressPercent = Math.round(\n                                      (totalNumOfAjaxProcessed /\n                                        totalNumOfAjax) *\n                                        100\n                                    );\n                                    this.setState({\n                                      apiLoadPercentage: progressPercent,\n                                    });\n                                    if (respData.errorStatus.status === \"ok\") {\n                                      let clientPools =\n                                        respData.data.ClientPool;\n                                      let preparedClientPools = [];\n                                      let clientPoolCounts = {};\n                                      let superConns = respData.data.SuperConns;\n                                      let preparedSuperConns = [];\n                                      let superConnCounts = {};\n                                      let sessions = respData.data.Sessions;\n                                      let secondarySessions = [];\n                                      let preparedSessions = [];\n                                      let sessionCounts = {};\n                                      //console.log(subscriptionName);\n                                      //console.log(subscriptions[indexSubscriptions].subscriptionName);\n                                      for (let sessionIndex in sessions) {\n                                        let prepareSessionData = {};\n                                        prepareSessionData.sessionId =\n                                          sessionIndex;\n                                        prepareSessionData.groupId =\n                                          sessions[\n                                            sessionIndex\n                                          ].clientConfig.groupId;\n                                        secondarySessions.push(\n                                          prepareSessionData\n                                        );\n                                      }\n\n                                      if (clientPools.length > 0) {\n                                        clientPools.forEach(function (element) {\n                                          clientPoolCounts[element.bindId] =\n                                            (clientPoolCounts[element.bindId] ||\n                                              0) + 1;\n                                        });\n                                        preparedClientPools =\n                                          this.removeDuplicates(\n                                            clientPools,\n                                            \"bindId\"\n                                          );\n                                      }\n\n                                      if (preparedClientPools.length > 0) {\n                                        newId++;\n                                        //  treeValue[0].children[indexSubscriptions].children[indexGateway.split(\":\")[1]].children = [{id: newId, value: 'Client Pools ('+ clientPools.length + ')', title: 'Client Pools', nodeType: 'clientpooltitle'}];\n                                        for (let indexClientPool in preparedClientPools) {\n                                          newId++;\n                                          let newClientPoolObj = {};\n                                          newClientPoolObj.id = newId;\n\n                                          const preparedClientPools = [\n                                            {\n                                              clientConfig: {\n                                                groupId: 2424,\n                                                id: 121,\n                                              },\n                                            },\n                                          ];\n\n                                          newClientPoolObj.title =\n                                            preparedClientPools[indexClientPool]\n                                              .clientConfig.groupId +\n                                            \"\\n\" +\n                                            \" [\" +\n                                            preparedClientPools[indexClientPool]\n                                              .clientConfig.id +\n                                            \"] \" +\n                                            \"(\" +\n                                            clientPoolCounts[\n                                              preparedClientPools[\n                                                indexClientPool\n                                              ].clientConfig.id\n                                            ] +\n                                            \")\";\n                                          let valueToshow =\n                                            preparedClientPools[indexClientPool]\n                                              .clientConfig.groupId +\n                                            \"\\n\" +\n                                            \" [\" +\n                                            preparedClientPools[indexClientPool]\n                                              .clientConfig.id +\n                                            \"] \" +\n                                            \"(\" +\n                                            clientPoolCounts[\n                                              preparedClientPools[\n                                                indexClientPool\n                                              ].clientConfig.id\n                                            ] +\n                                            \")\";\n\n                                          newClientPoolObj.value = valueToshow;\n                                          newClientPoolObj.nodeType =\n                                            \"clientpool\";\n\n                                          if (indexClientPool === 0) {\n                                            //  treeValue[0].children[indexSubscriptions].children[indexGateway.split(\":\")[1]].children[0].children = [newClientPoolObj];\n                                          } else {\n                                            // treeValue[0].children[indexSubscriptions].children[indexGateway.split(\":\")[1]].children[0].children.push(newClientPoolObj);\n                                          }\n\n                                          let preparePoolDataForTable = {};\n                                          preparePoolDataForTable.subscription_name =\n                                            subscriptionName;\n                                          preparePoolDataForTable.gateway =\n                                            gatewayShortCurl;\n                                          preparePoolDataForTable.group_id =\n                                            preparedClientPools[\n                                              indexClientPool\n                                            ].clientConfig.groupId;\n                                          preparePoolDataForTable.count =\n                                            clientPoolCounts[\n                                              preparedClientPools[\n                                                indexClientPool\n                                              ].clientConfig.id\n                                            ];\n                                          preparePoolDataForTable.type =\n                                            \"clientpool\";\n                                          technicalTableData.push(\n                                            preparePoolDataForTable\n                                          );\n                                        }\n                                      }\n\n                                      if (superConns.length > 0) {\n                                        superConns.forEach(function (element) {\n                                          superConnCounts[element.serverId] =\n                                            (superConnCounts[\n                                              element.serverId\n                                            ] || 0) + 1;\n                                        });\n                                        preparedSuperConns =\n                                          this.removeDuplicates(\n                                            superConns,\n                                            \"serverId\"\n                                          );\n                                      }\n                                      if (preparedSuperConns.length > 0) {\n                                        newId++;\n\n                                        if (\n                                          !treeValue[0].children[\n                                            indexSubscriptions\n                                          ].children[indexGateway.split(\":\")[1]]\n                                            .children\n                                        ) {\n                                          treeValue[0].children[\n                                            indexSubscriptions\n                                          ].children[\n                                            indexGateway.split(\":\")[1]\n                                          ].children = [\n                                            {\n                                              id: newId,\n                                              value:\n                                                \"Super Connections (\" +\n                                                superConns.length +\n                                                \")\",\n                                              title: \"Super Connections\",\n                                              nodeType: \"superconnectiontitle\",\n                                            },\n                                          ];\n                                        } else {\n                                          treeValue[0].children[\n                                            indexSubscriptions\n                                          ].children[\n                                            indexGateway.split(\":\")[1]\n                                          ].children.push({\n                                            id: newId,\n                                            value:\n                                              \"Super Connections (\" +\n                                              superConns.length +\n                                              \")\",\n                                            title: \"Super Connections\",\n                                            nodeType: \"superconnectiontitle\",\n                                          });\n                                        }\n\n                                        for (let indexSuperConn in preparedSuperConns) {\n                                          newId++;\n                                          let newSuperConnObj = {};\n                                          newSuperConnObj.id = newId;\n                                          newSuperConnObj.title =\n                                            preparedSuperConns[indexSuperConn]\n                                              .bindId.groupId +\n                                            \"\\n\" +\n                                            \" [\" +\n                                            preparedSuperConns[indexSuperConn]\n                                              .bindId.id +\n                                            \"] \" +\n                                            \"(\" +\n                                            superConnCounts[\n                                              preparedSuperConns[indexSuperConn]\n                                                .bindId.id\n                                            ] +\n                                            \")\";\n                                          let valueToshow =\n                                            preparedSuperConns[indexSuperConn]\n                                              .bindId.groupId +\n                                            \"\\n\" +\n                                            \" [\" +\n                                            preparedSuperConns[indexSuperConn]\n                                              .bindId.id +\n                                            \"] \" +\n                                            \"(\" +\n                                            superConnCounts[\n                                              preparedSuperConns[indexSuperConn]\n                                                .bindId.id\n                                            ] +\n                                            \")\";\n\n                                          newSuperConnObj.value = valueToshow;\n                                          newSuperConnObj.nodeType =\n                                            \"superconnection\";\n\n                                          if (indexSuperConn === 0) {\n                                            if (\n                                              treeValue[0].children[\n                                                indexSubscriptions\n                                              ].children[\n                                                indexGateway.split(\":\")[1]\n                                              ].children[0].title ===\n                                              \"Client Pools\"\n                                            ) {\n                                              treeValue[0].children[\n                                                indexSubscriptions\n                                              ].children[\n                                                indexGateway.split(\":\")[1]\n                                              ].children[1].children = [\n                                                newSuperConnObj,\n                                              ];\n                                            } else {\n                                              treeValue[0].children[\n                                                indexSubscriptions\n                                              ].children[\n                                                indexGateway.split(\":\")[1]\n                                              ].children[0].children = [\n                                                newSuperConnObj,\n                                              ];\n                                            }\n                                          } else {\n                                            if (\n                                              treeValue[0].children[\n                                                indexSubscriptions\n                                              ].children[\n                                                indexGateway.split(\":\")[1]\n                                              ].children[0].title ===\n                                              \"Client Pools\"\n                                            ) {\n                                              treeValue[0].children[\n                                                indexSubscriptions\n                                              ].children[\n                                                indexGateway.split(\":\")[1]\n                                              ].children[1].children.push(\n                                                newSuperConnObj\n                                              );\n                                            } else {\n                                              treeValue[0].children[\n                                                indexSubscriptions\n                                              ].children[\n                                                indexGateway.split(\":\")[1]\n                                              ].children[0].children.push(\n                                                newSuperConnObj\n                                              );\n                                            }\n                                          }\n\n                                          let prepareSupperConDataForTable = {};\n                                          prepareSupperConDataForTable.subscription_name =\n                                            subscriptionName;\n                                          prepareSupperConDataForTable.gateway =\n                                            gatewayShortCurl;\n                                          prepareSupperConDataForTable.group_id =\n                                            preparedSuperConns[\n                                              indexSuperConn\n                                            ].bindId.groupId;\n                                          prepareSupperConDataForTable.count =\n                                            superConnCounts[\n                                              preparedSuperConns[\n                                                indexSuperConn\n                                              ].bindId.id\n                                            ];\n                                          prepareSupperConDataForTable.type =\n                                            \"superconnection\";\n                                          technicalTableData.push(\n                                            prepareSupperConDataForTable\n                                          );\n                                        }\n\n                                        if (secondarySessions.length > 0) {\n                                          secondarySessions.forEach(function (\n                                            element\n                                          ) {\n                                            sessionCounts[element.groupId] =\n                                              (sessionCounts[element.groupId] ||\n                                                0) + 1;\n                                          });\n                                          preparedSessions =\n                                            this.removeDuplicates(\n                                              secondarySessions,\n                                              \"groupId\"\n                                            );\n                                        }\n\n                                        if (preparedSessions.length > 0) {\n                                          newId++;\n\n                                          if (\n                                            !treeValue[0].children[\n                                              indexSubscriptions\n                                            ].children[\n                                              indexGateway.split(\":\")[1]\n                                            ].children\n                                          ) {\n                                            treeValue[0].children[\n                                              indexSubscriptions\n                                            ].children[\n                                              indexGateway.split(\":\")[1]\n                                            ].children = [\n                                              {\n                                                id: newId,\n                                                value:\n                                                  \"Sessions (\" +\n                                                  secondarySessions.length +\n                                                  \")\",\n                                                title: \"Sessions\",\n                                                nodeType: \"sessiontitle\",\n                                              },\n                                            ];\n                                          } else {\n                                            treeValue[0].children[\n                                              indexSubscriptions\n                                            ].children[\n                                              indexGateway.split(\":\")[1]\n                                            ].children.push({\n                                              id: newId,\n                                              value:\n                                                \"Sessions (\" +\n                                                secondarySessions.length +\n                                                \")\",\n                                              title: \"Sessions\",\n                                              nodeType: \"sessiontitle\",\n                                            });\n                                          }\n                                          let sessionIndexToPushChildren =\n                                            treeValue[0].children[\n                                              indexSubscriptions\n                                            ].children[\n                                              indexGateway.split(\":\")[1]\n                                            ].children.length - 1;\n                                          for (let indexSession in preparedSessions) {\n                                            newId++;\n                                            let newSessionObj = {};\n                                            newSessionObj.id = newId;\n                                            newSessionObj.title =\n                                              preparedSessions[indexSession]\n                                                .groupId +\n                                              \"(\" +\n                                              sessionCounts[\n                                                preparedSessions[indexSession]\n                                                  .groupId\n                                              ] +\n                                              \")\";\n                                            let valueToshow =\n                                              preparedSessions[indexSession]\n                                                .groupId +\n                                              \"(\" +\n                                              sessionCounts[\n                                                preparedSessions[indexSession]\n                                                  .groupId\n                                              ] +\n                                              \")\";\n\n                                            newSessionObj.value = valueToshow;\n                                            newSessionObj.nodeType = \"session\";\n\n                                            if (indexSession === 0) {\n                                              treeValue[0].children[\n                                                indexSubscriptions\n                                              ].children[\n                                                indexGateway.split(\":\")[1]\n                                              ].children[\n                                                sessionIndexToPushChildren\n                                              ].children = [newSessionObj];\n                                            } else {\n                                              treeValue[0].children[\n                                                indexSubscriptions\n                                              ].children[\n                                                indexGateway.split(\":\")[1]\n                                              ].children[\n                                                sessionIndexToPushChildren\n                                              ].children.push(newSessionObj);\n                                            }\n\n                                            let prepareSessionDataForTable = {};\n                                            prepareSessionDataForTable.subscription_name =\n                                              subscriptionName;\n                                            prepareSessionDataForTable.gateway =\n                                              gatewayShortCurl;\n                                            prepareSessionDataForTable.group_id =\n                                              preparedSessions[\n                                                indexSession\n                                              ].groupId;\n                                            prepareSessionDataForTable.count =\n                                              sessionCounts[\n                                                preparedSessions[\n                                                  indexSession\n                                                ].groupId\n                                              ];\n                                            prepareSessionDataForTable.type =\n                                              \"session\";\n                                            technicalTableData.push(\n                                              prepareSessionDataForTable\n                                            );\n                                          }\n                                        }\n                                      }\n                                    }\n                                    if (\n                                      totalNumOfAjaxProcessed === totalNumOfAjax\n                                    ) {\n                                      this.generateTableStructure(\n                                        technicalTableData\n                                      );\n                                      localStorage.setItem(\n                                        \"technicalTableData\",\n                                        JSON.stringify(technicalTableData)\n                                      );\n                                      localStorage.setItem(\n                                        \"treeValue\",\n                                        JSON.stringify(treeValue)\n                                      );\n                                      let that = this;\n                                      setTimeout(function () {\n                                        that.setState({\n                                          mockTableData: technicalTableData,\n                                          loadTreeJs: true,\n                                        });\n                                      }, 2000);\n                                    }\n                                  });\n                                }\n                              });\n                            }\n                          } else {\n                            treeValue[0].children[indexSubscriptions].value =\n                              treeValue[0].children[indexSubscriptions].value +\n                              \" (0)\";\n                          }\n\n                          if (totalNumOfAjaxProcessed === totalNumOfAjax) {\n                            let that = this;\n                            setTimeout(function () {\n                              that.setState({\n                                loadTreeJs: true,\n                              });\n                              console.log(\"gateways\");\n                            }, 2000);\n                          }\n                        });\n                      }\n                    });\n                  } else {\n                    totalNumOfAjaxProcessed++;\n                    progressPercent = Math.round(\n                      (totalNumOfAjaxProcessed / totalNumOfAjax) * 100\n                    );\n                    this.setState({\n                      apiLoadPercentage: progressPercent,\n                    });\n                  }\n                }\n\n                let nodes = [];\n                let edges = [];\n                if (treeValue.length > 0) {\n                  //let shapeArray = this.state.nodeShapes;\n                  let treeObj = treeValue[0];\n                  console.log(treeValue[0]);\n                  let parentNodeId = treeObj.id;\n                  let parentNodeLabel = treeObj.value;\n                  let parentNodeTitle = treeObj.value;\n                  let color = treeObj.color;\n                  let parentNode = {\n                    id: parentNodeId,\n                    label: parentNodeLabel,\n                    title: parentNodeTitle,\n                    color: color,\n                    shape: \"ellipse\",\n                  };\n                  nodes.push(parentNode);\n                  if (treeObj.children) {\n                    for (let childNode of treeObj.children) {\n                      let childNodeId = childNode.id;\n                      let childNodeLabel = childNode.value;\n                      let childNodeTitle = childNode.title;\n                      let childColor = childNode.color;\n                      let childNodeEgdeLabel = childNode.edgeLabel;\n                      let shape = \"box\";\n                      if (childNode.nodeType === \"subscription\") {\n                        shape = \"circle\";\n                      } else if (\n                        childNode.nodeType === \"superconnectiontitle\" ||\n                        childNode.nodeType === \"clientpooltitle\" ||\n                        childNode.nodeType === \"sessiontitle\"\n                      ) {\n                        shape = \"circle\";\n                      } else if (childNode.nodeType === \"clientpool\") {\n                        shape = \"ellipse\";\n                      }\n                      let childNodeShape = shape;\n                      let preparedChildNode = {\n                        id: childNodeId,\n                        label: childNodeLabel,\n                        title: childNodeTitle,\n                        shape: childNodeShape,\n                        color: childColor,\n                      };\n                      nodes.push(preparedChildNode);\n\n                      let prepareEdges = {\n                        from: 1,\n                        to: childNodeId,\n                        label: childNodeEgdeLabel,\n                        color: childColor,\n                      };\n                      edges.push(prepareEdges);\n                    }\n                  }\n                }\n\n                this.setState({\n                  treeValue: treeValue,\n                  graph: {\n                    nodes: nodes,\n                    edges: edges,\n                  },\n                });\n              } else {\n                let thead = [\n                  {\n                    fieldId: \"subscription_name\",\n                    fieldName: \"Subscription Name\",\n                  },\n                  { fieldId: \"gateway\", fieldName: \"Gateway\" },\n                  { fieldId: \"group_id\", fieldName: \"Group Id\" },\n                  { fieldId: \"count\", fieldName: \"Count\" },\n                  { fieldId: \"type\", fieldName: \"Type\" },\n                ];\n                this.setState({\n                  table: {\n                    thead: thead,\n                    tbody: [],\n                  },\n                  allFields: [],\n                });\n                setTimeout(() => {\n                  this.setState({\n                    treeValue: [],\n                    graph: {\n                      nodes: [],\n                      edges: [],\n                    },\n                    apiLoadPercentage: 100,\n                    loadTreeJs: true,\n                  });\n                }, 2000);\n                //this.timer = setInterval(() => this.getItems(), 30000);\n              }\n            }\n          });\n        }\n      });\n    } else {\n      this.displayDataFromLocalStorage();\n      //this.timer = setInterval(() => this.getItems(), 30000);\n    }\n  }\n\n  /* istanbul ignore next */\n  componentWillUnmount() {\n    clearInterval(this.timer);\n    this.timer = null;\n  }\n\n  /* istanbul ignore next */\n  displayDataFromLocalStorage() {\n    let nodes = [];\n    let edges = [];\n    let treeValue = JSON.parse(sessionStorage.getItem(\"graphData\"));\n    let technicalTableData = JSON.parse(\n      localStorage.getItem(\"technicalTableData\")\n    );\n    this.setState({\n      mockTableData: technicalTableData,\n    });\n    this.generateTableStructure(technicalTableData);\n    if (treeValue.length > 0) {\n      //let shapeArray = this.state.nodeShapes;\n      let treeObj = treeValue[0];\n      console.log(treeObj);\n      let parentNodeId = treeObj.id;\n      let parentNodeLabel = treeObj.value;\n      let parentNodeTitle = treeObj.value;\n      let color = treeObj.color;\n      let parentNode = {\n        id: parentNodeId,\n        label: parentNodeLabel,\n        title: parentNodeTitle,\n        color: color,\n        shape: \"ellipse\",\n      };\n      nodes.push(parentNode);\n      if (treeObj.children) {\n        for (let childNode of treeObj.children) {\n          let childNodeId = childNode.id;\n          let childNodeLabel = childNode.value;\n          let childNodeTitle = childNode.title;\n          let childColor = childNode.color;\n          let childNodeEgdeLabel = childNode.edgeLabel;\n          let shape = \"box\";\n          if (childNode.nodeType === \"subscription\") {\n            shape = \"circle\";\n          } else if (\n            childNode.nodeType === \"superconnectiontitle\" ||\n            childNode.nodeType === \"clientpooltitle\" ||\n            childNode.nodeType === \"sessiontitle\"\n          ) {\n            shape = \"circle\";\n          } else if (childNode.nodeType === \"clientpool\") {\n            shape = \"ellipse\";\n          }\n          let childNodeShape = shape;\n          let preparedChildNode = {\n            id: childNodeId,\n            label: childNodeLabel,\n            title: childNodeTitle,\n            shape: childNodeShape,\n            color: childColor,\n          };\n          nodes.push(preparedChildNode);\n\n          let prepareEdges = {\n            from: 1,\n            to: childNodeId,\n            label: childNodeEgdeLabel,\n            color: childColor,\n          };\n          edges.push(prepareEdges);\n        }\n      }\n    }\n\n    this.setState({\n      treeValue: treeValue,\n      graph: {\n        nodes: nodes,\n        edges: edges,\n      },\n      apiLoadPercentage: 99,\n    });\n\n    setTimeout(() => {\n      this.setState({\n        apiLoadPercentage: 100,\n        loadTreeJs: true,\n      });\n      console.log(\"from LS\");\n    }, 1000);\n  }\n\n  /* istanbul ignore next */\n  getItems() {\n    let technicalTableData = [];\n    let treeValue = [\n      {\n        id: 1,\n        value: \"EC\",\n        title: \"EC\",\n        nodeType: \"root\",\n      },\n    ];\n\n    fetch(this.props.baseUrl + \"/listSubscriptions\", {\n      method: \"GET\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \" + this.props.authToken,\n      },\n    }).then((response) => {\n      if (response.status === 200) {\n        response.json().then((respData) => {\n          if (respData.errorStatus.status === \"ok\") {\n            let subscriptions = respData.data;\n            if (subscriptions !== null) {\n              treeValue[0].value =\n                treeValue[0].value + \" (\" + subscriptions.length + \")\";\n              if (subscriptions.length === 0) {\n                subscriptions = [];\n              }\n\n              let numOfSubscriptions = subscriptions.length;\n              let totalNumOfAjax = subscriptions.length;\n              let totalNumOfAjaxProcessed = 0;\n              if (numOfSubscriptions === 0) {\n                localStorage.setItem(\n                  \"technicalTableData\",\n                  JSON.stringify(technicalTableData)\n                );\n                localStorage.setItem(\"treeValue\", JSON.stringify(treeValue));\n                this.setState({\n                  mockTableData: technicalTableData,\n                });\n              }\n\n              let newId = treeValue[0].id;\n              for (let indexSubscriptions in subscriptions) {\n                let subscriptionId =\n                  subscriptions[indexSubscriptions].subscriptionId.trim();\n                let subscriptionName =\n                  subscriptions[indexSubscriptions].subscriptionName.trim();\n                newId++;\n                let newSubscriptionsObj = {};\n                newSubscriptionsObj.id = newId;\n                newSubscriptionsObj.title = subscriptionName;\n                let valueToshow = subscriptionName;\n                if (subscriptionName.length > 20) {\n                  let first3Char = subscriptionName.substr(0, 5);\n                  let last3Char = subscriptionName.substr(\n                    subscriptionName.length - 5,\n                    5\n                  );\n                  valueToshow = first3Char + \"...\" + last3Char;\n                }\n                newSubscriptionsObj.value = valueToshow;\n                newSubscriptionsObj.nodeType = \"subscription\";\n\n                if (indexSubscriptions === 0) {\n                  treeValue[0].children = [newSubscriptionsObj];\n                } else {\n                  treeValue[0].children.push(newSubscriptionsObj);\n                }\n\n                if (subscriptionId !== \"\") {\n                  fetch(\n                    this.props.baseUrl +\n                      \"/gatewayList?subscriptionID=\" +\n                      subscriptionId,\n                    {\n                      // Get gateways '/gatewayList?subscriptionID='+subscriptionId\n                      method: \"GET\",\n                      headers: {\n                        Accept: \"application/json\",\n                        \"Content-Type\": \"application/json\",\n                        Authorization: \"Bearer \" + this.props.authToken,\n                      },\n                    }\n                  ).then((response) => {\n                    // jshint ignore:line\n                    if (response.status === 200) {\n                      totalNumOfAjaxProcessed++;\n                      response.json().then((respData) => {\n                        if (respData.errorStatus.status === \"ok\") {\n                          let gateways = respData.data.glist;\n                          let gatewaysCount = Object.keys(gateways).length;\n                          totalNumOfAjax = totalNumOfAjax + gatewaysCount;\n                          treeValue[0].children[indexSubscriptions].value =\n                            treeValue[0].children[indexSubscriptions].value +\n                            \" (\" +\n                            gatewaysCount +\n                            \")\";\n                          for (let indexGateway in gateways) {\n                            newId++;\n                            let newGatewayObj = {};\n                            newGatewayObj.id = newId;\n                            newGatewayObj.title = gateways[indexGateway].cfURL;\n                            let cfUrl = gateways[indexGateway].cfURL;\n                            let startPos = cfUrl.indexOf(\"://\") + 3;\n                            let endPos = cfUrl.indexOf(\".\");\n                            let valueToshow = cfUrl.slice(startPos, endPos);\n                            let gatewayShortCurl = valueToshow;\n                            if (valueToshow > 30) {\n                              let first7Char = valueToshow.substr(0, 10);\n                              let last7Char = valueToshow.substr(\n                                valueToshow.length - 10,\n                                10\n                              );\n                              valueToshow = first7Char + \"...\" + last7Char;\n                            }\n                            newGatewayObj.value = valueToshow;\n                            newGatewayObj.nodeType = \"gateway\";\n\n                            if (indexGateway.split(\":\")[1] === 0) {\n                              treeValue[0].children[\n                                indexSubscriptions\n                              ].children = [newGatewayObj];\n                            } else {\n                              treeValue[0].children[\n                                indexSubscriptions\n                              ].children.push(newGatewayObj);\n                            }\n\n                            fetch(\n                              this.props.baseUrl +\n                                \"/getGatewayHealth?gatewayURL=\" +\n                                gateways[indexGateway].cfURL,\n                              {\n                                method: \"GET\",\n                                headers: {\n                                  Accept: \"application/json\",\n                                  \"Content-Type\": \"application/json\",\n                                  Authorization:\n                                    \"Bearer \" + this.props.authToken,\n                                },\n                              }\n                            ).then((response) => {\n                              // jshint ignore:line\n                              if (response.status === 200) {\n                                response.json().then((respData) => {\n                                  totalNumOfAjaxProcessed++;\n                                  if (respData.errorStatus.status === \"ok\") {\n                                    let clientPools = respData.data.ClientPool;\n                                    let preparedClientPools = [];\n                                    let clientPoolCounts = {};\n                                    let superConns = respData.data.SuperConns;\n                                    let preparedSuperConns = [];\n                                    let superConnCounts = {};\n                                    let sessions = respData.data.Sessions;\n                                    let secondarySessions = [];\n                                    let preparedSessions = [];\n                                    let sessionCounts = {};\n\n                                    for (let sessionIndex in sessions) {\n                                      let prepareSessionData = {};\n                                      prepareSessionData.sessionId =\n                                        sessionIndex;\n                                      prepareSessionData.groupId =\n                                        sessions[\n                                          sessionIndex\n                                        ].clientConfig.groupId;\n                                      secondarySessions.push(\n                                        prepareSessionData\n                                      );\n                                    }\n\n                                    if (clientPools.length > 0) {\n                                      clientPools.forEach(function (element) {\n                                        clientPoolCounts[element.bindId] =\n                                          (clientPoolCounts[element.bindId] ||\n                                            0) + 1;\n                                      });\n                                      preparedClientPools =\n                                        this.removeDuplicates(\n                                          clientPools,\n                                          \"bindId\"\n                                        );\n                                    }\n\n                                    if (preparedClientPools.length > 0) {\n                                      newId++;\n                                      treeValue[0].children[\n                                        indexSubscriptions\n                                      ].children[\n                                        indexGateway.split(\":\")[1]\n                                      ].children = [\n                                        {\n                                          id: newId,\n                                          value:\n                                            \"Client Pools (\" +\n                                            clientPools.length +\n                                            \")\",\n                                          title: \"Client Pools\",\n                                          nodeType: \"clientpooltitle\",\n                                        },\n                                      ];\n                                      for (let indexClientPool in preparedClientPools) {\n                                        newId++;\n                                        let newClientPoolObj = {};\n                                        newClientPoolObj.id = newId;\n                                        newClientPoolObj.title =\n                                          preparedClientPools[indexClientPool]\n                                            .clientConfig.groupId +\n                                          \"\\n\" +\n                                          \" [\" +\n                                          preparedClientPools[indexClientPool]\n                                            .clientConfig.id +\n                                          \"] \" +\n                                          \"(\" +\n                                          clientPoolCounts[\n                                            preparedClientPools[indexClientPool]\n                                              .clientConfig.id\n                                          ] +\n                                          \")\";\n                                        let valueToshow =\n                                          preparedClientPools[indexClientPool]\n                                            .clientConfig.groupId +\n                                          \"\\n\" +\n                                          \" [\" +\n                                          preparedClientPools[indexClientPool]\n                                            .clientConfig.id +\n                                          \"] \" +\n                                          \"(\" +\n                                          clientPoolCounts[\n                                            preparedClientPools[indexClientPool]\n                                              .clientConfig.id\n                                          ] +\n                                          \")\";\n\n                                        newClientPoolObj.value = valueToshow;\n                                        newClientPoolObj.nodeType =\n                                          \"clientpool\";\n\n                                        if (indexClientPool === 0) {\n                                          treeValue[0].children[\n                                            indexSubscriptions\n                                          ].children[\n                                            indexGateway.split(\":\")[1]\n                                          ].children[0].children = [\n                                            newClientPoolObj,\n                                          ];\n                                        } else {\n                                          treeValue[0].children[\n                                            indexSubscriptions\n                                          ].children[\n                                            indexGateway.split(\":\")[1]\n                                          ].children[0].children.push(\n                                            newClientPoolObj\n                                          );\n                                        }\n\n                                        let preparePoolDataForTable = {};\n                                        preparePoolDataForTable.subscription_name =\n                                          subscriptionName;\n                                        preparePoolDataForTable.gateway =\n                                          gatewayShortCurl;\n                                        preparePoolDataForTable.group_id =\n                                          preparedClientPools[\n                                            indexClientPool\n                                          ].clientConfig.groupId;\n                                        preparePoolDataForTable.count =\n                                          clientPoolCounts[\n                                            preparedClientPools[\n                                              indexClientPool\n                                            ].clientConfig.id\n                                          ];\n                                        preparePoolDataForTable.type =\n                                          \"clientpool\";\n                                        technicalTableData.push(\n                                          preparePoolDataForTable\n                                        );\n                                      }\n                                    }\n\n                                    if (superConns.length > 0) {\n                                      superConns.forEach(function (element) {\n                                        superConnCounts[element.serverId] =\n                                          (superConnCounts[element.serverId] ||\n                                            0) + 1;\n                                      });\n                                      preparedSuperConns =\n                                        this.removeDuplicates(\n                                          superConns,\n                                          \"serverId\"\n                                        );\n                                    }\n                                    if (preparedSuperConns.length > 0) {\n                                      newId++;\n\n                                      if (\n                                        !treeValue[0].children[\n                                          indexSubscriptions\n                                        ].children[indexGateway.split(\":\")[1]]\n                                          .children\n                                      ) {\n                                        treeValue[0].children[\n                                          indexSubscriptions\n                                        ].children[\n                                          indexGateway.split(\":\")[1]\n                                        ].children = [\n                                          {\n                                            id: newId,\n                                            value:\n                                              \"Super Connections (\" +\n                                              superConns.length +\n                                              \")\",\n                                            title: \"Super Connections\",\n                                            nodeType: \"superconnectiontitle\",\n                                          },\n                                        ];\n                                      } else {\n                                        treeValue[0].children[\n                                          indexSubscriptions\n                                        ].children[\n                                          indexGateway.split(\":\")[1]\n                                        ].children.push({\n                                          id: newId,\n                                          value:\n                                            \"Super Connections (\" +\n                                            superConns.length +\n                                            \")\",\n                                          title: \"Super Connections\",\n                                          nodeType: \"superconnectiontitle\",\n                                        });\n                                      }\n\n                                      for (let indexSuperConn in preparedSuperConns) {\n                                        newId++;\n                                        let newSuperConnObj = {};\n                                        newSuperConnObj.id = newId;\n                                        newSuperConnObj.title =\n                                          preparedSuperConns[indexSuperConn]\n                                            .bindId.groupId +\n                                          \"\\n\" +\n                                          \" [\" +\n                                          preparedSuperConns[indexSuperConn]\n                                            .bindId.id +\n                                          \"] \" +\n                                          \"(\" +\n                                          superConnCounts[\n                                            preparedSuperConns[indexSuperConn]\n                                              .bindId.id\n                                          ] +\n                                          \")\";\n                                        let valueToshow =\n                                          preparedSuperConns[indexSuperConn]\n                                            .bindId.groupId +\n                                          \"\\n\" +\n                                          \" [\" +\n                                          preparedSuperConns[indexSuperConn]\n                                            .bindId.id +\n                                          \"] \" +\n                                          \"(\" +\n                                          superConnCounts[\n                                            preparedSuperConns[indexSuperConn]\n                                              .bindId.id\n                                          ] +\n                                          \")\";\n\n                                        newSuperConnObj.value = valueToshow;\n                                        newSuperConnObj.nodeType =\n                                          \"superconnection\";\n\n                                        if (indexSuperConn === 0) {\n                                          if (\n                                            treeValue[0].children[\n                                              indexSubscriptions\n                                            ].children[\n                                              indexGateway.split(\":\")[1]\n                                            ].children[0].title ===\n                                            \"Client Pools\"\n                                          ) {\n                                            treeValue[0].children[\n                                              indexSubscriptions\n                                            ].children[\n                                              indexGateway.split(\":\")[1]\n                                            ].children[1].children = [\n                                              newSuperConnObj,\n                                            ];\n                                          } else {\n                                            treeValue[0].children[\n                                              indexSubscriptions\n                                            ].children[\n                                              indexGateway.split(\":\")[1]\n                                            ].children[0].children = [\n                                              newSuperConnObj,\n                                            ];\n                                          }\n                                        } else {\n                                          if (\n                                            treeValue[0].children[\n                                              indexSubscriptions\n                                            ].children[\n                                              indexGateway.split(\":\")[1]\n                                            ].children[0].title ===\n                                            \"Client Pools\"\n                                          ) {\n                                            treeValue[0].children[\n                                              indexSubscriptions\n                                            ].children[\n                                              indexGateway.split(\":\")[1]\n                                            ].children[1].children.push(\n                                              newSuperConnObj\n                                            );\n                                          } else {\n                                            treeValue[0].children[\n                                              indexSubscriptions\n                                            ].children[\n                                              indexGateway.split(\":\")[1]\n                                            ].children[0].children.push(\n                                              newSuperConnObj\n                                            );\n                                          }\n                                        }\n\n                                        let prepareSupperConDataForTable = {};\n                                        prepareSupperConDataForTable.subscription_name =\n                                          subscriptionName;\n                                        prepareSupperConDataForTable.gateway =\n                                          gatewayShortCurl;\n                                        prepareSupperConDataForTable.group_id =\n                                          preparedSuperConns[\n                                            indexSuperConn\n                                          ].bindId.groupId;\n                                        prepareSupperConDataForTable.count =\n                                          superConnCounts[\n                                            preparedSuperConns[\n                                              indexSuperConn\n                                            ].bindId.id\n                                          ];\n                                        prepareSupperConDataForTable.type =\n                                          \"superconnection\";\n                                        technicalTableData.push(\n                                          prepareSupperConDataForTable\n                                        );\n                                      }\n\n                                      if (secondarySessions.length > 0) {\n                                        secondarySessions.forEach(function (\n                                          element\n                                        ) {\n                                          sessionCounts[element.groupId] =\n                                            (sessionCounts[element.groupId] ||\n                                              0) + 1;\n                                        });\n                                        preparedSessions =\n                                          this.removeDuplicates(\n                                            secondarySessions,\n                                            \"groupId\"\n                                          );\n                                      }\n\n                                      if (preparedSessions.length > 0) {\n                                        newId++;\n\n                                        if (\n                                          !treeValue[0].children[\n                                            indexSubscriptions\n                                          ].children[indexGateway.split(\":\")[1]]\n                                            .children\n                                        ) {\n                                          treeValue[0].children[\n                                            indexSubscriptions\n                                          ].children[\n                                            indexGateway.split(\":\")[1]\n                                          ].children = [\n                                            {\n                                              id: newId,\n                                              value:\n                                                \"Sessions (\" +\n                                                secondarySessions.length +\n                                                \")\",\n                                              title: \"Sessions\",\n                                              nodeType: \"sessiontitle\",\n                                            },\n                                          ];\n                                        } else {\n                                          treeValue[0].children[\n                                            indexSubscriptions\n                                          ].children[\n                                            indexGateway.split(\":\")[1]\n                                          ].children.push({\n                                            id: newId,\n                                            value:\n                                              \"Sessions (\" +\n                                              secondarySessions.length +\n                                              \")\",\n                                            title: \"Sessions\",\n                                            nodeType: \"sessiontitle\",\n                                          });\n                                        }\n                                        let sessionIndexToPushChildren =\n                                          treeValue[0].children[\n                                            indexSubscriptions\n                                          ].children[indexGateway.split(\":\")[1]]\n                                            .children.length - 1;\n                                        for (let indexSession in preparedSessions) {\n                                          newId++;\n                                          let newSessionObj = {};\n                                          newSessionObj.id = newId;\n                                          newSessionObj.title =\n                                            preparedSessions[indexSession]\n                                              .groupId +\n                                            \"(\" +\n                                            sessionCounts[\n                                              preparedSessions[indexSession]\n                                                .groupId\n                                            ] +\n                                            \")\";\n                                          let valueToshow =\n                                            preparedSessions[indexSession]\n                                              .groupId +\n                                            \"(\" +\n                                            sessionCounts[\n                                              preparedSessions[indexSession]\n                                                .groupId\n                                            ] +\n                                            \")\";\n\n                                          newSessionObj.value = valueToshow;\n                                          newSessionObj.nodeType = \"session\";\n\n                                          if (indexSession === 0) {\n                                            treeValue[0].children[\n                                              indexSubscriptions\n                                            ].children[\n                                              indexGateway.split(\":\")[1]\n                                            ].children[\n                                              sessionIndexToPushChildren\n                                            ].children = [newSessionObj];\n                                          } else {\n                                            treeValue[0].children[\n                                              indexSubscriptions\n                                            ].children[\n                                              indexGateway.split(\":\")[1]\n                                            ].children[\n                                              sessionIndexToPushChildren\n                                            ].children.push(newSessionObj);\n                                          }\n\n                                          let prepareSessionDataForTable = {};\n                                          prepareSessionDataForTable.subscription_name =\n                                            subscriptionName;\n                                          prepareSessionDataForTable.gateway =\n                                            gatewayShortCurl;\n                                          prepareSessionDataForTable.group_id =\n                                            preparedSessions[\n                                              indexSession\n                                            ].groupId;\n                                          prepareSessionDataForTable.count =\n                                            sessionCounts[\n                                              preparedSessions[\n                                                indexSession\n                                              ].groupId\n                                            ];\n                                          prepareSessionDataForTable.type =\n                                            \"session\";\n                                          technicalTableData.push(\n                                            prepareSessionDataForTable\n                                          );\n                                        }\n                                      }\n                                    }\n                                  }\n                                  if (\n                                    totalNumOfAjaxProcessed === totalNumOfAjax\n                                  ) {\n                                    localStorage.setItem(\n                                      \"technicalTableData\",\n                                      JSON.stringify(technicalTableData)\n                                    );\n                                    localStorage.setItem(\n                                      \"treeValue\",\n                                      JSON.stringify(treeValue)\n                                    );\n                                    this.setState({\n                                      mockTableData: technicalTableData,\n                                    });\n                                    console.log(\"Long Poll data GL\");\n                                  }\n                                });\n                              }\n                            });\n                          }\n                        } else {\n                          treeValue[0].children[indexSubscriptions].value =\n                            treeValue[0].children[indexSubscriptions].value +\n                            \" (0)\";\n                        }\n\n                        if (totalNumOfAjaxProcessed === totalNumOfAjax) {\n                          localStorage.setItem(\n                            \"technicalTableData\",\n                            JSON.stringify(technicalTableData)\n                          );\n                          localStorage.setItem(\n                            \"treeValue\",\n                            JSON.stringify(treeValue)\n                          );\n                          this.setState({\n                            mockTableData: technicalTableData,\n                          });\n                          console.log(\"Long Poll data GL NF\");\n                        }\n                      });\n                    }\n                  });\n                } else {\n                  totalNumOfAjaxProcessed++;\n                }\n              }\n            }\n          }\n        });\n      }\n    });\n  }\n\n  /* istanbul ignore next */\n  generateTableStructure(technicalTableData) {\n    let thead = [];\n    let allFields = [];\n    let tbody = [];\n    const clientConfig = [\n      {\n        gatewayId: \"0idLmsMk8e\",\n        RefID: \"101186260\",\n        IP: \"10.72.11.10:63218\",\n        sessionId: \"0idLmsMk8e\",\n        groupId: \"wabtec-gecars-qa\",\n        bindid: \"XvmV6ynici\",\n        targetId: \"Q7rfHI\",\n        timeCreated: \"2021-02-10T12:11:07.223278039Z\",\n        serviceUrl:\n          \"https://b3a2e606-eaa8-4d3c-aadc-c27f12260a1b.run.aws-usw02-dev.ice.predix.io\",\n      },\n      {\n        gatewayId: \"1idLmsBc9x\",\n        RefID: \"132186260\",\n        IP: \"10.72.11.10:63317\",\n        sessionId: \"1idLmsBc9x\",\n        groupId: \"wabtec-gecars-ta\",\n        bindid: \"ZcdV6snbci\",\n        targetId: \"Q7rfHI\",\n        timeCreated: \"2021-02-10T12:11:07.223278039Z\",\n        serviceUrl:\n          \"https://b3a2e606-eaa8-4d3c-aadc-c27f12260a1b.run.aws-usw02-dev.ice.predix.io\",\n      },\n    ];\n    let mockTableData = clientConfig;\n    sessionStorage.setItem(\"gatewayDetails\", JSON.stringify(clientConfig));\n\n    if (mockTableData.length > 0) {\n      let allDataKeys = Object.keys(mockTableData[0]);\n      for (let dataKey of allDataKeys) {\n        let theadOject = {};\n        theadOject.fieldId = dataKey;\n        theadOject.fieldName = this.toTableHeaderCase(dataKey);\n        thead.push(theadOject);\n        allFields.push(theadOject);\n      }\n\n      for (let allData of mockTableData) {\n        let tbodyObj = {};\n        let objKey = 0;\n        for (let dataKey of allDataKeys) {\n          let singleObj = {};\n          if (allData[dataKey].length > 10) {\n            singleObj.value = allData[dataKey].substr(0, 10);\n            singleObj.hiddenValue = allData[dataKey];\n            singleObj.hiddenState = true;\n          } else {\n            singleObj.value = allData[dataKey];\n          }\n          tbodyObj[objKey] = singleObj;\n          objKey++;\n        }\n        tbody.push(tbodyObj);\n      }\n    }\n\n    this.setState({\n      table: {\n        thead: thead,\n        tbody: tbody,\n      },\n      allFields: allFields,\n    });\n  }\n\n  /* istanbul ignore next */\n  toTableHeaderCase(str) {\n    return str\n      .split(\"_\")\n      .map(function (word, index) {\n        return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();\n      })\n      .join(\" \");\n  }\n\n  /* istanbul ignore next */\n  showHideTableTdData(objectIndex, itemIndex) {\n    let currentTbody = this.state.table.tbody;\n    let copiedObjectToChange = Object.assign(\n      {},\n      currentTbody[objectIndex][itemIndex]\n    );\n    let tempValue = copiedObjectToChange.value;\n    copiedObjectToChange.value = copiedObjectToChange.hiddenValue;\n    copiedObjectToChange.hiddenValue = tempValue;\n    copiedObjectToChange.hiddenState = !copiedObjectToChange.hiddenState;\n    currentTbody[objectIndex][itemIndex] = copiedObjectToChange;\n    this.setState({\n      table: {\n        thead: this.state.table.thead,\n        tbody: currentTbody,\n      },\n    });\n  }\n\n  /* istanbul ignore next */\n  changeToSearchView() {\n    this.setState({\n      isSearchView: true,\n    });\n  }\n\n  /* istanbul ignore next */\n  changeTopologyView(items) {\n    //let shapeArray = this.state.nodeShapes;\n    let nodes = [];\n    let edges = [];\n    let treeObj = Object.assign({}, items);\n    let parentNodeId = treeObj.id;\n    let parentNodeLabel = treeObj.value;\n    let parentNodeTitle = treeObj.title;\n    let color = treeObj.color;\n    let parentNode = {};\n    parentNode.id = parentNodeId;\n    parentNode.label = parentNodeLabel;\n    parentNode.title = parentNodeTitle;\n    parentNode.color = color;\n    parentNode.shape = \"ellipse\";\n    parentNode.color = color;\n    nodes.push(parentNode);\n    if (treeObj.children) {\n      let childern = [...treeObj.children];\n      for (let childNode of childern) {\n        let copiedChildNode = Object.assign({}, childNode);\n        let childNodeId = copiedChildNode.id;\n        let childNodeLabel = copiedChildNode.value;\n        let childNodeTitle = copiedChildNode.title;\n        let childNodeType = copiedChildNode.nodeType;\n        let childNodeColor = copiedChildNode.color;\n        let childNodeEgdeLabel = childNode.edgeLabel;\n        let preparedChildNode = {};\n        preparedChildNode.id = childNodeId;\n        preparedChildNode.label = childNodeLabel;\n        preparedChildNode.title = childNodeTitle;\n        let shape = \"box\";\n        let color = \"#80b8d2fa\";\n        if (childNodeType === \"subscription\") {\n          shape = \"circle\";\n          color = \"#08cc9efa\";\n        } else if (\n          childNodeType === \"superconnectiontitle\" ||\n          childNodeType === \"clientpooltitle\" ||\n          childNodeType === \"sessiontitle\"\n        ) {\n          shape = \"circle\";\n          color = \"#08cc9efa\";\n        } else if (childNodeType === \"clientpool\") {\n          shape = \"ellipse\";\n          color = \"#e84a4a\";\n        } else if (childNodeType === \"session\") {\n          shape = \"box\";\n          color = \"#ffc107\";\n        }\n        preparedChildNode.shape = shape;\n        preparedChildNode.color = childNodeColor;\n        nodes.push(preparedChildNode);\n\n        let prepareEdges = {};\n        prepareEdges.from = parentNodeId;\n        prepareEdges.to = childNodeId;\n        prepareEdges.label = childNodeEgdeLabel;\n        prepareEdges.color = childNodeColor;\n        edges.push(prepareEdges);\n      }\n    }\n\n    this.setState({\n      graph: {\n        nodes: nodes,\n        edges: edges,\n      },\n    });\n  }\n\n  /* istanbul ignore next */\n  removeDuplicates(myArr, prop) {\n    return myArr.filter((obj, pos, arr) => {\n      return arr.map((mapObj) => mapObj[prop]).indexOf(obj[prop]) === pos;\n    });\n  }\n\n  destroyDataTable(tableId) {\n    var table = $(\"#\" + tableId).DataTable();\n    table.destroy();\n  }\n\n  /* istanbul ignore next */\n  refreshData(e) {\n    this.destroyDataTable(\"viewTable\");\n    this.setState({\n      loadTreeJs: false,\n      apiLoadPercentage: 70,\n    });\n    if (\n      localStorage.getItem(\"treeValue\") !== null &&\n      localStorage.getItem(\"technicalTableData\") !== null\n    ) {\n      this.displayDataFromLocalStorage();\n    } else {\n      let thead = [\n        { fieldId: \"subscription_name\", fieldName: \"Subscription Name\" },\n        { fieldId: \"gateway\", fieldName: \"Gateway\" },\n        { fieldId: \"group_id\", fieldName: \"Group Id\" },\n        { fieldId: \"count\", fieldName: \"Count\" },\n        { fieldId: \"type\", fieldName: \"Type\" },\n      ];\n      this.setState({\n        table: {\n          thead: thead,\n          tbody: [],\n        },\n        allFields: [],\n      });\n      setTimeout(() => {\n        this.setState({\n          treeValue: [],\n          graph: {\n            nodes: [],\n            edges: [],\n          },\n          apiLoadPercentage: 100,\n          loadTreeJs: true,\n        });\n      }, 2000);\n    }\n  }\n\n  /* istanbul ignore next */\n  createView(selectedFields, filterFields) {\n    // search functionality here\n    let mockTableData = [...this.state.mockTableData];\n    console.log(mockTableData);\n    let filteredData = mockTableData;\n    let uniqueFilteredData = [];\n    let andFilters = [];\n    let orFilters = [];\n    for (let filterField of filterFields) {\n      if (\n        filterField.whereCondition === \"AND\" &&\n        filterField.whereValue !== \"\"\n      ) {\n        andFilters.push(filterField);\n      } else if (\n        filterField.whereCondition === \"OR\" &&\n        filterField.whereValue !== \"\"\n      ) {\n        orFilters.push(filterField);\n      }\n    }\n\n    if (andFilters.length > 0) {\n      for (let andFilter of andFilters) {\n        if (andFilter.whereOperator === \"=\") {\n          filteredData = filteredData.filter(function (data) {\n            // jshint ignore:line\n            return data[andFilter.whereField] === andFilter.whereValue;\n          });\n        } else if (andFilter.whereOperator === \">\") {\n          filteredData = filteredData.filter(function (data) {\n            // jshint ignore:line\n            return data[andFilter.whereField] > andFilter.whereValue;\n          });\n        } else if (andFilter.whereOperator === \"<\") {\n          filteredData = filteredData.filter(function (data) {\n            // jshint ignore:line\n            return data[andFilter.whereField] < andFilter.whereValue;\n          });\n        } else if (andFilter.whereOperator === \"!=\") {\n          filteredData = filteredData.filter(function (data) {\n            // jshint ignore:line\n            return data[andFilter.whereField] !== andFilter.whereValue;\n          });\n        }\n      }\n    }\n\n    if (orFilters.length > 0) {\n      let orResults = [];\n      for (let orFilter of orFilters) {\n        let orFilteredDatas = [];\n        let wholeData = [...this.state.mockTableData];\n        if (orFilter.whereOperator === \"=\") {\n          orFilteredDatas = wholeData.filter(function (data) {\n            // jshint ignore:line\n            return data[orFilter.whereField] === orFilter.whereValue;\n          });\n        } else if (orFilter.whereOperator === \">\") {\n          orFilteredDatas = wholeData.filter(function (data) {\n            // jshint ignore:line\n            return data[orFilter.whereField] > orFilter.whereValue;\n          });\n        } else if (orFilter.whereOperator === \"<\") {\n          orFilteredDatas = wholeData.filter(function (data) {\n            // jshint ignore:line\n            return data[orFilter.whereField] < orFilter.whereValue;\n          });\n        } else if (orFilter.whereOperator === \"!=\") {\n          orFilteredDatas = wholeData.filter(function (data) {\n            // jshint ignore:line\n            return data[orFilter.whereField] !== orFilter.whereValue;\n          });\n        }\n\n        if (orFilteredDatas.length > 0) {\n          for (let orFilteredData of orFilteredDatas) {\n            orResults.push(orFilteredData);\n          }\n        }\n      }\n\n      if (orResults.length > 0) {\n        for (let orResult of orResults) {\n          filteredData.push(orResult);\n        }\n      }\n    }\n\n    if (orFilters.length > 0) {\n      let seen = Object.create(null);\n      let uniqueFilteredData = filteredData.filter((o) => {\n        var key = [\"subscription_name\", \"group_id\", \"gateway\"]\n          .map((k) => o[k])\n          .join(\"|\");\n        if (!seen[key]) {\n          seen[key] = true;\n          return true;\n        }\n      });\n    } else {\n      uniqueFilteredData = filteredData;\n    }\n\n    let selectedDataKeys = [];\n    let tbody = [];\n    for (let selDatakey of selectedFields) {\n      selectedDataKeys.push(selDatakey.fieldId);\n    }\n    for (let allData of filteredData) {\n      let tbodyObj = {};\n      let objKey = 0;\n      for (let dataKey of selectedDataKeys) {\n        let singleObj = {};\n        if (allData[dataKey].length > 10) {\n          singleObj.value = allData[dataKey].substr(0, 10);\n          singleObj.hiddenValue = allData[dataKey];\n          singleObj.hiddenState = true;\n        } else {\n          singleObj.value = allData[dataKey];\n        }\n        tbodyObj[objKey] = singleObj;\n        objKey++;\n      }\n      tbody.push(tbodyObj);\n    }\n\n    this.setState({\n      table: {\n        thead: selectedFields,\n        tbody: tbody,\n      },\n      isSearchView: false,\n    });\n  }\n\n  /* istanbul ignore next */\n  render() {\n    /* jshint ignore:start */\n    /* istanbul ignore next */\n    return (\n      <div>\n        {!this.state.isSearchView ? (\n          <div className=\"Technicalview\">\n            <ul className=\"nav nav-tabs\" id=\"myTab\" role=\"tablist\">\n              <li className=\"nav-item\">\n                <a\n                  className=\"nav-link active\"\n                  id=\"home-tab\"\n                  data-toggle=\"tab\"\n                  href=\"#home\"\n                  role=\"tab\"\n                  aria-controls=\"home\"\n                  aria-selected=\"true\"\n                >\n                  Table\n                </a>\n              </li>\n              <li className=\"nav-item\">\n                <a\n                  className=\"nav-link\"\n                  id=\"profile-tab\"\n                  data-toggle=\"tab\"\n                  href=\"#profile\"\n                  role=\"tab\"\n                  aria-controls=\"profile\"\n                  aria-selected=\"false\"\n                >\n                  Treelist and Topology\n                </a>\n              </li>\n              <li\n                title=\"Refresh\"\n                className=\"nav-item cursor-pointer\"\n                onClick={(event) => {\n                  this.refreshData(event);\n                }}\n              >\n                <a className=\"nav-link disabled\" href=\"#\">\n                  <img\n                    className=\"\"\n                    src={IconRefresh}\n                    alt=\"refresh\"\n                    height=\"15px\"\n                  />\n                </a>\n              </li>\n            </ul>\n            <div className=\"tab-content\" id=\"myTabContent\">\n              <div\n                className=\"tab-pane fade show active\"\n                id=\"home\"\n                role=\"tabpanel\"\n                aria-labelledby=\"home-tab\"\n              >\n                {this.state.loadTreeJs ? (\n                  this.state.table.tbody.length > 0 ? (\n                    <div className=\"row view-table\">\n                      <div className=\"col-md-12\" id=\"viewTableDiv\">\n                        <button\n                          onClick={this.changeToSearchView.bind(this)}\n                          className=\"btn btn-sm float-right btn-link\"\n                        >\n                          Advanced search\n                        </button>\n                        <Viewtable\n                          tableData={this.state.table}\n                          showHideTableTdData={this.showHideTableTdData.bind(\n                            this\n                          )}\n                          userId={this.props.userId}\n                          showGlobalMessage={this.props.showGlobalMessage.bind(\n                            this\n                          )}\n                          hideGlobalMessage={this.props.hideGlobalMessage.bind(\n                            this\n                          )}\n                          permissions={this.props.permissions}\n                        ></Viewtable>\n                      </div>\n                    </div>\n                  ) : (\n                    <div className=\"row mt-2\">\n                      <div className=\"col-md-12\">\n                        <div className=\"alert alert-success\" role=\"alert\">\n                          No record found!\n                        </div>\n                      </div>\n                    </div>\n                  )\n                ) : (\n                  <div className=\"row\">\n                    <div className=\"col-md-12 mt-5\">\n                      <p>Please wait...</p>\n                      <div className=\"progress\">\n                        <div\n                          className=\"progress-bar progress-bar-striped progress-bar-animated\"\n                          style={{ width: this.state.apiLoadPercentage + \"%\" }}\n                        ></div>\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </div>\n              <div\n                className=\"tab-pane fade\"\n                id=\"profile\"\n                role=\"tabpanel\"\n                aria-labelledby=\"profile-tab\"\n              >\n                {this.state.loadTreeJs ? (\n                  this.state.graph.nodes.length > 0 &&\n                  this.state.treeValue.length > 0 ? (\n                    <div className=\"row\">\n                      <div className=\"col-md-4 treeview-div\">\n                        <Treelist\n                          treeValue={this.state.treeValue}\n                          changeTopology={this.changeTopologyView.bind(this)}\n                        ></Treelist>\n                      </div>\n                      <div className=\"col-md-8 treeview-div\">\n                        <Topologygraph\n                          nodeData={this.state.graph}\n                        ></Topologygraph>\n                      </div>\n                    </div>\n                  ) : (\n                    <div className=\"row mt-2\">\n                      <div className=\"col-md-12\">\n                        <div className=\"alert alert-success\" role=\"alert\">\n                          No record found!\n                        </div>\n                      </div>\n                    </div>\n                  )\n                ) : (\n                  <div className=\"row\">\n                    <div className=\"col-md-12 mt-5\">\n                      <p>Please wait...</p>\n                      <div className=\"progress\">\n                        <div\n                          className=\"progress-bar progress-bar-striped progress-bar-animated\"\n                          style={{ width: this.state.apiLoadPercentage + \"%\" }}\n                        ></div>\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        ) : (\n          <Customsearch\n            showGlobalMessage={this.props.showGlobalMessage.bind(this)}\n            hideGlobalMessage={this.props.hideGlobalMessage.bind(this)}\n            allFields={this.state.allFields}\n            selectedFields={this.state.table.thead}\n            createView={this.createView.bind(this)}\n          ></Customsearch>\n        )}\n      </div>\n    );\n    /* jshint ignore:end */\n  }\n}\n","import React from \"react\";\n//import ReactDOM from \"react-dom\";\n\nimport Treelist from '../Treelist/Treelist.js';\nimport Topologygraph from '../Topologygraph/Topologygraph.js';\n//import Viewtable from '../Viewtable/Viewtable.js';\n\nexport default class Businessview extends React.Component {\n\n    /* istanbul ignore next */\n    constructor(props){\n        super(props);\n        this.state = {\n            treeValue: [],\n            graph: {\n                nodes: [],\n                edges: []\n            },\n\n            options: {\n                layout: {\n                  hierarchical: true\n                },\n                edges: {\n                  color: \"#000000\"\n                },\n                height: \"500px\"\n            },\n            table:{\n                thead: [],\n                tbody: []\n            }\n        };\n    }\n\n    /* istanbul ignore next */\n    componentDidMount(){\n        let treeValue = [{\n            id: 1,\n            value: 'EC',\n            children: [\n                {\n                    id: 2,\n                    value: 'Business',\n                    children: [\n                        {\n                            id: 7,\n                            value: 'Aviation',\n                            children: [\n                                {\n                                    id: 11,\n                                    value: 'Aviation1'\n                                },\n                                {\n                                    id: 12,\n                                    value: 'Aviation2'\n                                },\n                                {\n                                    id: 13,\n                                    value: 'Aviation3'\n                                },\n                            ]\n                        },\n                        {\n                            id: 8,\n                            value: 'Power'\n                        },\n                        {\n                            id: 9,\n                            value: 'Capital'\n                        },\n                        {\n                            id: 10,\n                            value: 'External'\n                        }\n                    ]\n                },\n                {\n                    id: 3,\n                    value: 'Subscription'\n                },\n                {\n                    id: 4,\n                    value: 'Application'\n                },\n                {\n                    id: 5,\n                    value: 'Groups'\n                },\n                {\n                    id: 6,\n                    value: 'Connection'\n                }\n            ]\n        }];\n        let nodes = [];\n        let edges = [];\n        if(treeValue.length > 0){\n            let treeObj = treeValue[0];\n            let parentNodeId = treeObj.id;\n            let parentNodeLabel = treeObj.value;\n            let parentNode = { id: parentNodeId, label: parentNodeLabel };\n            nodes.push(parentNode);\n            if(treeObj.children){\n                for(let childNode of treeObj.children){\n                    let childNodeId = childNode.id;\n                    let childNodeLabel = childNode.value;\n                    let preparedChildNode = { id: childNodeId, label: childNodeLabel };\n                    nodes.push(preparedChildNode);\n\n                    let prepareEdges = { from: 1, to: childNodeId };\n                    edges.push(prepareEdges);\n                }\n            }\n        }\n        \n        this.setState({\n            treeValue: treeValue,\n            graph: {\n                nodes: nodes,\n                edges: edges\n            }\n        });\n    }\n\n    /* istanbul ignore next */\n    changeTopologyView(items){\n        let nodes = [];\n        let edges = [];\n        let treeObj = Object.assign({}, items);\n        let parentNodeId = treeObj.id;\n        let parentNodeLabel = treeObj.value;\n        let parentNode = {};\n        parentNode.id = parentNodeId;\n        parentNode.label = parentNodeLabel;\n        nodes.push(parentNode);\n        if(treeObj.children){\n            let childern = [ ...treeObj.children];\n            for(let childNode of childern){\n                let copiedChildNode = Object.assign({}, childNode);\n                let childNodeId = copiedChildNode.id;\n                let childNodeLabel = copiedChildNode.value;\n                let preparedChildNode = {};\n                preparedChildNode.id = childNodeId;\n                preparedChildNode.label = childNodeLabel;\n                nodes.push(preparedChildNode);\n\n                let prepareEdges = {};\n                prepareEdges.from = parentNodeId;\n                prepareEdges.to = childNodeId;\n                edges.push(prepareEdges);\n            }\n        }\n\n        this.setState({\n            graph: {\n                nodes: nodes,\n                edges: edges\n            }\n        });\n    }\n\n    /* istanbul ignore next */\n    render() {\n        /* jshint ignore:start */\n        return (\n            <div className=\"Businessview\">\n                {/*<div id=\"accordion\">\n                    <div className=\"card\">\n                        <div className=\"card-header\" id=\"headingOne\">\n                            <h5 className=\"mb-0\">\n                                <button className=\"btn btn-link\" data-toggle=\"collapse\" data-target=\"#collapseOne\" aria-expanded=\"false\" aria-controls=\"collapseOne\">\n                                    Treelist and Topology\n                                </button>\n                            </h5>\n                        </div>\n\n                        <div id=\"collapseOne\" className=\"collapse\" aria-labelledby=\"headingOne\" data-parent=\"#accordion\">\n                            <div className=\"card-body\">\n                                <div className=\"row\">\n                                    <div className=\"col-md-4 treeview-div\">\n                                        <Treelist treeValue={this.state.treeValue} changeTopology={this.changeTopologyView.bind(this)}></Treelist>\n                                    </div>\n                                    <div className=\"col-md-8 treeview-div\">\n                                        <Topologygraph nodeData={this.state.graph}></Topologygraph>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"card\">\n                        <div className=\"card-header\" id=\"headingTwo\">\n                            <h5 className=\"mb-0\">\n                                <button className=\"btn btn-link collapsed\" data-toggle=\"collapse\" data-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\n                                    Table\n                                </button>\n                            </h5>\n                        </div>\n                        <div id=\"collapseTwo\" className=\"collapse\" aria-labelledby=\"headingTwo\" data-parent=\"#accordion\">\n                            <div className=\"card-body\">\n                            {\n                                this.props.showTable ?\n                                    <div className=\"row view-table\">\n                                        <div className=\"col-md-12\">\n                                            <Viewtable tableData={this.props.tableData} showHideTableTdData={this.props.showHideTableTdData.bind(this)}></Viewtable>\n                                        </div>\n                                        <div className=\"col-md-12\">\n                                            <button onClick={this.props.goToSearch.bind(this)} className=\"btn btn-sm float-right customize-view-btn\">CUSTOMIZE VIEW</button>\n                                        </div>\n                                    </div> :\n                                    <p className=\"text-center loader-icon\">\n                                        <img alt=\"loading\" src=\"assets/static/images/rolling.svg\" />\n                                    </p>\n                            }\n                            </div>\n                        </div>\n                    </div>\n                </div> */}\n\n                <ul className=\"nav nav-tabs\" id=\"myTab\" role=\"tablist\">\n                    <li className=\"nav-item\">\n                        <a className=\"nav-link active\" id=\"home-tab\" data-toggle=\"tab\" href=\"#home\" role=\"tab\" aria-controls=\"home\" aria-selected=\"true\">Table</a>\n                    </li>\n                    <li className=\"nav-item\">\n                        <a className=\"nav-link\" id=\"profile-tab\" data-toggle=\"tab\" href=\"#profile\" role=\"tab\" aria-controls=\"profile\" aria-selected=\"false\">Treelist and Topology</a>\n                    </li>\n                </ul>\n                <div className=\"tab-content\" id=\"myTabContent\">\n                    <div className=\"tab-pane fade show active\" id=\"home\" role=\"tabpanel\" aria-labelledby=\"home-tab\">\n                    \n                        <div className=\"row view-table\">\n                            <div className=\"col-md-12\" id=\"viewTableDiv\">\n                                {/*<button onClick={this.props.goToSearch.bind(this)} className=\"btn btn-sm float-right btn-link\">Advanced search</button>\n                                <Viewtable tableData={this.props.tableData} showHideTableTdData={this.props.showHideTableTdData.bind(this)}></Viewtable>*/}\n                                <h3>Work in progress for real time table view</h3>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"tab-pane fade\" id=\"profile\" role=\"tabpanel\" aria-labelledby=\"profile-tab\">\n                        <div className=\"row\">\n                            <div className=\"col-md-4 treeview-div\">\n                                <Treelist treeValue={this.state.treeValue} changeTopology={this.changeTopologyView.bind(this)}></Treelist>\n                            </div>\n                            <div className=\"col-md-8 treeview-div\">\n                                <Topologygraph nodeData={this.state.graph}></Topologygraph>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n        /* jshint ignore:end */\n    }\n}","import React from \"react\";\nimport $ from 'jquery';\nimport Technicalview from \"./Technicalview.js\";\nimport Businessview from \"./Businessview.js\";\nimport { event } from \"jquery\";\n\nexport default class View extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      mockTableData: [],\n      topologyView: false, // false = Technical view, true = Business view\n    };\n  }\n\n  /* istanbul ignore next */\n  componentDidMount() {\n\n    $.fn.extend({\n      treed: function (o) {\n        var openedClass = \"fa-minus\";\n        var closedClass = \"fa-plus\";\n  \n        if (typeof o != \"undefined\") {\n          if (typeof o.openedClass != \"undefined\") {\n            openedClass = o.openedClass;\n          }\n          if (typeof o.closedClass != \"undefined\") {\n            closedClass = o.closedClass;\n          }\n        }\n  \n        //initialize each of the top levels\n        var tree = $(this);\n        tree.addClass(\"tree\");\n        tree\n          .find(\"li\")\n          .has(\"ul\")\n          .each(function () {\n            var branch = $(this); //li with children ul\n            branch.prepend(\"<i class='fa \" + closedClass + \"'></i>\");\n            branch.addClass(\"branch\");\n            branch.on(\"click\", function (e) {\n              if (this == e.target) {\n                var icon = $(this).children(\"i:first\");\n                icon.toggleClass(openedClass + \" \" + closedClass);\n                $(this).children().children().toggle();\n              }\n            });\n            branch.children().children().toggle();\n          });\n        //fire event from the dynamically added icon\n        tree.find(\".branch .indicator\").each(function () {\n          $(this).on(\"click\", function () {\n            $(this).closest(\"li\").click();\n          });\n        });\n        //fire event to open branch if the li contains an anchor instead of text\n        tree.find(\".branch>a\").each(function () {\n          $(this).on(\"click\", function (e) {\n            $(this).closest(\"li\").click();\n            e.preventDefault();\n          });\n        });\n        //fire event to open branch if the li contains a button instead of text\n        tree.find(\".branch>button\").each(function () {\n          $(this).on(\"click\", function (e) {\n            $(this).closest(\"li\").click();\n            e.preventDefault();\n          });\n        });\n      },\n    });\n  }\n\n  /* istanbul ignore next */\n  changeTopologyView() {\n    this.setState({\n      topologyView: event.target.checked,\n    });\n  }\n\n  /* istanbul ignore next */\n  servedTopologyView() {\n    const currentTopologyView = this.state.topologyView;\n    if (!currentTopologyView) {\n      // Technical view\n      return (\n        <Technicalview\n          authToken={this.props.authToken}\n          baseUrl={this.props.baseUrl}\n          userId={this.props.userId}\n          showGlobalMessage={this.props.showGlobalMessage}\n          hideGlobalMessage={this.props.hideGlobalMessage}\n          permissions={this.props.permissions}\n        />\n      ); // jshint ignore:line\n    } else {\n      // Business view\n      return (\n        <Businessview\n          authToken={this.props.authToken}\n          baseUrl={this.props.baseUrl}\n          userId={this.props.userId}\n          showGlobalMessage={this.props.showGlobalMessage}\n          hideGlobalMessage={this.props.hideGlobalMessage}\n        />\n      ); // jshint ignore:line\n    }\n  }\n\n  render() {\n    /* jshint ignore:start */\n    /* istanbul ignore next */\n    return (\n      <div className=\"centered-div View\">\n        <div className=\"centered-div-header\">\n          <div className=\"row view-header\">\n            <div className=\"col-sm-8\">\n              <h6 id=\"view-header-title\">Topology view</h6>\n            </div>\n            <div className=\"col-sm-4\">\n              <div className=\"row\">\n                <div className=\"col-sm-5\">\n                  <h6>Technical view</h6>\n                </div>\n                <div className=\"col-sm-2\">\n                  <div className=\"custom-control custom-switch\">\n                    <input\n                      checked={this.state.topologyView}\n                      onChange={(event) => this.changeTopologyView(event)}\n                      type=\"checkbox\"\n                      className=\"custom-control-input\"\n                      id=\"viewComponentChange\"\n                    />\n                    <label\n                      className=\"custom-control-label cursor-pointer\"\n                      htmlFor=\"viewComponentChange\"\n                    >\n                      &nbsp;\n                    </label>\n                  </div>\n                </div>\n                <div className=\"col-sm-5\">\n                  <h6>Business view</h6>\n                </div>\n              </div>\n            </div>\n          </div>\n          <hr></hr>\n          <div className=\"col-md-12\">{this.servedTopologyView()}</div>\n        </div>\n      </div>\n    );\n    /* jshint ignore:end */\n  }\n}\n"],"sourceRoot":""}